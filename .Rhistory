# Find associated Face Box information for specific image
faceData <- ALLmetaIMGnamedFaces %>% filter(file == i)
if(nrow(faceData) == 0){
return(p)
} else{
faceData <- faceData %>%
mutate(x1 = minX, x2 = minX, x3 = maxX, x4 = maxX, x5 = minX,
y1 = minY, y2 = maxY, y3 = maxY, y4 = minY, y5 = minY) %>%
gather(corner, boxPos, x1:y5) %>%
mutate(posCoord = substr(corner, 1, 1), posID = substr(corner, 2, 2)) %>%
dplyr::select(-corner) %>% spread(posCoord, boxPos) %>%
dplyr::select(file, type, minX, maxX, minY, maxY, FaceKey, FaceID, posID, x, y)
}
}
if(matchBox){
p1 <- p + geom_rect(data=faceData,
aes(xmin=minX, ymin=-maxY, xmax=maxX, ymax=-minY,
color=FaceKey, group=FaceID), fill=NA) +
guides(colour = "none")
}
else{
p1 <- p + geom_rect(data=faceData,
aes(xmin=minX, ymin=-maxY, xmax=maxX, ymax=-minY,
color=type, group=FaceID), fill=NA) +
guides(colour = guide_legend(""))  + theme(legend.position = "bottom") +
coord_fixed(ratio=0.85)
}
return(p1)
}
# Create graphs of factors in manual proportions
getManualCount <- function(type, count) {
return(count[type == "Manual"])
}
ggplotProportion <- function(dataset, factorVar){
factorVar <- deparse(substitute(factorVar))
dataset <- dataset %>% filter(matchesManual) %>% group_by_(factorVar, "type") %>% summarise(nTotal=n()) %>% group_by_(factorVar) %>% mutate(ManualCount = getManualCount(type, nTotal)) %>%
mutate(proportion = nTotal/ManualCount) %>% rename_(xvar = factorVar) %>% filter(type!="Manual")
ggplot(dataset, aes(x=xvar, y=proportion, group = reorder(type, -proportion), fill=type)) + geom_bar(stat = "identity", position = "dodge") +
ylab("Proportion of faces matched") + xlab(factorVar)
}
ALLmetaIMGPlayers<- ALLmetaIMGnamed %>% filter(detect=="Player")
# change this to facesVenn with binary information
ALLmetaIMGnamedFaces<-ALLmetaIMGnamed%>%
filter(!is.na(type)) %>%
dplyr::select(-ID, -facecounter)%>%
mutate(fileID = as.numeric(factor(file))) %>%
mutate(FaceKey=paste(fileID, boxID, sep="-")) %>%
mutate(FaceID=paste(fileID, boxID, substring(type, 1,2), sep="-"))
# Create UpSetR graph
createUpSet <- function(data) {
VennLists<-data %>%
split(.$type) %>%
map(~ .$FaceKey)%>%
fromList() %>%
upset(order.by="freq", nsets=100)
}
overlayGgplot(as.list(CompShot$file))
overlayGgplot(CompShot$file[1])
overlayGgplot(CompShot$file[2])
overlayGgplot(CompShot$file[3])
overlayGgplot(CompShot$file[4])
overlayGgplot(CompShot$file[4])
overlayGgplot(CompShot$file[5])
overlayGgplot(CompShot$file[6])
overlayGgplot(CompShot$file[7])
overlayGgplot(CompShot$file[8])
overlayGgplot(CompShot$file[10])
overlayGgplot(CompShot$file[11])
overlayGgplot(CompShot$file[12])
overlayGgplot(CompShot$file[13])
overlayGgplot(CompShot$file[14])
overlayGgplot(CompShot$file[15])
overlayGgplot(CompShot$file[16])
overlayGgplot(CompShot$file[17])
overlayGgplot(CompShot$file[18])
overlayGgplot(CompShot$file[19])
overlayGgplot(CompShot$file[20])
CompShot$file[13:19]
View(ALLmetaIMGnamedFaces)
v
SolutionSpecs<-read_csv("data/ManualClassifiedFaces.csv")
Manual<-read_csv("data/ManualClassifiedFaces.csv")
View(Manual)
overlayGgplot(CompShot$file[2])
overlayGgplot("2016_HSA_R01_BTomic_AUS_vs_DIstomin_UZB_MS157_clip.0026.png")
overlayGgplot("2016_HSA_R01_BTomic_AUS_vs_DIstomin_UZB_MS157_clip.0028.png")
overlayGgplot("2016_HSA_R01_BTomic_AUS_vs_DIstomin_UZB_MS157_clip.0026.png")
overlayGgplot("2016_HSA_R01_BTomic_AUS_vs_DIstomin_UZB_MS157_clip.0023.png")
overlayGgplot("2016_HSA_R01_BTomic_AUS_vs_DIstomin_UZB_MS157_clip.0003.png")
overlayGgplot("2016_HSA_R01_BTomic_AUS_vs_DIstomin_UZB_MS157_clip.0021.png")
overlayGgplot("2016_HSA_R01_BTomic_AUS_vs_DIstomin_UZB_MS157_clip.0022.png")
overlayGgplot("2016_CT6_R01_EKulichkova_RUS_vs_APetkovic_GER_WS128_clip.0009.png")
overlayGgplot("2016_CT6_R01_EKulichkova_RUS_vs_APetkovic_GER_WS128_clip.0010.png")
overlayGgplot("2016_CT6_R01_EKulichkova_RUS_vs_APetkovic_GER_WS128_clip.0009.png")
overlayGgplot("2016_CT6_R01_EKulichkova_RUS_vs_APetkovic_GER_WS128_clip.0009.png")
overlayGgplot("2016_CT6_R01_EKulichkova_RUS_vs_APetkovic_GER_WS128_clip.0010.png")
overlayGgplot("2016_CT6_R01_EKulichkova_RUS_vs_APetkovic_GER_WS128_clip.0009.png")
overlayGgplot("2016_CT6_R01_EKulichkova_RUS_vs_APetkovic_GER_WS128_clip.0010.png")
overlayGgplot("2016_CT6_R01_EKulichkova_RUS_vs_APetkovic_GER_WS128_clip.0011.png")
overlayGgplot("2016_CT6_R01_EKulichkova_RUS_vs_APetkovic_GER_WS128_clip.0012.png")
overlayGgplot("2016_CT6_R01_EKulichkova_RUS_vs_APetkovic_GER_WS128_clip.0030.png")
overlayGgplot("2016_CT6_R01_EKulichkova_RUS_vs_APetkovic_GER_WS128_clip.0031.png")
overlayGgplot("2016_CT6_R01_EKulichkova_RUS_vs_APetkovic_GER_WS128_clip.0032.png")
mylist<-as.list(CompShot$file)
overlayGgplot(mylist)
overlayGgplot(mylist)
lapply(mylist, overlayGgplot)
lapply(mylist[1:10], overlayGgplot)
ALLmetaIMGnamedFaces<-ALLmetaIMGnamed%>%
filter(!is.na(type)) %>%
dplyr::select(-ID, -facecounter)%>%
mutate(fileID = as.numeric(factor(file))) %>%
mutate(FaceKey=paste(fileID, boxID, sep="-")) %>%
mutate(FaceID=paste(fileID, boxID, substring(type, 1,2), sep="-"))
View(ALLmetaIMGnamedFaces)
overlayGgplot(mylist)
#packages:
library(bookdown)
library(pander)
library(ggplot2)
library(imager)
library(devtools)
library(knitcitations)
library(RefManageR)
library(readr)
library(knitr)
library(grid)
library(tidyverse)
library(magick)
library(kfigr)
library(UpSetR)
library(descr)
library(xtable)
library(ggthemes)
library(EBImage)
knitr::opts_chunk$set(echo=FALSE, message=FALSE, warning=FALSE, kfigr.link=TRUE, kfigr.prefix=TRUE, cache=TRUE, fig.env = TRUE)
options("citation_format" = "pandoc")
BibOptions(check.entries = FALSE, style = "markdown", bib.style = "alphabetic", cite.style = 'alphabetic')
#csv files:
ALLmetaIMGnamed<-read_csv("data/ALLmetaIMGnamed.csv", col_types = cols(type = col_factor(levels = c("Manual", "Animetrics", "Google", "Microsoft", "Skybiometry"))))
SceneAttributes<-read_csv("figures/SceneAttributes.csv")
FaceAttributes<-read_csv("figures/FaceAttributes.csv")
SolutionSpecs<-read_csv("figures/SolutionSpecifications.csv")
#plot images with overlaid boxes
overlayGgplot <- function(imgList, mergeData, matchBox=FALSE){
for(i in imgList){
#read in image
image <- readImage(paste0("figures/", i))
#used in analyses
#image <- readImage(paste0("images/", i))
#convert image to a df, add hex value
image_df <- data.frame(x=rep(1:nrow(image), ncol(image)),
y=rep(1:ncol(image),
rep(nrow(image),
ncol(image))),
r=as.vector(image[,,1]),
g=as.vector(image[,,2]),
b=as.vector(image[,,3]))
image_df$h <- rgb(image_df[,3:5])
#Create the plot of the image
p <- ggplot() +
scale_fill_identity() +
geom_tile(data=image_df, aes(x,-y, fill=h)) +
theme_void()
# Find associated Face Box information for specific image
faceData <- ALLmetaIMGnamedFaces %>% filter(file == i)
if(nrow(faceData) == 0){
return(p)
} else{
faceData <- faceData %>%
mutate(x1 = minX, x2 = minX, x3 = maxX, x4 = maxX, x5 = minX,
y1 = minY, y2 = maxY, y3 = maxY, y4 = minY, y5 = minY) %>%
gather(corner, boxPos, x1:y5) %>%
mutate(posCoord = substr(corner, 1, 1), posID = substr(corner, 2, 2)) %>%
dplyr::select(-corner) %>% spread(posCoord, boxPos) %>%
dplyr::select(file, type, minX, maxX, minY, maxY, FaceKey, FaceID, posID, x, y)
}
}
if(matchBox){
p1 <- p + geom_rect(data=faceData,
aes(xmin=minX, ymin=-maxY, xmax=maxX, ymax=-minY,
color=FaceKey, group=FaceID), fill=NA) +
guides(colour = "none")
}
else{
p1 <- p + geom_rect(data=faceData,
aes(xmin=minX, ymin=-maxY, xmax=maxX, ymax=-minY,
color=type, group=FaceID), fill=NA) +
guides(colour = guide_legend(""))  + theme(legend.position = "bottom") +
coord_fixed(ratio=0.85)
}
return(p1)
}
# Create graphs of factors in manual proportions
getManualCount <- function(type, count) {
return(count[type == "Manual"])
}
ggplotProportion <- function(dataset, factorVar){
factorVar <- deparse(substitute(factorVar))
dataset <- dataset %>% filter(matchesManual) %>% group_by_(factorVar, "type") %>% summarise(nTotal=n()) %>% group_by_(factorVar) %>% mutate(ManualCount = getManualCount(type, nTotal)) %>%
mutate(proportion = nTotal/ManualCount) %>% rename_(xvar = factorVar) %>% filter(type!="Manual")
ggplot(dataset, aes(x=xvar, y=proportion, group = reorder(type, -proportion), fill=type)) + geom_bar(stat = "identity", position = "dodge") +
ylab("Proportion of faces matched") + xlab(factorVar)
}
ALLmetaIMGPlayers<- ALLmetaIMGnamed %>% filter(detect=="Player")
# change this to facesVenn with binary information
ALLmetaIMGnamedFaces<-ALLmetaIMGnamed%>%
filter(!is.na(type)) %>%
dplyr::select(-ID, -facecounter)%>%
mutate(fileID = as.numeric(factor(file))) %>%
mutate(FaceKey=paste(fileID, boxID, sep="-")) %>%
mutate(FaceID=paste(fileID, boxID, substring(type, 1,2), sep="-"))
# Create UpSetR graph
createUpSet <- function(data) {
VennLists<-data %>%
split(.$type) %>%
map(~ .$FaceKey)%>%
fromList() %>%
upset(order.by="freq", nsets=100)
}
overlayGgplot(mylist)
#packages:
library(bookdown)
library(pander)
library(ggplot2)
library(imager)
library(devtools)
library(knitcitations)
library(RefManageR)
library(readr)
library(knitr)
library(grid)
library(tidyverse)
library(magick)
library(kfigr)
library(UpSetR)
library(descr)
library(xtable)
library(ggthemes)
library(EBImage)
knitr::opts_chunk$set(echo=FALSE, message=FALSE, warning=FALSE, kfigr.link=TRUE, kfigr.prefix=TRUE, cache=TRUE, fig.env = TRUE)
options("citation_format" = "pandoc")
BibOptions(check.entries = FALSE, style = "markdown", bib.style = "alphabetic", cite.style = 'alphabetic')
#csv files:
ALLmetaIMGnamed<-read_csv("data/ALLmetaIMGnamed.csv", col_types = cols(type = col_factor(levels = c("Manual", "Animetrics", "Google", "Microsoft", "Skybiometry"))))
SceneAttributes<-read_csv("figures/SceneAttributes.csv")
FaceAttributes<-read_csv("figures/FaceAttributes.csv")
SolutionSpecs<-read_csv("figures/SolutionSpecifications.csv")
#plot images with overlaid boxes
overlayGgplot <- function(imgList, mergeData, matchBox=FALSE){
for(i in imgList){
#read in image
#image <- readImage(paste0("figures/", i))
#used in analyses
image <- readImage(paste0("images/", i))
#convert image to a df, add hex value
image_df <- data.frame(x=rep(1:nrow(image), ncol(image)),
y=rep(1:ncol(image),
rep(nrow(image),
ncol(image))),
r=as.vector(image[,,1]),
g=as.vector(image[,,2]),
b=as.vector(image[,,3]))
image_df$h <- rgb(image_df[,3:5])
#Create the plot of the image
p <- ggplot() +
scale_fill_identity() +
geom_tile(data=image_df, aes(x,-y, fill=h)) +
theme_void()
# Find associated Face Box information for specific image
faceData <- ALLmetaIMGnamedFaces %>% filter(file == i)
if(nrow(faceData) == 0){
return(p)
} else{
faceData <- faceData %>%
mutate(x1 = minX, x2 = minX, x3 = maxX, x4 = maxX, x5 = minX,
y1 = minY, y2 = maxY, y3 = maxY, y4 = minY, y5 = minY) %>%
gather(corner, boxPos, x1:y5) %>%
mutate(posCoord = substr(corner, 1, 1), posID = substr(corner, 2, 2)) %>%
dplyr::select(-corner) %>% spread(posCoord, boxPos) %>%
dplyr::select(file, type, minX, maxX, minY, maxY, FaceKey, FaceID, posID, x, y)
}
}
if(matchBox){
p1 <- p + geom_rect(data=faceData,
aes(xmin=minX, ymin=-maxY, xmax=maxX, ymax=-minY,
color=FaceKey, group=FaceID), fill=NA) +
guides(colour = "none")
}
else{
p1 <- p + geom_rect(data=faceData,
aes(xmin=minX, ymin=-maxY, xmax=maxX, ymax=-minY,
color=type, group=FaceID), fill=NA) +
guides(colour = guide_legend(""))  + theme(legend.position = "bottom") +
coord_fixed(ratio=0.85)
}
return(p1)
}
# Create graphs of factors in manual proportions
getManualCount <- function(type, count) {
return(count[type == "Manual"])
}
ggplotProportion <- function(dataset, factorVar){
factorVar <- deparse(substitute(factorVar))
dataset <- dataset %>% filter(matchesManual) %>% group_by_(factorVar, "type") %>% summarise(nTotal=n()) %>% group_by_(factorVar) %>% mutate(ManualCount = getManualCount(type, nTotal)) %>%
mutate(proportion = nTotal/ManualCount) %>% rename_(xvar = factorVar) %>% filter(type!="Manual")
ggplot(dataset, aes(x=xvar, y=proportion, group = reorder(type, -proportion), fill=type)) + geom_bar(stat = "identity", position = "dodge") +
ylab("Proportion of faces matched") + xlab(factorVar)
}
ALLmetaIMGPlayers<- ALLmetaIMGnamed %>% filter(detect=="Player")
# change this to facesVenn with binary information
ALLmetaIMGnamedFaces<-ALLmetaIMGnamed%>%
filter(!is.na(type)) %>%
dplyr::select(-ID, -facecounter)%>%
mutate(fileID = as.numeric(factor(file))) %>%
mutate(FaceKey=paste(fileID, boxID, sep="-")) %>%
mutate(FaceID=paste(fileID, boxID, substring(type, 1,2), sep="-"))
# Create UpSetR graph
createUpSet <- function(data) {
VennLists<-data %>%
split(.$type) %>%
map(~ .$FaceKey)%>%
fromList() %>%
upset(order.by="freq", nsets=100)
}
overlayGgplot(mylist)
ALLmetaIMGnamedFaces<-ALLmetaIMGnamed%>%
filter(!is.na(type)) %>%
dplyr::select(-ID, -facecounter)%>%
mutate(fileID = as.numeric(factor(file))) %>%
mutate(FaceKey=paste(fileID, boxID, sep="-")) %>%
mutate(FaceID=paste(fileID, boxID, substring(type, 1,2), sep="-"))
#plot images with overlaid boxes
overlayGgplot <- function(imgList, mergeData, matchBox=FALSE){
for(i in imgList){
#read in image
#image <- readImage(paste0("figures/", i))
#used in analyses
image <- readImage(paste0("images/", i))
#convert image to a df, add hex value
image_df <- data.frame(x=rep(1:nrow(image), ncol(image)),
y=rep(1:ncol(image),
rep(nrow(image),
ncol(image))),
r=as.vector(image[,,1]),
g=as.vector(image[,,2]),
b=as.vector(image[,,3]))
image_df$h <- rgb(image_df[,3:5])
#Create the plot of the image
p <- ggplot() +
scale_fill_identity() +
geom_tile(data=image_df, aes(x,-y, fill=h)) +
theme_void()
# Find associated Face Box information for specific image
faceData <- ALLmetaIMGnamedFaces %>% filter(file == i)
if(nrow(faceData) == 0){
return(p)
} else{
faceData <- faceData %>%
mutate(x1 = minX, x2 = minX, x3 = maxX, x4 = maxX, x5 = minX,
y1 = minY, y2 = maxY, y3 = maxY, y4 = minY, y5 = minY) %>%
gather(corner, boxPos, x1:y5) %>%
mutate(posCoord = substr(corner, 1, 1), posID = substr(corner, 2, 2)) %>%
dplyr::select(-corner) %>% spread(posCoord, boxPos) %>%
dplyr::select(file, type, minX, maxX, minY, maxY, FaceKey, FaceID, posID, x, y)
}
}
if(matchBox){
p1 <- p + geom_rect(data=faceData,
aes(xmin=minX, ymin=-maxY, xmax=maxX, ymax=-minY,
color=FaceKey, group=FaceID), fill=NA) +
guides(colour = "none")
}
else{
p1 <- p + geom_rect(data=faceData,
aes(xmin=minX, ymin=-maxY, xmax=maxX, ymax=-minY,
color=type, group=FaceID), fill=NA) +
guides(colour = guide_legend(""))  + theme(legend.position = "bottom") +
coord_fixed(ratio=0.85)
}
return(p1)
}
overlayGgplot(mylist)
ALLmetaIMGnamedFaces<-ALLmetaIMGnamed%>%
filter(!is.na(type)) %>%
dplyr::select(-ID, -facecounter)%>%
mutate(fileID = as.numeric(factor(file))) %>%
mutate(FaceKey=paste(fileID, boxID, sep="-")) %>%
mutate(FaceID=paste(fileID, boxID, substring(type, 1,2), sep="-"))
#plot images with overlaid boxes
overlayGgplot <- function(imgList, mergeData, matchBox=FALSE){
for(i in imgList){
#read in image
#image <- readImage(paste0("figures/", i))
#used in analyses
image <- readImage(paste0("images/", i))
#convert image to a df, add hex value
image_df <- data.frame(x=rep(1:nrow(image), ncol(image)),
y=rep(1:ncol(image),
rep(nrow(image),
ncol(image))),
r=as.vector(image[,,1]),
g=as.vector(image[,,2]),
b=as.vector(image[,,3]))
image_df$h <- rgb(image_df[,3:5])
#Create the plot of the image
p <- ggplot() +
scale_fill_identity() +
geom_tile(data=image_df, aes(x,-y, fill=h)) +
theme_void()
# Find associated Face Box information for specific image
faceData <- ALLmetaIMGnamed %>% filter(file == i)
if(nrow(faceData) == 0){
return(p)
} else{
faceData <- faceData %>%
mutate(x1 = minX, x2 = minX, x3 = maxX, x4 = maxX, x5 = minX,
y1 = minY, y2 = maxY, y3 = maxY, y4 = minY, y5 = minY) %>%
gather(corner, boxPos, x1:y5) %>%
mutate(posCoord = substr(corner, 1, 1), posID = substr(corner, 2, 2)) %>%
dplyr::select(-corner) %>% spread(posCoord, boxPos) %>%
dplyr::select(file, type, minX, maxX, minY, maxY, FaceKey, FaceID, posID, x, y)
}
}
if(matchBox){
p1 <- p + geom_rect(data=faceData,
aes(xmin=minX, ymin=-maxY, xmax=maxX, ymax=-minY,
color=FaceKey, group=FaceID), fill=NA) +
guides(colour = "none")
}
else{
p1 <- p + geom_rect(data=faceData,
aes(xmin=minX, ymin=-maxY, xmax=maxX, ymax=-minY,
color=type, group=FaceID), fill=NA) +
guides(colour = guide_legend(""))  + theme(legend.position = "bottom") +
coord_fixed(ratio=0.85)
}
return(p1)
}
overlayGgplot(mylist)
ALLmetaIMGnamedFaces<-ALLmetaIMGnamed%>%
filter(!is.na(type)) %>%
dplyr::select(-ID, -facecounter)%>%
mutate(fileID = as.numeric(factor(file))) %>%
mutate(FaceKey=paste(fileID, boxID, sep="-")) %>%
mutate(FaceID=paste(fileID, boxID, substring(type, 1,2), sep="-"))
overlayGgplot <- function(imgList, mergeData, matchBox=FALSE){
for(i in imgList){
#read in image
#image <- readImage(paste0("figures/", i))
#used in analyses
image <- readImage(paste0("images/", i))
#convert image to a df, add hex value
image_df <- data.frame(x=rep(1:nrow(image), ncol(image)),
y=rep(1:ncol(image),
rep(nrow(image),
ncol(image))),
r=as.vector(image[,,1]),
g=as.vector(image[,,2]),
b=as.vector(image[,,3]))
image_df$h <- rgb(image_df[,3:5])
#Create the plot of the image
p <- ggplot() +
scale_fill_identity() +
geom_tile(data=image_df, aes(x,-y, fill=h)) +
theme_void()
# Find associated Face Box information for specific image
faceData <- ALLmetaIMGnamedFaces %>% filter(file == i)
if(nrow(faceData) == 0){
return(p)
} else{
faceData <- faceData %>%
mutate(x1 = minX, x2 = minX, x3 = maxX, x4 = maxX, x5 = minX,
y1 = minY, y2 = maxY, y3 = maxY, y4 = minY, y5 = minY) %>%
gather(corner, boxPos, x1:y5) %>%
mutate(posCoord = substr(corner, 1, 1), posID = substr(corner, 2, 2)) %>%
dplyr::select(-corner) %>% spread(posCoord, boxPos) %>%
dplyr::select(file, type, minX, maxX, minY, maxY, FaceKey, FaceID, posID, x, y)
}
}
if(matchBox){
p1 <- p + geom_rect(data=faceData,
aes(xmin=minX, ymin=-maxY, xmax=maxX, ymax=-minY,
color=FaceKey, group=FaceID), fill=NA) +
guides(colour = "none")
}
else{
p1 <- p + geom_rect(data=faceData,
aes(xmin=minX, ymin=-maxY, xmax=maxX, ymax=-minY,
color=type, group=FaceID), fill=NA) +
guides(colour = guide_legend(""))  + theme(legend.position = "bottom") +
coord_fixed(ratio=0.85)
}
return(p1)
}
overlayGgplot(mylist)
lapply(mylist[1:5], overlayGgplot)
overlayGgplot("2016_CT6_R01_EKulichkova_RUS_vs_APetkovic_GER_WS128_clip.0009.png")
overlayGgplot("2016_CT6_R01_EKulichkova_RUS_vs_APetkovic_GER_WS128_clip.0010.png")
overlayGgplot("2016_CT6_R01_EKulichkova_RUS_vs_APetkovic_GER_WS128_clip.0009.png")
overlayGgplot("2016_CT6_R01_EKulichkova_RUS_vs_APetkovic_GER_WS128_clip.0009.png")
overlayGgplot("2016_CT6_R01_EKulichkova_RUS_vs_APetkovic_GER_WS128_clip.0010.png")
overlayGgplot("2016_CT6_R01_EKulichkova_RUS_vs_APetkovic_GER_WS128_clip.0009.png")
overlayGgplot("2016_CT6_R01_EKulichkova_RUS_vs_APetkovic_GER_WS128_clip.0010.png")
overlayGgplot("2016_CT6_R01_EKulichkova_RUS_vs_APetkovic_GER_WS128_clip.0011.png")
overlayGgplot("2016_CT6_R01_EKulichkova_RUS_vs_APetkovic_GER_WS128_clip.0012.png")
overlayGgplot("2016_CT6_R01_EKulichkova_RUS_vs_APetkovic_GER_WS128_clip.0030.png")
overlayGgplot("2016_CT6_R01_EKulichkova_RUS_vs_APetkovic_GER_WS128_clip.0031.png")
overlayGgplot("2016_CT6_R01_EKulichkova_RUS_vs_APetkovic_GER_WS128_clip.0010.png")
length(unique(ALLmetaIMGnamed$player1))
length(unique(ALLmetaIMGnamed$player2))
?gather
