guides(colour = "none")
}
else{
p1 <- p + geom_rect(data=faceData,
aes(xmin=minX, ymin=-maxY, xmax=maxX, ymax=-minY,
color=type, group=FaceID), fill=NA) +
guides(colour = guide_legend(""))  + theme(legend.position = "bottom") +
coord_fixed(ratio=0.85)
}
return(p1)
}
# Create graphs of factors in manual proportions
getManualCount <- function(type, count) {
return(count[type == "Manual"])
}
ggplotProportion <- function(dataset, factorVar){
factorVar <- deparse(substitute(factorVar))
dataset <- dataset %>% filter(matchesManual) %>% group_by_(factorVar, "type") %>% summarise(nTotal=n()) %>% group_by_(factorVar) %>% mutate(ManualCount = getManualCount(type, nTotal)) %>%
mutate(proportion = nTotal/ManualCount) %>% rename_(xvar = factorVar) %>% filter(type!="Manual")
ggplot(dataset, aes(x=xvar, y=proportion, group = reorder(type, -proportion), fill=type)) + geom_bar(stat = "identity", position = "dodge") +
ylab("Proportion of faces matched") + xlab(factorVar)
}
ALLmetaIMGPlayers<- ALLmetaIMGnamed %>% filter(detect=="Player")
# change this to facesVenn with binary information
ALLmetaIMGnamedFaces<-ALLmetaIMGnamed%>%
filter(!is.na(type)) %>%
dplyr::select(-ID, -facecounter)%>%
mutate(fileID = as.numeric(factor(file))) %>%
mutate(FaceKey=paste(fileID, boxID, sep="-")) %>%
mutate(FaceID=paste(fileID, boxID, substring(type, 1,2), sep="-"))
# Create UpSetR graph
createUpSet <- function(data) {
VennLists<-data %>%
split(.$type) %>%
map(~ .$FaceKey)%>%
fromList() %>%
upset(order.by="freq", nsets=100)
}
imagesList0<-as.list("2016_HSA_R01_BTomic_AUS_vs_DIstomin_UZB_MS157_clip.0013.png")
overlayGgplot(imagesList0, ALLmetaIMGnamedFaces, matchBox = FALSE)
knitr::kable(SceneAttributes, format = "latex", longtable=FALSE, booktabs =TRUE, caption = "This table lists the possible image descriptions that are associated with the attributes of each image. The most appropriate descrition from each list was selected. There are more options for more complex attributes, there were five expected situations the image may depict.")
knitr::kable(FaceAttributes, format = "latex", longtable=TRUE, booktabs = TRUE, caption = "This table lists the possible face descriptions that were appropriate for each individual face. The most appropriate descrition for each face was built by selecting one option from each list describing a particular attribute of the face that was selected. Most of these categories selections were made obvious in the image, Obscured and Head Angle were more difficult to choose for some faces.")
# Prepare data
library(purrr)
library(tidyverse)
library(gridExtra)
library(dplyr)
library(ggplot2)
hitmiss <- function(x){
allType <- c("Animetrics", "Google", "Microsoft", "Skybiometry")
hit <- allType %in% x$type
x[1,] %>%
dplyr::select(file:visorhat) %>%
cbind(type = allType, hit = hit)
}
GlmModelCreation <- function(model, data = ALLmetaIMGnamedFaces) {
glmFits <- data %>%
split(.$FaceKey) %>%
map_df(~ hitmiss(.)) %>%
split(.$type) %>%
map(~ glm(model, data = dplyr::select(., -type, -file), binomial(link = "logit")))
}
ConvertModel2Table <- function(model){
model %>%
summary %>%
coef %>%
as.data.frame %>%
cbind %>%
rownames_to_column %>%
cbind %>%
dplyr::rename(variable = rowname)
}
GlmModelEstimates <- function(model, data = GlmModelCreation(model)){
glmSummary <- data %>%
map(~ ConvertModel2Table(.))
glmPlot <- do.call(rbind, Map(cbind, glmSummary, type = names(glmSummary)))
return(glmPlot)
}
GlmModelEstimates <- function(model, data = GlmModelCreation(model)){
glmSummary <- data %>%
map(~ ConvertModel2Table(.))
glmPlot <- do.call(rbind, Map(cbind, glmSummary, type = names(glmSummary)))
return(glmPlot)
}
# SignificancePlot <- function(model, data = GlmModelEstimates(model)) {
#   data %>%
#   mutate(significant = `Pr(>|z|)` < 0.05) %>%
#   ggplot(aes(x=type, y=`Pr(>|z|)`)) +
#   geom_col(aes(fill=significant)) +
#   facet_wrap(~ variable) +
#   coord_flip()
# }
EstimatesPlot <- function(model, data = GlmModelEstimates(model)) {
data %>%
mutate(significant = `Pr(>|z|)` < 0.05) %>%
ggplot(aes(x=type, y=Estimate)) +
geom_col(aes(fill=significant)) +
facet_wrap(~ variable, scales="free_x", labeller=label_wrap_gen(width = 25, multi_line = TRUE)) +
coord_flip()
}
ModelPlotResults<-function(model, data = GlmModelEstimates(model)){
ep<-EstimatesPlot(model, data)
#sp<- SignificancePlot(model, data)
grid.arrange(ep)#, sp)
}
ModelPlotResults(hit ~ shotangle + bg + bg*shotangle + graphic + situation + lighting + glasses + visorhat)
library(ggmosaic)
ggplot(data=ALLmetaIMGnamedFaces) + geom_mosaic(aes(x=product(shotangle), fill=matchesManual))
#dev tools version has scale_y_productlist
library(ggmosaic)
#add hit miss column to the data frame used in plotting below
ggplot(data=ALLmetaIMGnamedFaces) +
geom_bar(aes(x= shotangle, fill = bg), position = position_stack(reverse = TRUE)) +
coord_flip()
ggplot(ALLmetaIMGnamed, aes(x = type, fill=type)) + geom_bar(position="dodge") +xlab("Facial Recognition Softwares")+scale_x_discrete(limits=c("Manual","Google","Microsoft","Skybiometry","Animetrics")) +ylab("Number of Potential Faces") + guides(fill=FALSE) + labs(caption="")
NoManual<-ALLmetaIMGnamed %>% filter(ALLmetaIMGnamed$type!="Manual")
NoManual<-NoManual %>% droplevels(NoManual$type)
Accuracy<-with(NoManual, table(NoManual$matchesManual, NoManual$type))
ct<-CrossTable(Accuracy, prop.chisq = FALSE, cell.layout = TRUE, digits=4)
print(ct)
install.packages("checkmate")
createUpSet(ALLmetaIMGnamedFaces)
imagesList3<-as.list("2016_SC2_R01_ATomljanovic_AUS_vs_KBondarenko_UKR_WS1112_clip.0053.png")
overlayGgplot(imagesList3, ALLmetaIMGnamedFaces, matchBox = FALSE)
ct
?with
Accuracy<-(table(NoManual$matchesManual, NoManual$type))
ct<-CrossTable(Accuracy, prop.chisq = FALSE, cell.layout = TRUE, digits=4)
ct
source("http://pcwww.liv.ac.uk/~william/R/crosstab.r")
str(NoManual)
Accuracy<-crosstab(NoManual, row.vars = "matchesManual", col.vars = "type", type = "j")
Accuracy
ct<-CrossTable(table(NoManual$matchesManual, NoManual$type), prop.chisq = FALSE, cell.layout = TRUE, digits=4)
ct
ct<-CrossTable(table(NoManual$matchesManual, NoManual$type), prop.chisq = FALSE, digits=4)
ct
?CrossTable
table(ALLmetaIMGnamedFaces$shotangle, ALLmetaIMGnamedFaces$matchesManual)
ggplot(data=ALLmetaIMGnamedFaces) + geom_mosaic(aes(x=product(shotangle), fill=matchesManual))
table(ALLmetaIMGnamedFaces$shotangle, ALLmetaIMGnamedFaces$matchesManual)
592/(485+592)
3695/(1239+3695)
592/(485+592)-(3695/(1239+3695))
592/(485)-(3695/(1239))
592/(485)
-(3695/(1239))
a<-ALLmetaIMGnamedFaces
levels(a$shotangle)
asym<-
levels(as.factor(a$shotangle))
levels(as.factor(a$shotangle))
dis<-(sum[a$matchesManual==TRUE & a$shotangle=="Birds Eye"])
a$shotangle<-as.factor(a$shotangle)
dis<-(sum[a$matchesManual==TRUE & a$shotangle=="Birds Eye"])
dis<-(sum[a$matchesManual=="TRUE" & a$shotangle=="Birds Eye"])
dis<-(sum[a$matchesManual=="TRUE" && a$shotangle=="Birds Eye"])
dis<-(sum(a$matchesManual=="TRUE" && a$shotangle=="Birds Eye"))
dis
dis<-(sum(a$matchesManual=="TRUE" & a$shotangle=="Birds Eye"))
dis
dis<-(sum(a$matchesManual=="TRUE" & a$shotangle=="Birds Eye")/
sum(a$shotangle=="Birds Eye") -
sum(a$matchesManual=="TRUE" & a$shotangle=="Player Shoulder Height")/
sum(a$shotangle=="Player Shoulder Height"))
dis
sum(a$matchesManual=="TRUE" & a$shotangle=="Player Shoulder Height")
sum(a$shotangle=="Player Shoulder Height")
levels(as.factor(a$shotangle))
dis<-(sum(a$matchesManual=="TRUE" & a$shotangle=="Birds Eye")/
sum(a$shotangle=="Birds Eye") -
sum(a$matchesManual=="TRUE" & a$shotangle=="Player Shoulder Height")/sum(a$shotangle=="Player Shoulder Height"))
dis
sum(a$matchesManual=="TRUE" & a$shotangle=="Birds Eye")/
sum(a$shotangle=="Birds Eye")
dis<-(sum(a$matchesManual=="TRUE" & a$shotangle=="Birds Eye")/
sum(a$shotangle=="Birds Eye")) -
sum(a$matchesManual=="TRUE" & a$shotangle=="Player Shoulder Height")/sum(a$shotangle=="Player Shoulder Height"))
dis<-(sum(a$matchesManual=="TRUE" & a$shotangle=="Birds Eye")/
sum(a$shotangle=="Birds Eye")) -
(sum(a$matchesManual=="TRUE" & a$shotangle=="Player Shoulder Height")/sum(a$shotangle=="Player Shoulder Height"))
dis
(sum(a$matchesManual=="TRUE" & a$shotangle=="Player Shoulder Height")/sum(a$shotangle=="Player Shoulder Height"))
dis<-(sum(a$matchesManual=="TRUE" & a$shotangle=="Birds Eye")/
(sum(a$shotangle=="Birds Eye"))) -
(sum(a$matchesManual=="TRUE" & a$shotangle=="Player Shoulder Height")/(sum(a$shotangle=="Player Shoulder Height")))
dis<-(sum(a$matchesManual=="TRUE" & a$shotangle=="Birds Eye")/
(sum(a$shotangle=="Birds Eye"))) -
(sum(a$matchesManual=="TRUE" & a$shotangle=="Player Shoulder Height")/(sum(a$shotangle=="Player Shoulder Height")))
dis
dis<-(sum(a$matchesManual=="TRUE" & a$shotangle=="Birds Eye")/
(sum(a$shotangle=="Birds Eye")))
dis
dis<-(sum(a$matchesManual=="TRUE" & a$shotangle=="Birds Eye")/
sum(a$shotangle=="Birds Eye"))
-
(sum(a$matchesManual=="TRUE" & a$shotangle=="Player Shoulder Height")/(sum(a$shotangle=="Player Shoulder Height")))
dis
sum(a$shotangle=="Birds Eye")
sum(a$shotangle=="Birds Eye")
sum[a$matchesManual=="TRUE" & a$shotangle=="Birds Eye"]
dis<-(sum(a[a$matchesManual=="TRUE" & a$shotangle=="Birds Eye"])/
sum(a$shotangle=="Birds Eye"))
dis<-(sum(a[a$matchesManual=="TRUE" & a$shotangle=="Birds Eye"])
/
sum(a$shotangle=="Birds Eye"))
dis<-(sum(a[a$matchesManual=="TRUE" & a$shotangle=="Birds Eye"]))
nrow(a[a$matchesManual=="TRUE" & a$shotangle=="Birds Eye"])
dis<-(nrow([a$matchesManual=="TRUE" & a$shotangle=="Birds Eye"]))
dis<-(nrow(a$matchesManual=="TRUE" & a$shotangle=="Birds Eye"))
dis
dis<-(nrow(a[a$matchesManual=="TRUE" & a$shotangle=="Birds Eye",]))
dis
/nrow(a[a$shotangle=="Birds Eye",])
dis<-(nrow(a[a$matchesManual=="TRUE" & a$shotangle=="Birds Eye",])
/nrow(a[a$shotangle=="Birds Eye",]))
dis
dis<-(nrow(a[a$matchesManual=="TRUE" & a$shotangle=="Birds Eye",])
/nrow(a[a$shotangle=="Birds Eye",])))
dis<-(nrow(a[a$matchesManual=="TRUE" & a$shotangle=="Birds Eye",])
/nrow(a[a$shotangle=="Birds Eye",]))
dis
/nrow(a[a$shotangle=="Birds Eye",]) -
dis<-((nrow(a[a$matchesManual=="TRUE" & a$shotangle=="Birds Eye",])
/nrow(a[a$shotangle=="Birds Eye",])) -
(nrow(a[a$matchesManual=="TRUE" & a$shotangle=="Player Shoulder Height"])/(nrow(a[a$shotangle=="Player Shoulder Height"]))))
dis<-((nrow(a[a$matchesManual=="TRUE" & a$shotangle=="Birds Eye",])
/nrow(a[a$shotangle=="Birds Eye",])) -
(nrow(a[a$matchesManual=="TRUE" & a$shotangle=="Player Shoulder Height"])/
(nrow(a[a$shotangle=="Player Shoulder Height"]))))
dis<-((nrow(a[a$matchesManual=="TRUE" & a$shotangle=="Birds Eye",])
/nrow(a[a$shotangle=="Birds Eye",])) -
(nrow(a[a$matchesManual=="TRUE" & a$shotangle=="Player Shoulder Height"])/
(nrow(a[a$shotangle=="Player Shoulder Height"]))))
dis<-((nrow(a[a$matchesManual=="TRUE" & a$shotangle=="Birds Eye",])
/nrow(a[a$shotangle=="Birds Eye",]))
-
(nrow(a[a$matchesManual=="TRUE" & a$shotangle=="Player Shoulder Height"])/
(nrow(a[a$shotangle=="Player Shoulder Height"]))))
(nrow(a[a$matchesManual=="TRUE" & a$shotangle=="Player Shoulder Height"])/
(nrow(a[a$shotangle=="Player Shoulder Height"])))
nrow(a[a$shotangle=="Player Shoulder Height"])
dis<-((nrow(a[a$matchesManual=="TRUE" & a$shotangle=="Birds Eye",])
/nrow(a[a$shotangle=="Birds Eye",])) -
(nrow(a[a$matchesManual=="TRUE" & a$shotangle=="Player Shoulder Height",])/
(nrow(a[a$shotangle=="Player Shoulder Height",]))))
dis
ggplot(data=ALLmetaIMGnamedFaces) + geom_mosaic(aes(x=product(shotangle), fill=matchesManual))
asym <- ((nrow(a[a$matchesManual=="TRUE" & a$shotangle=="Birds Eye",])/
nrow(a[a$matchesManual=="FALSE" & a$shotangle=="Birds Eye",])) -
(nrow(a[a$matchesManual=="TRUE" & a$shotangle=="Player Shoulder Height",])/
nrow(a[a$matchesManual=="FALSE" & a$shotangle=="Player Shoulder Height",])))
asym
or <- 1 + (dis)^2 -dis*(4+((1+d)^2)((asym)^2))^(1/2)
or <- 1 + (dis)^2 -dis*(4+((1+dis)^2)((asym)^2))^(1/2)
or <- 1 + (dis)^2 - dis*((4+((1+dis)^2)((asym)^2))^(1/2))
(1+dis)^2)
(1+dis)^2
((1+dis)^2)
or <- 1 + (dis)^2 - dis*((4+((1+dis)^2)*((asym)^2))^(1/2))
or
log(or)
ggplot(data=ALLmetaIMGnamedFaces) +
geom_mosaic(aes(x=product(shotangle), fill=matchesManual)) +
geom_text(stat="identity")
ggplot(data=ALLmetaIMGnamedFaces) +
geom_mosaic(aes(x=product(shotangle), fill=matchesManual)) +
geom_text(aes(label=(shotangle)))
ggplot(data=ALLmetaIMGnamedFaces, aes(x=product(shotangle))) +
geom_mosaic(aes(fill=matchesManual)) +
geom_text(aes(label=(shotangle)))
ggplot(data=ALLmetaIMGnamedFaces) +
geom_mosaic(aes(x=product(shotangle), fill=matchesManual)) +
geom_text(aes(label=(shotangle)))
geom_mosaic
ggmosaic::StatMosaic
ggmosaic::StatMosaic$compute_panel()
ggmosaic::StatMosaic$compute_panel
log(or)
dis
asym
(nrow(a[a$matchesManual=="TRUE" & a$shotangle=="Birds Eye",])
/nrow(a[a$shotangle=="Birds Eye",]))
ggplot(data=ALLmetaIMGnamedFaces) +
geom_mosaic(aes(x=product(shotangle), fill=matchesManual)) +
geom_text(aes(label="test", x=0, y=0.6))
ggplot(data=ALLmetaIMGnamedFaces) +
geom_mosaic(aes(x=product(shotangle), fill=matchesManual)) +
geom_text(aes(label="test", x=100, y=0.6))
ggplot(data=ALLmetaIMGnamedFaces) +
geom_mosaic(aes(x=product(shotangle), fill=matchesManual)) +
geom_text(aes(label="test", x=1, y=0.6))
?guide_legend
ggplot(data=ALLmetaIMGnamedFaces) +
geom_mosaic(aes(x=product(shotangle), fill=matchesManual)) +
geom_text(aes(label="test", x=1, y=0.6)) +
guide_legend(title="API Faces Match Manual /nAnnotations")
ggplot(data=ALLmetaIMGnamedFaces) +
geom_mosaic(aes(x=product(shotangle), fill=matchesManual)) +
geom_text(aes(label="test", x=1, y=0.6)) +
guide_legend(title="API Faces Match Manual \nAnnotations")
ggplot(data=ALLmetaIMGnamedFaces) +
geom_mosaic(aes(x=product(shotangle), fill=matchesManual)) +
geom_text(aes(label="test", x=1, y=0.6)) +
guide_legend(title="API Faces Match Manual Annotations")
ggplot(data=ALLmetaIMGnamedFaces) +
geom_mosaic(aes(x=product(shotangle), fill=matchesManual)) +
geom_text(aes(label="test", x=1, y=0.6)) +
guide_legend(title=" ")
ggplot(data=ALLmetaIMGnamedFaces) +
geom_mosaic(aes(x=product(shotangle), fill=matchesManual)) +
geom_text(aes(label="test", x=1, y=0.6)) +
guides(guide_legend(title=" "))
ggplot(data=ALLmetaIMGnamedFaces) +
geom_mosaic(aes(x=product(shotangle), fill=matchesManual)) +
geom_text(aes(label="test", x=1, y=0.6)) +
guides(fill = guide_legend(title="Match MAnual"))
ggplot(data=ALLmetaIMGnamedFaces) +
geom_mosaic(aes(x=product(shotangle), fill=matchesManual)) +
geom_text(aes(label="test", x=1, y=0.6)) +
guides(fill = guide_legend(title="API Faces Match /nManual Annotations"))
ggplot(data=ALLmetaIMGnamedFaces) +
geom_mosaic(aes(x=product(shotangle), fill=matchesManual)) +
geom_text(aes(label="test", x=1, y=0.6)) +
guides(fill = guide_legend(title="API Faces Match \nManual Annotations"))
ggplot(data=ALLmetaIMGnamedFaces) +
geom_mosaic(aes(x=product(shotangle), fill=matchesManual)) +
#geom_text(aes(label="test", x=1, y=0.6)) +
guides(fill = guide_legend(title="API Faces Match \nManual Annotations"))
ggplot(data=ALLmetaIMGnamedFaces) +
geom_mosaic(aes(x=product(shotangle), fill=matchesManual)) +
#geom_text(aes(label="test", x=1, y=0.6)) +
guides(fill = guide_legend(title="API Faces Match \nManual Faces"))
logor<-log(or)
logor
1/logor
ggplot(data=ALLmetaIMGnamedFaces) +
geom_mosaic(aes(x=product(shotangle), fill=matchesManual)) +
#geom_text(aes(label="test", x=1, y=0.6)) +
guides(fill = guide_legend(title="API Faces Match \nManual Faces"))
logor
1/or
or
or1 <- ((nrow(a[a$matchesManual=="TRUE" & a$shotangle=="Birds Eye",])*
nrow(a[a$matchesManual=="FALSE" & a$shotangle=="Player Shoulder Height",])/
(nrow(a[a$matchesManual=="FALSE" & a$shotangle=="Birds Eye",]))*
(nrow(a[a$matchesManual=="TRUE" & a$shotangle=="Player Shoulder Height",]))))
or1
nrow(a[a$matchesManual=="TRUE" & a$shotangle=="Birds Eye",])*
nrow(a[a$matchesManual=="FALSE" & a$shotangle=="Player Shoulder Height",])
(nrow(a[a$matchesManual=="FALSE" & a$shotangle=="Birds Eye",]))*
(nrow(a[a$matchesManual=="TRUE" & a$shotangle=="Player Shoulder Height",])
(nrow(a[a$matchesManual=="FALSE" & a$shotangle=="Birds Eye",]))*
(nrow(a[a$matchesManual=="TRUE" & a$shotangle=="Player Shoulder Height",]))
(nrow(a[a$matchesManual=="FALSE" & a$shotangle=="Birds Eye",]))*
nrow(a[a$matchesManual=="TRUE" & a$shotangle=="Player Shoulder Height",]))
(nrow(a[a$matchesManual=="FALSE" & a$shotangle=="Birds Eye",])*
(nrow(a[a$matchesManual=="TRUE" & a$shotangle=="Player Shoulder Height",]))
(nrow(a[a$matchesManual=="FALSE" & a$shotangle=="Birds Eye",])*
(nrow(a[a$matchesManual=="TRUE" & a$shotangle=="Player Shoulder Height",]))
(nrow(a[a$matchesManual=="FALSE" & a$shotangle=="Birds Eye",])*
nrow(a[a$matchesManual=="TRUE" & a$shotangle=="Player Shoulder Height",])
(nrow(a[a$matchesManual=="FALSE" & a$shotangle=="Birds Eye",])*
nrow(a[a$matchesManual=="TRUE" & a$shotangle=="Player Shoulder Height",])
)
(nrow(a[a$matchesManual=="TRUE" & a$shotangle=="Birds Eye",])*nrow(a[a$matchesManual=="FALSE" & a$shotangle=="Player Shoulder Height",])
(nrow(a[a$matchesManual=="TRUE" & a$shotangle=="Birds Eye",])*nrow(a[a$matchesManual=="FALSE" & a$shotangle=="Player Shoulder Height",])
nrow(a[a$matchesManual=="TRUE" & a$shotangle=="Birds Eye",])*nrow(a[a$matchesManual=="FALSE" & a$shotangle=="Player Shoulder Height",])
nrow(a[a$matchesManual=="TRUE" & a$shotangle=="Birds Eye",])*(nrow(a[a$matchesManual=="FALSE" & a$shotangle=="Player Shoulder Height",]))
(nrow(a[a$matchesManual=="FALSE" & a$shotangle=="Birds Eye",])*(nrow(a[a$matchesManual=="TRUE" & a$shotangle=="Player Shoulder Height",]))
nrow(a[a$matchesManual=="FALSE" & a$shotangle=="Birds Eye",])*(nrow(a[a$matchesManual=="TRUE" & a$shotangle=="Player Shoulder Height",]))
nrow(a[a$matchesManual=="FALSE" & a$shotangle=="Birds Eye",])*(nrow(a[a$matchesManual=="TRUE" & a$shotangle=="Player Shoulder Height",]))
or1 <- ((nrow(a[a$matchesManual=="TRUE" & a$shotangle=="Birds Eye",])*(nrow(a[a$matchesManual=="FALSE" & a$shotangle=="Player Shoulder Height",]))/
(nrow(a[a$matchesManual=="FALSE" & a$shotangle=="Birds Eye",])*(nrow(a[a$matchesManual=="TRUE" & a$shotangle=="Player Shoulder Height",])))))
or1
(592*1239)/(485*3695)
or <- 1 + (dis)^2 - dis*((4+((1+dis)^2)*((asym)^2))^(1/2))
or
1/or
or <- 1 + (dis)^2 - dis*((4+((1+dis)^2)*(((asym)^2))^(1/2)))
or
1/or
dis
dis
levels(a$shotangle)
levels(a$matchesManual)
levels(a$shotangle)
levels(as.factor(a$matchesManual))
p11 <- nrow(a[a$matchesManual=="TRUE" & a$shotangle=="Birds Eye",])
p21 <- nrow(a[a$matchesManual=="FALSE" & a$shotangle=="Birds Eye",])
p12 <- nrow(a[a$matchesManual=="TRUE" & a$shotangle=="Player Shoulder Height",])
p22 <- nrow(a[a$matchesManual=="FALSE" & a$shotangle=="Player Shoulder Height",])
p11 <- nrow(a[a$matchesManual=="TRUE" & a$shotangle=="Birds Eye",])
p21 <- nrow(a[a$matchesManual=="FALSE" & a$shotangle=="Birds Eye",])
p12 <- nrow(a[a$matchesManual=="TRUE" & a$shotangle=="Player Shoulder Height",])
p22 <- nrow(a[a$matchesManual=="FALSE" & a$shotangle=="Player Shoulder Height",])
p11
p21
p12
p22
dis <- p21/(p11+p21) - p22/(p12+p22)
dis
dis1 <- (p11*p22-p21*p12)/((p11+p21)*(p12+p22))
dis1
dis
dis1
or1 <- ((nrow(a[a$matchesManual=="TRUE" & a$shotangle=="Birds Eye",])*(nrow(a[a$matchesManual=="FALSE" & a$shotangle=="Player Shoulder Height",]))/(nrow(a[a$matchesManual=="FALSE" & a$shotangle=="Birds Eye",])*(nrow(a[a$matchesManual=="TRUE" & a$shotangle=="Player Shoulder Height",])))))
or1
or2 <- (p11*p22)/(p12*p21)
or1
or2
asym <- ((p11/p21)-(p12/p22))
asym
dis1
dis2 <- (1 - or)/(1 + or + ((p11/p21)+(p12/p22)))
dis2
(p11/p21)+(p12/p22))
((p11/p21)+(p12/p22))
or2
ggplot(data=ALLmetaIMGnamedFaces) +
geom_bar(aes(x= shotangle, fill = bg), position = position_stack(reverse = TRUE)) +
coord_flip()
levels(ALLmetaIMGnamed$matchesManual)
levels(as.factor(ALLmetaIMGnamed$matchesManual))
table(as.factor(ALLmetaIMGnamed$matchesManual))
ggplot(ALLmetaIMGnamed, aes(x = type, fill=type)) + geom_bar(position="dodge") +xlab("Facial Recognition Softwares")+scale_x_discrete(limits=c("Manual","Google","Microsoft","Skybiometry","Animetrics")) +ylab("Number of potential Faces") + guides(fill=FALSE) + labs(caption="")
Accuracy
?crosstab
ct<-CrossTable(table(NoManual$matchesManual, NoManual$type), prop.chisq = FALSE, digits=4)
ct
ct<-CrossTable(table(NoManual$matchesManual, NoManual$type),
prop.chisq = FALSE,
digits=4,
expected = FALSE,
prop.r = TRUE, prop.c = TRUE, prop.t = TRUE,
prop.chisq = TRUE, chisq = FALSE, fisher = FALSE,
mcnemar = FALSE, resid = FALSE, sresid = FALSE,
asresid = FALSE, missing.include = FALSE,
drop.levels = TRUE, format = c("SAS","SPSS"),
dnn = NULL, cell.layout = TRUE,
row.labels = !cell.layout,
percent = (format == "SPSS" && !row.labels),
total.r, total.c)
ct<-CrossTable(table(NoManual$matchesManual, NoManual$type),
prop.chisq = FALSE,
digits=4,
expected = FALSE,
prop.r = TRUE, prop.c = TRUE, prop.t = TRUE,
chisq = FALSE, fisher = FALSE,
mcnemar = FALSE, resid = FALSE, sresid = FALSE,
asresid = FALSE, missing.include = FALSE,
drop.levels = TRUE, format = c("SAS","SPSS"),
dnn = NULL, cell.layout = TRUE,
row.labels = !cell.layout,
percent = (format == "SPSS" && !row.labels),
total.r, total.c)
ct<-CrossTable(table(NoManual$matchesManual, NoManual$type),
prop.chisq = FALSE,
digits=4,
expected = FALSE,
prop.r = TRUE, prop.c = TRUE, prop.t = TRUE,
chisq = FALSE, fisher = FALSE,
mcnemar = FALSE, resid = FALSE, sresid = FALSE,
asresid = FALSE, missing.include = FALSE,
drop.levels = TRUE, format = c("SAS","SPSS"),
dnn = NULL, cell.layout = TRUE,
row.labels = !cell.layout,
percent = (format == "SPSS" && !row.labels))
ct<-CrossTable(table(NoManual$matchesManual, NoManual$type),
prop.chisq = FALSE,
digits=4,
expected = FALSE,
prop.r = TRUE, prop.c = TRUE, prop.t = TRUE,
drop.levels = TRUE, format = ("SPSS"),
dnn = NULL)
ct
ct<-CrossTable(table(NoManual$matchesManual, NoManual$type),
prop.chisq = FALSE,
digits=4,
expected = FALSE,
prop.r = TRUE, prop.c = TRUE, prop.t = TRUE,
drop.levels = TRUE, format = ("SPSS"), cell.layout = FALSE
dnn = NULL)
ct<-CrossTable(table(NoManual$matchesManual, NoManual$type),
prop.chisq = FALSE,
digits=4,
expected = FALSE,
prop.r = TRUE, prop.c = TRUE, prop.t = TRUE,
drop.levels = TRUE, format = ("SPSS"), cell.layout = FALSE,
dnn = NULL)
ct
ImageCharacteristics <- ALLmetaIMGnamed %>% filter(type=="Manual") %>% group_by(situation, bg, shotangle, detect) %>% dplyr::summarise(count=n())
ImageCharacteristics<-arrange(ImageCharacteristics, desc(count))
ImageCharacteristics<-ImageCharacteristics[1:10,]
ImageCharacteristics
knitr::kable(ct, booktabs = TRUE, longtable=TRUE, caption="", format = "latex")
knitr::kable(as.matrix(ct), booktabs = TRUE, longtable=TRUE, caption="", format = "latex")
ct<-CrossTable(table(NoManual$matchesManual, NoManual$type),
prop.chisq = FALSE,
digits=4,
expected = FALSE,
prop.r = TRUE, prop.c = TRUE, prop.t = TRUE,
drop.levels = TRUE, format = ("SPSS"), cell.layout = FALSE,
dnn = NULL)
as.matrix(ct)
print(ct)
library(tables)
library(tables)
library(Hmisc)
tabular(  (Matches=matchesManual) ~  (API=type)*(Percent("row")+ 1)    ,data=dataframe        )
tabular(  (Matches=matchesManual) ~  (API=type)*(Percent("row")+ 1)    ,data=ALLmetaIMGnamed        )
latex(ct)
