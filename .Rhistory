<<<<<<< Updated upstream
SBP1$Emotion <- as.factor(SBP1$Emotion)
MEP1 <- MEP %>%
filter(!is.na(anger)) %>%
group_by(FileName) %>%
gather(key = Emotion, value=EmotionValue,
anger,contempt,disgust,fear,happiness,neutral,sadness,surprise)  %>%
arrange(FileName, desc(EmotionValue)) %>%
group_by_(~ FileName) %>%
slice(1)
MEP1$Emotion <- as.factor(MEP1$Emotion)
S4 <- select(SBP, FileName = aname, Skybiometry = neutral)
S5 <- select(MEP, FileName, Microsoft = neutral)
S6 <- select(GEP, FileName, Google = neutral)
J3 <- full_join(S4, S5, by = "FileName")
J4 <- full_join(J3, S6, by = "FileName")
ModelTable <- function(model){
model %>%
summary %>%
coef %>%
as.data.frame %>%
cbind %>%
rownames_to_column %>%
cbind %>%
dplyr::rename(variable = rowname)
}
SignificancePlot <- function(model, data = GlmModelEstimates(model)) {
data %>%
mutate(significant = `Pr(>|z|)` < 0.05) %>%
mutate(`Pr(<|z|)` = 1 - `Pr(>|z|)`) %>%
ggplot(aes(x=variable, y=`Pr(<|z|)`)) +
theme(axis.text.x = element_text(angle = 30, hjust = 1)) +
geom_col(aes(fill=significant))
}
EstimatesPlot <- function(model, data = GlmModelEstimates(model)) {
data %>%
mutate(significant = `Pr(>|z|)` < 0.05) %>%
ggplot(aes(x=variable, y=Estimate)) +
theme(axis.text.x = element_text(angle = 30, hjust = 1),
axis.text.y = element_text(angle = 30, hjust = 1)) +
geom_col(aes(fill=significant))
}
ModelPlotResults<-function(model, data = ModelTable(model)){
ep<-EstimatesPlot(model, data)
sp<- SignificancePlot(model, data)
grid.arrange(ep, sp, nrow=1)
}
img <- image_read("Figures/2016_CT6_R01_JMillman_AUS_vs_DSchwartzman_ARG_MS159_clip.0013.png")
p <- ggplot() + theme_void() + annotation_custom(rasterGrob(img)) +
=======
plot(load.image(paste0("Faces/", list[i])),
main = paste0(i, list[i]))
}
}
DisplayFaces(AKlist)
AKimgsG<-GEP %>% filter(player2=="AFriedsam")
AKimgsG<-AKimgsG %>% filter(detect=="Player")
AKlist <- as.list(AKimgsG$FileName)
DisplayFaces(AKlist)
AKimgsG<-GEP %>% filter(player2=="ACornet")
AKimgsG<-AKimgsG %>% filter(detect=="Player")
AKlist <- as.list(AKimgsG$FileName)
DisplayFaces(AKlist)
AKimgsG<-GEP %>% filter(player1=="ACornet")
AKimgsG<-AKimgsG %>% filter(detect=="Player")
AKlist <- as.list(AKimgsG$FileName)
DisplayFaces(AKlist)
i1 <- plotFaces("face-1326-1-Go.png")
t1 <- TableEmotions("face-1326-1-Go.png")
i2 <- plotFaces("face-1635-1-Go.png")
t2 <- TableEmotions("face-1635-1-Go.png")
grid.arrange(i1, i2, t1, t2, nrow=2)
t2 <- TableEmotions("face-1633-1-Go.png")
i2 <- plotFaces("face-1633-1-Go.png")
t2 <- TableEmotions("face-1633-1-Go.png")
grid.arrange(i1, i2, t1, t2, nrow=2)
i2 <- plotFaces("face-1636-1-Go.png")
t2 <- TableEmotions("face-1636-1-Go.png")
grid.arrange(i1, i2, t1, t2, nrow=2)
AKimgsG<-GEP %>% filter(player1=="NDjokovic")
AKimgsG<-AKimgsG %>% filter(detect=="Player")
AKlist <- as.list(AKimgsG$FileName)
length(AKlist)
AKlist[6]
DisplayFaces(AKlist)
i1 <- plotFaces("face-1324-1-Go.png")
t1 <- TableEmotions("face-1324-1-Go.png")
i2 <- plotFaces("face-1636-1-Go.png")
t2 <- TableEmotions("face-1636-1-Go.png")
grid.arrange(i1, i2, t1, t2, nrow=2)
i1 <- plotFaces("face-1319-1-Go.png")
i1 <- plotFaces("face-1319-1-Go.png")
t1 <- TableEmotions("face-1319-1-Go.png")
grid.arrange(i1, i2, t1, t2, nrow=2)
#shows only the rank 1 emotion and value for each face
GEP1 <- GEP %>%
filter(!is.na(anger)) %>%
group_by(FileName) %>%
gather(key = Emotion, value=EmotionValue,
anger, happiness, sadness, surprise, neutral)  %>%
arrange(FileName, desc(EmotionValue)) %>%
group_by_(~ FileName) %>%
slice(1)
View(GEP1)
AKimgsG<-GEP1 %>% filter(Emotion=="anger")
AKlist <- as.list(AKimgsG$FileName)
length(AKlist)
DisplayFaces(AKlist)
i1 <- plotFaces("face-1319-1-Go.png")
t1 <- TableEmotions("face-1319-1-Go.png")
i2 <- plotFaces("face-1636-1-Go.png")
t2 <- TableEmotions("face-1636-1-Go.png")
i1 <- plotFaces("face-816-1-Go.png")
t1 <- TableEmotions("face-816-1-Go.png")
grid.arrange(i1, i2, t1, t2, nrow=2)
i1 <- plotFaces("face-1319-1-Go.png")
t1 <- TableEmotions("face-1319-1-Go.png")
i2 <- plotFaces("face-1636-1-Go.png")
t2 <- TableEmotions("face-1636-1-Go.png")
i3 <- plotFaces("face-816-1-Go.png")
t3 <- TableEmotions("face-816-1-Go.png")
grid.arrange(i1, i2, i3, t1, t2, t3, nrow=2)
grid.arrange(i1, i2, i3, t1, t2, t3, nrow=2)
grid.arrange(i1, i2, i3, t1, t2, t3, nrow=1)
grid.arrange(i1, i2, i3, t1, t2, t3, nrow=2)
View(GE)
View(GF)
overlayGgplot <- function(imgList, mergeData, matchBox=FALSE){
for(i in imgList){
img <- image_read(paste0("images/", i))
p <- ggplot(data.frame(x=c(0,800), y=c(0,450)), aes(x,y)) +
theme_void()+ coord_fixed()+
annotation_custom(rasterGrob(img)) +
>>>>>>> Stashed changes
coord_cartesian(xlim=c(0, 800), ylim=c(0,450))
faceData <- ALLmetaIMGnamedFaces %>% filter(file == i)
if(nrow(faceData) == 0){
print(p)
next
} else{
faceData <- faceData %>%
mutate(x1 = minX, x2 = minX, x3 = maxX, x4 = maxX, x5 = minX,
y1 = minY, y2 = maxY, y3 = maxY, y4 = minY, y5 = minY) %>%
gather(corner, boxPos, x1:y5) %>%
mutate(posCoord = substr(corner, 1, 1), posID = substr(corner, 2, 2)) %>%
dplyr::select(-corner) %>% spread(posCoord, boxPos)
}
if(matchBox){
p <- p + geom_path(aes(x=x, y=450-y, group = c(type, boxID), colour=boxID), faceData) + guides(colour="none")
}
else{
p <- p + geom_path(aes(x=x, y=450-y, group = c(FaceID), colour=type), faceData) + scale_color_manual(values = c(Skybiometry="#ffe093", Microsoft="#5cc3f6", Google="#5cba82", Animetrics="#FF959c", Manual="#db70ff"))
}
print(p)
}
}
str(GEP1)
overlayGgplot("2016_CT6_R02_FLopez_ESP_vs_GPella_ARG_MS227_clip.0016.png")
library(readr)
ALLmetaIMGnamed <- read_csv("C:/Users/steff/Github/face-recognition/data/ALLmetaIMGnamed.csv")
View(ALLmetaIMGnamed)
overlayGgplot <- function(imgList, mergeData, matchBox=FALSE){
for(i in imgList){
img <- image_read(paste0("images/", i))
p <- ggplot(data.frame(x=c(0,800), y=c(0,450)), aes(x,y)) +
theme_void()+ coord_fixed()+
annotation_custom(rasterGrob(img)) +
coord_cartesian(xlim=c(0, 800), ylim=c(0,450))
faceData <- ALLmetaIMGnamed %>% filter(file == i)
if(nrow(faceData) == 0){
print(p)
next
} else{
faceData <- faceData %>%
mutate(x1 = minX, x2 = minX, x3 = maxX, x4 = maxX, x5 = minX,
y1 = minY, y2 = maxY, y3 = maxY, y4 = minY, y5 = minY) %>%
gather(corner, boxPos, x1:y5) %>%
mutate(posCoord = substr(corner, 1, 1), posID = substr(corner, 2, 2)) %>%
dplyr::select(-corner) %>% spread(posCoord, boxPos)
}
if(matchBox){
p <- p + geom_path(aes(x=x, y=450-y, group = c(type, boxID), colour=boxID), faceData) + guides(colour="none")
}
else{
p <- p + geom_path(aes(x=x, y=450-y, group = c(FaceID), colour=type), faceData) + scale_color_manual(values = c(Skybiometry="#ffe093", Microsoft="#5cc3f6", Google="#5cba82", Animetrics="#FF959c", Manual="#db70ff"))
}
print(p)
}
}
overlayGgplot("2016_CT6_R02_FLopez_ESP_vs_GPella_ARG_MS227_clip.0016.png")
ALLmetaIMGnamedFaces<-ALLmetaIMGnamed%>%
#filter(matchesManual) %>%
dplyr::select(-ID, -facecounter)%>%
mutate(fileID = as.numeric(factor(file))) %>%
mutate(FaceKey=paste(fileID, boxID, sep="-")) %>%
mutate(FaceID=paste(fileID, boxID, substring(type, 1,2), sep="-"))
overlayGgplot <- function(imgList, mergeData, matchBox=FALSE){
for(i in imgList){
img <- image_read(paste0("images/", i))
p <- ggplot(data.frame(x=c(0,800), y=c(0,450)), aes(x,y)) +
theme_void()+ coord_fixed()+
annotation_custom(rasterGrob(img)) +
coord_cartesian(xlim=c(0, 800), ylim=c(0,450))
faceData <- ALLmetaIMGnamedFaces %>% filter(file == i)
if(nrow(faceData) == 0){
print(p)
next
} else{
faceData <- faceData %>%
mutate(x1 = minX, x2 = minX, x3 = maxX, x4 = maxX, x5 = minX,
y1 = minY, y2 = maxY, y3 = maxY, y4 = minY, y5 = minY) %>%
gather(corner, boxPos, x1:y5) %>%
mutate(posCoord = substr(corner, 1, 1), posID = substr(corner, 2, 2)) %>%
dplyr::select(-corner) %>% spread(posCoord, boxPos)
}
if(matchBox){
p <- p + geom_path(aes(x=x, y=450-y, group = c(type, boxID), colour=boxID), faceData) + guides(colour="none")
}
else{
p <- p + geom_path(aes(x=x, y=450-y, group = c(FaceID), colour=type), faceData) + scale_color_manual(values = c(Skybiometry="#ffe093", Microsoft="#5cc3f6", Google="#5cba82", Animetrics="#FF959c", Manual="#db70ff"))
}
print(p)
}
}
overlayGgplot("2016_CT6_R02_FLopez_ESP_vs_GPella_ARG_MS227_clip.0016.png")
overlayGgplot("2016_HSA_R03_DThiem_AUT_vs_DGoffin_BEL_MS306_clip.0008.png")
overlayGgplot <- function(imgList, mergeData, matchBox=FALSE){
for(i in imgList){
img <- image_read(paste0("images/", i))
p <- ggplot(data.frame(x=c(0,800), y=c(0,450)), aes(x,y)) +
theme_void()+ coord_fixed()+
annotation_custom(rasterGrob(img)) +
coord_cartesian(xlim=c(0, 800), ylim=c(0,450))
faceData <- ALLmetaIMGnamedFaces %>% filter(file == i) %>% filter(type != "Manual")
if(nrow(faceData) == 0){
print(p)
next
} else{
faceData <- faceData %>%
mutate(x1 = minX, x2 = minX, x3 = maxX, x4 = maxX, x5 = minX,
y1 = minY, y2 = maxY, y3 = maxY, y4 = minY, y5 = minY) %>%
gather(corner, boxPos, x1:y5) %>%
mutate(posCoord = substr(corner, 1, 1), posID = substr(corner, 2, 2)) %>%
dplyr::select(-corner) %>% spread(posCoord, boxPos)
}
if(matchBox){
p <- p + geom_path(aes(x=x, y=450-y, group = c(type, boxID), colour=boxID), faceData) + guides(colour="none")
}
else{
p <- p + geom_path(aes(x=x, y=450-y, group = c(FaceID), colour=type), faceData) + scale_color_manual(values = c(Skybiometry="#ffe093", Microsoft="#5cc3f6", Google="#5cba82", Animetrics="#FF959c", Manual="#db70ff"))
}
print(p)
}
}
overlayGgplot("2016_HSA_R03_DThiem_AUT_vs_DGoffin_BEL_MS306_clip.0008.png")
overlayGgplot <- function(imgList, mergeData, matchBox=FALSE){
for(i in imgList){
img <- image_read(paste0("images/", i))
p <- ggplot(data.frame(x=c(0,800), y=c(0,450)), aes(x,y)) +
theme_void()+ coord_fixed()+
annotation_custom(rasterGrob(img)) +
coord_cartesian(xlim=c(0, 800), ylim=c(0,450))
faceData <- ALLmetaIMGnamedFaces %>% filter(file == i) %>% filter(type != "Manual")
if(nrow(faceData) == 0){
print(p)
next
} else{
faceData <- faceData %>%
mutate(x1 = minX, x2 = minX, x3 = maxX, x4 = maxX, x5 = minX,
y1 = minY, y2 = maxY, y3 = maxY, y4 = minY, y5 = minY) %>%
gather(corner, boxPos, x1:y5) %>%
mutate(posCoord = substr(corner, 1, 1), posID = substr(corner, 2, 2)) %>%
dplyr::select(-corner) %>% spread(posCoord, boxPos)
}
if(matchBox){
p <- p + geom_path(aes(x=x, y=450-y, group = c(type, boxID), colour=boxID), faceData) + guides(colour="none")
}
else{
p <- p + geom_path(aes(x=x, y=450-y, group = c(FaceID), colour=type), faceData) + scale_color_manual(values = c(Skybiometry="#ffe093", Microsoft="#5cc3f6", Google="#5cba82", Animetrics="#FF959c", Manual="#db70ff"))
}
print(p)
}
}
overlayGgplot("2016_HSA_R03_DThiem_AUT_vs_DGoffin_BEL_MS306_clip.0008.png")
overlayGgplot("2016_HSA_R03_DThiem_AUT_vs_DGoffin_BEL_MS306_clip.0008.png")
overlayGgplot("2016_HSA_R03_DThiem_AUT_vs_DGoffin_BEL_MS306_clip.0008.png")
overlayGgplot("2016_HSA_R03_DThiem_AUT_vs_DGoffin_BEL_MS306_clip.0008.png")
overlayGgplot("2016_HSA_R03_DThiem_AUT_vs_DGoffin_BEL_MS306_clip.0008.png")
overlayGgplot("2016_HSA_R03_DThiem_AUT_vs_DGoffin_BEL_MS306_clip.0008.png")
overlayGgplot("2016_HSA_R03_DThiem_AUT_vs_DGoffin_BEL_MS306_clip.0008.png")
overlayGgplot("2016_HSA_R03_DThiem_AUT_vs_DGoffin_BEL_MS306_clip.0008.png")
overlayGgplot("2016_HSA_R03_DThiem_AUT_vs_DGoffin_BEL_MS306_clip.0008.png")
overlayGgplot("2016_HSA_R03_DThiem_AUT_vs_DGoffin_BEL_MS306_clip.0008.png")
overlayGgplot <- function(imgList, mergeData, matchBox=FALSE){
+   for(i in imgList){
+     img <- image_read(paste0("images/", i))
+
+     p <- ggplot(data.frame(x=c(0,800), y=c(0,450)), aes(x,y)) +
+       theme_void()+ coord_fixed()+
+       annotation_custom(rasterGrob(img)) +
+       coord_cartesian(xlim=c(0, 800), ylim=c(0,450))
+
+     faceData <- ALLmetaIMGnamedFaces %>% filter(file == i) %>% filter(type != "Manual"|type != "Animetrics")
+
+     if(nrow(faceData) == 0){
+       print(p)
+       next
+     } else{
+
+
+       faceData <- faceData %>%
+         mutate(x1 = minX, x2 = minX, x3 = maxX, x4 = maxX, x5 = minX,
+                y1 = minY, y2 = maxY, y3 = maxY, y4 = minY, y5 = minY) %>%
+         gather(corner, boxPos, x1:y5) %>%
+         mutate(posCoord = substr(corner, 1, 1), posID = substr(corner, 2, 2)) %>%
+         dplyr::select(-corner) %>% spread(posCoord, boxPos)
+
+     }
+     if(matchBox){
+       p <- p + geom_path(aes(x=x, y=450-y, group = c(type, boxID), colour=boxID), faceData) + guides(colour="none")
+     }
+     else{
+       p <- p + geom_path(aes(x=x, y=450-y, group = c(FaceID), colour=type), faceData) + scale_color_manual(values = c(Skybiometry="#ffe093", Microsoft="#5cc3f6", Google="#5cba82", Animetrics="#FF959c", Manual="#db70ff"))
+     }
+     print(p)
+   }
+ }
overlayGgplot("2016_HSA_R03_DThiem_AUT_vs_DGoffin_BEL_MS306_clip.0008.png")
#plot images with overlaid boxes
overlayGgplot <- function(imgList, mergeData, matchBox=FALSE){
for(i in imgList){
img <- image_read(paste0("images/", i))
p <- ggplot(data.frame(x=c(0,800), y=c(0,450)), aes(x,y)) +
theme_void()+ coord_fixed()+
annotation_custom(rasterGrob(img)) +
coord_cartesian(xlim=c(0, 800), ylim=c(0,450))
faceData <- ALLmetaIMGnamedFaces %>% filter(file == i)
%>% filter(type!="Manual"|type!="Animetrics")
if(nrow(faceData) == 0){
print(p)
next
} else{
faceData <- faceData %>%
mutate(x1 = minX, x2 = minX, x3 = maxX, x4 = maxX, x5 = minX,
y1 = minY, y2 = maxY, y3 = maxY, y4 = minY, y5 = minY) %>%
gather(corner, boxPos, x1:y5) %>%
mutate(posCoord = substr(corner, 1, 1), posID = substr(corner, 2, 2)) %>%
dplyr::select(-corner) %>% spread(posCoord, boxPos)
}
if(matchBox){
p <- p + geom_path(aes(x=x, y=450-y, group = c(type, boxID), colour=boxID), faceData) + guides(colour="none")
}
else{
p <- p + geom_path(aes(x=x, y=450-y, group = c(FaceID), colour=type), faceData) + scale_color_manual(values = c(Skybiometry="#ffe093", Microsoft="#5cc3f6", Google="#5cba82", Animetrics="#FF959c", Manual="#db70ff"))
}
print(p)
}
}
#plot images with overlaid boxes
overlayGgplot <- function(imgList, mergeData, matchBox=FALSE){
for(i in imgList){
img <- image_read(paste0("images/", i))
p <- ggplot(data.frame(x=c(0,800), y=c(0,450)), aes(x,y)) +
theme_void()+ coord_fixed()+
annotation_custom(rasterGrob(img)) +
coord_cartesian(xlim=c(0, 800), ylim=c(0,450))
faceData <- ALLmetaIMGnamedFaces %>% filter(file == i)   %>%
filter(type!="Manual"|type!="Animetrics")
if(nrow(faceData) == 0){
print(p)
next
} else{
faceData <- faceData %>%
mutate(x1 = minX, x2 = minX, x3 = maxX, x4 = maxX, x5 = minX,
y1 = minY, y2 = maxY, y3 = maxY, y4 = minY, y5 = minY) %>%
gather(corner, boxPos, x1:y5) %>%
mutate(posCoord = substr(corner, 1, 1), posID = substr(corner, 2, 2)) %>%
dplyr::select(-corner) %>% spread(posCoord, boxPos)
}
if(matchBox){
p <- p + geom_path(aes(x=x, y=450-y, group = c(type, boxID), colour=boxID), faceData) + guides(colour="none")
}
else{
p <- p + geom_path(aes(x=x, y=450-y, group = c(FaceID), colour=type), faceData) + scale_color_manual(values = c(Skybiometry="#ffe093", Microsoft="#5cc3f6", Google="#5cba82", Animetrics="#FF959c", Manual="#db70ff"))
}
print(p)
}
}
overlayGgplot("2016_HSA_R03_DThiem_AUT_vs_DGoffin_BEL_MS306_clip.0008.png")
#plot images with overlaid boxes
overlayGgplot <- function(imgList, mergeData, matchBox=FALSE){
for(i in imgList){
img <- image_read(paste0("images/", i))
p <- ggplot(data.frame(x=c(0,800), y=c(0,450)), aes(x,y)) +
theme_void()+ coord_fixed()+
annotation_custom(rasterGrob(img)) +
coord_cartesian(xlim=c(0, 800), ylim=c(0,450))
faceData <- ALLmetaIMGnamedFaces %>% filter(file == i)   %>%
filter(type!="Manual"|type!="Animetrics") %>% droplevels()
if(nrow(faceData) == 0){
print(p)
next
} else{
faceData <- faceData %>%
mutate(x1 = minX, x2 = minX, x3 = maxX, x4 = maxX, x5 = minX,
y1 = minY, y2 = maxY, y3 = maxY, y4 = minY, y5 = minY) %>%
gather(corner, boxPos, x1:y5) %>%
mutate(posCoord = substr(corner, 1, 1), posID = substr(corner, 2, 2)) %>%
dplyr::select(-corner) %>% spread(posCoord, boxPos)
}
if(matchBox){
p <- p + geom_path(aes(x=x, y=450-y, group = c(type, boxID), colour=boxID), faceData) + guides(colour="none")
}
else{
p <- p + geom_path(aes(x=x, y=450-y, group = c(FaceID), colour=type), faceData) + scale_color_manual(values = c(Skybiometry="#ffe093", Microsoft="#5cc3f6", Google="#5cba82", Animetrics="#FF959c", Manual="#db70ff"))
}
print(p)
}
}
overlayGgplot("2016_HSA_R03_DThiem_AUT_vs_DGoffin_BEL_MS306_clip.0008.png")
overlayGgplot("2016_HSA_R03_DThiem_AUT_vs_DGoffin_BEL_MS306_clip.0008.png")
#plot images with overlaid boxes
overlayGgplot <- function(imgList, mergeData, matchBox=FALSE){
for(i in imgList){
img <- image_read(paste0("images/", i))
p <- ggplot(data.frame(x=c(0,800), y=c(0,450)), aes(x,y)) +
theme_void()+ coord_fixed()+
annotation_custom(rasterGrob(img)) +
coord_cartesian(xlim=c(0, 800), ylim=c(0,450))
faceData <- ALLmetaIMGnamedFaces %>% filter(file == i)   %>%
filter(type != "Manual" & type != "Animetrics") %>% droplevels()
if(nrow(faceData) == 0){
print(p)
next
} else{
faceData <- faceData %>%
mutate(x1 = minX, x2 = minX, x3 = maxX, x4 = maxX, x5 = minX,
y1 = minY, y2 = maxY, y3 = maxY, y4 = minY, y5 = minY) %>%
gather(corner, boxPos, x1:y5) %>%
mutate(posCoord = substr(corner, 1, 1), posID = substr(corner, 2, 2)) %>%
dplyr::select(-corner) %>% spread(posCoord, boxPos)
}
if(matchBox){
p <- p + geom_path(aes(x=x, y=450-y, group = c(type, boxID), colour=boxID), faceData) + guides(colour="none")
}
else{
p <- p + geom_path(aes(x=x, y=450-y, group = c(FaceID), colour=type), faceData) + scale_color_manual(values = c(Skybiometry="#ffe093", Microsoft="#5cc3f6", Google="#5cba82", Animetrics="#FF959c", Manual="#db70ff"))
}
print(p)
}
}
overlayGgplot("2016_HSA_R03_DThiem_AUT_vs_DGoffin_BEL_MS306_clip.0008.png")
overlayGgplot("2016_HSA_R03_DThiem_AUT_vs_DGoffin_BEL_MS306_clip.0008.png")
ggneG <- ggplot(GEP, aes(x=neutral)) +
geom_histogram(binwidth=0.055, aes(y=..count../sum(..count..))) +
coord_cartesian(xlim = c(0,1), ylim = c(0,1)) + ylab("") + theme(axis.text.x = element_text(angle = 20))
ggneM <- ggplot(MEP, aes(x=neutral)) +  geom_histogram(binwidth=0.055, aes(y=..count../sum(..count..))) + coord_cartesian(xlim = c(0,1), ylim = c(0,1)) + ylab("")+ theme(axis.text.x = element_text(angle = 20))
ggneS <- ggplot(SBP, aes(x=neutral))+  geom_histogram(binwidth=0.055, aes(y=..count../sum(..count..))) +coord_cartesian(xlim = c(0,1), ylim = c(0,1)) + ylab("")+ theme(axis.text.x = element_text(angle = 20))
grid.arrange(ggneG,ggneM,ggneS nrow=1)
grid.arrange(ggneG,ggneM,ggneS, nrow=1)
?grid.arrange
grid.arrange(ggneG,ggneM,ggneS, nrow=1,
top=textGrob("Distribution of Neutral Proportions",
gp=gpar(fontsize=20,font=3)), left =("Percentage of Emotion values"))
grid.arrange(ggneG,ggneM,ggneS, nrow=1,
top=textGrob("Distribution of Neutral Proportions",
gp=gpar(fontsize=20,font=3)), left =("Percentage of Images"))
grid.arrange(ggneG,ggneM,ggneS, nrow=1,
top=textGrob("Distribution of Neutral Proportions",
gp=gpar(fontsize=20,font=3)), left =("Proportion of Images"))
ggneM <- ggplot(MEP, aes(x=neutral)) +  geom_histogram(binwidth=0.055, aes(y=..count../sum(..count..))) + coord_cartesian(xlim = c(0,1), ylim = c(0,1)) + ylab("")+ theme(axis.text.x = element_text(angle = 20)) +
ggtitle("Microsoft")
grid.arrange(ggneG,ggneM,ggneS, nrow=1,
gp=gpar(fontsize=20,font=3)), left =("Proportion of Images"))
grid.arrange(ggneG,ggneM,ggneS, nrow=1, left =("Proportion of Images"))
ggneG <- ggplot(GEP, aes(x=neutral)) +  geom_histogram(binwidth=0.055, aes(y=..count../sum(..count..))) +
coord_cartesian(xlim = c(0,1), ylim = c(0,1)) + ylab("") + theme(axis.text.x = element_text(angle = 20))  +
ggtitle("Google")
ggneM <- ggplot(MEP, aes(x=neutral)) +  geom_histogram(binwidth=0.055, aes(y=..count../sum(..count..))) + coord_cartesian(xlim = c(0,1), ylim = c(0,1)) + ylab("")+ theme(axis.text.x = element_text(angle = 20)) +
ggtitle("Microsoft")
ggneS <- ggplot(SBP, aes(x=neutral))+  geom_histogram(binwidth=0.055, aes(y=..count../sum(..count..))) +coord_cartesian(xlim = c(0,1), ylim = c(0,1)) + ylab("")+ theme(axis.text.x = element_text(angle = 20))  +
ggtitle("Skybiometry")
grid.arrange(ggneG,ggneM,ggneS, nrow=1, left =("Proportion of Images"))
ggneG <- ggplot(GEP, aes(x=neutral)) +  geom_histogram(binwidth=0.055, aes(y=..count../sum(..count..))) +
coord_cartesian(xlim = c(0,1), ylim = c(0,1)) + ylab("") + theme(axis.text.x = element_text(angle = 20))  +
ggtitle("Google")
ggneM <- ggplot(MEP, aes(x=neutral)) +  geom_histogram(binwidth=0.055, aes(y=..count../sum(..count..))) + coord_cartesian(xlim = c(0,1), ylim = c(0,1)) + ylab("")+ theme(axis.text.x = element_text(angle = 20)) +
ggtitle("Microsoft")
ggneS <- ggplot(SBP, aes(x=neutral))+  geom_histogram(binwidth=0.055, aes(y=..count../sum(..count..))) +coord_cartesian(xlim = c(0,1), ylim = c(0,1)) + ylab("")+ theme(axis.text.x = element_text(angle = 20))  +
ggtitle("Skybiometry")
grid.arrange(ggneG,ggneM,ggneS, nrow=1, left =("Proportion of Images"))
grid.arrange(ggneG,ggneM,ggneS, nrow=1, left =("Proportion of Images"))
ggneG <- ggplot(GEP, aes(x=neutral)) +  geom_histogram(binwidth=0.055, aes(y=..count../sum(..count..))) +
coord_cartesian(xlim = c(0,1), ylim = c(0,1)) + ylab("") + xlab("") + theme(axis.text.x = element_text(angle = 20))  +
ggtitle("Google")
ggneM <- ggplot(MEP, aes(x=neutral)) +  geom_histogram(binwidth=0.055, aes(y=..count../sum(..count..))) + coord_cartesian(xlim = c(0,1), ylim = c(0,1)) + ylab("")+ xlab("")+ theme(axis.text.x = element_text(angle = 20)) +
ggtitle("Microsoft")
ggneS <- ggplot(SBP, aes(x=neutral))+  geom_histogram(binwidth=0.055, aes(y=..count../sum(..count..))) +coord_cartesian(xlim = c(0,1), ylim = c(0,1)) + ylab("") + xlab("")+ theme(axis.text.x = element_text(angle = 20))  +
ggtitle("Skybiometry")
grid.arrange(ggneG,ggneM,ggneS, nrow=1, left =("Proportion of Images"))
grid.arrange(ggneG,ggneM,ggneS, nrow=1, left =("Proportion of Images"),
bottom ="Neutral")
grid.arrange(ggneG,ggneM,ggneS, nrow=1, left =("Proportion of Images"),
bottom ="Neutral Proportion")
AKimgsG<-GEP %>% filter(player1=="ACornet")
AKimgsG<-AKimgsG %>% filter(detect=="Player")
AKlist <- as.list(AKimgsG$FileName)
length(AKlist)
AKlist[6]
AKlist
MicrosoftHists <- function(player = NA, data = MEP){
if (!is.na(player)){
data <- MEP %>% dplyr::filter(playerName == player)
}
ggMEPne<-ggplot(data, aes(x=neutral)) + geom_histogram(binwidth=0.055, aes(y=..count../sum(..count..))) +   coord_cartesian(xlim = c(0,1), ylim = c(0,1)) + ylab("") + theme(axis.text.x = element_text(angle = 20))
ggMEPan<-ggplot(data, aes(x=anger)) +    geom_histogram(binwidth=0.055, aes(y=..count../sum(..count..))) +   coord_cartesian(xlim = c(0,1), ylim = c(0,1)) + ylab("")+ theme(axis.text.x = element_text(angle = 20))
ggMEPdi<-ggplot(data, aes(x=disgust)) +    geom_histogram(binwidth=0.055, aes(y=..count../sum(..count..))) +   coord_cartesian(xlim = c(0,1), ylim = c(0,1)) + ylab("")+ theme(axis.text.x = element_text(angle = 20))
ggMEPfe<-ggplot(data, aes(x=fear)) +    geom_histogram(binwidth=0.055, aes(y=..count../sum(..count..))) +   coord_cartesian(xlim = c(0,1), ylim = c(0,1)) + ylab("")+ theme(axis.text.x = element_text(angle = 20))
ggMEPha<-ggplot(data, aes(x=happiness)) +    geom_histogram(binwidth=0.055, aes(y=..count../sum(..count..))) +   coord_cartesian(xlim = c(0,1), ylim = c(0,1)) + ylab("")+ theme(axis.text.x = element_text(angle = 20))
ggMEPsa<-ggplot(data, aes(x=sadness)) +    geom_histogram(binwidth=0.055, aes(y=..count../sum(..count..))) +   coord_cartesian(xlim = c(0,1), ylim = c(0,1)) + ylab("")+ theme(axis.text.x = element_text(angle = 20))
ggMEPsu<-ggplot(data, aes(x=surprise)) +    geom_histogram(binwidth=0.055, aes(y=..count../sum(..count..))) +   coord_cartesian(xlim = c(0,1), ylim = c(0,1)) + ylab("")+ theme(axis.text.x = element_text(angle = 20))
ggMEPco<-ggplot(data, aes(x=contempt)) +    geom_histogram(binwidth=0.055, aes(y=..count../sum(..count..))) +   coord_cartesian(xlim = c(0,1), ylim = c(0,1)) + ylab("")+ theme(axis.text.x = element_text(angle = 20))
grid.arrange(ggMEPne,
ggMEPan,
ggMEPco,
ggMEPdi,
ggMEPfe,
ggMEPha,
ggMEPsa,
ggMEPsu,nrow=2,
top=textGrob(paste0("Microsoft Distribution of Emotion Porportions for ", player), gp=gpar(fontsize=18,font=3)),
left = ("Percentage of Emotion values"))
}
MicrosoftHists("ACornet")
TBerdych
MicrosoftHists("TBerdych")
GEP1 <- GEP1 %>% rowwise %>% mutate(Gneutral = ifelse(Emotion=="neutral", "neutral","non-neutral")) %>%  mutate(neutral01 = ifelse(Gneutral=="neutral",1,0))
Mneconfint <- as.data.frame(confint(Mne)) %>%
mutate(`exp(2.5%)` = exp(`2.5 %`)) %>%
mutate(`exp(97.5%)` = exp(`97.5 %`)) %>%
cbind(rownames(confint(Mne)), exp(Mne$coefficients), .) %>%
select(`exp(Estimates)` = `exp(Mne$coefficients)`, `exp(2.5%)`, `exp(97.5%)`)
GEP1 <- GEP1 %>% rowwise %>% mutate(Gneutral = ifelse(Emotion=="neutral", "neutral","non-neutral")) %>%  mutate(neutral01 = ifelse(Gneutral=="neutral",1,0))
MEP1 <- MEP1 %>% rowwise %>% mutate(Mneutral = ifelse(Emotion=="neutral", "neutral","non-neutral")) %>% mutate(neutral01 = ifelse(Mneutral=="neutral",1,0))
SBP1 <- SBP1 %>% rowwise %>% mutate(Sneutral = ifelse(Emotion=="neutral", "neutral","non-neutral")) %>% mutate(neutral01 = ifelse(Sneutral=="neutral",1,0))
#create a model
Mne = glm(neutral01 ~ bg+obscured+glasses, data = MEP1, family=binomial(logit))
#summary(Mne)
Mneconfint <- as.data.frame(confint(Mne)) %>%
mutate(`exp(2.5%)` = exp(`2.5 %`)) %>%
mutate(`exp(97.5%)` = exp(`97.5 %`)) %>%
cbind(rownames(confint(Mne)), exp(Mne$coefficients), .) %>%
<<<<<<< Updated upstream
select(Estimates = `exp(Mne$coefficients)`, `exp(2.5%)`, `exp(97.5%)`)
pander(Mneconfint[2:8,], digits=3, caption="")
pander(Mneconfint[2:6,], digits=3, caption="")
pander(Mneconfint[2:5,], digits=3, caption="")
install.packages(packrat)
install.packages("packrat")
install.packages("packrat")
#packages:
library(bookdown)
library(pander)
library(ggplot2)
library(imager)
library(devtools)
library(knitcitations)
library(RefManageR)
library(readr)
library(knitr)
library(grid)
library(tidyverse)
install.packages("glue")
#packages:
library(bookdown)
library(pander)
library(ggplot2)
library(imager)
library(devtools)
library(knitcitations)
library(RefManageR)
library(readr)
library(knitr)
library(grid)
library(tidyverse)
library(magick)
library(kfigr)
library(UpSetR)
library(descr)
library(tables)
library(xtable)
library(ggthemes)
library(EBI                                                   emage)
library(EBImage)
knitr::opts_chunk$set(echo=FALSE, message=FALSE, warning=FALSE, kfigr.link=TRUE, kfigr.prefix=TRUE, cache=TRUE, fig.env = TRUE)
options("citation_format" = "pandoc")
BibOptions(check.entries = FALSE, style = "markdown", bib.style = "alphabetic", cite.style = 'alphabetic')
ALLmetaIMGnamed<-read_csv("data/ALLmetaIMGnamed.csv", col_types = cols(type = col_factor(levels = c("Manual", "Animetrics", "Google", "Microsoft", "Skybiometry"))))
SceneAttributes<-read_csv("TableCSVs/SceneAttributes.csv")
SolutionSpecs<-read_csv("TableCSVs/SolutionSpecifications.csv")
#plot images with overlaid boxes
overlayGgplot <- function(imgList, mergeData, matchBox=FALSE){
for(i in imgList){
img <- image_read(paste0("figures/", i))
p <- ggplot(data.frame(x=c(0,800), y=c(0,450)), aes(x,y)) +
theme_void()+ coord_fixed()+
annotation_custom(rasterGrob(img)) +
coord_cartesian(xlim=c(0, 800), ylim=c(0,450))
faceData <- ALLmetaIMGnamedFaces %>% filter(file == i)
if(nrow(faceData) == 0){
print(p)
next
} else{
faceData <- faceData %>%
mutate(x1 = minX, x2 = minX, x3 = maxX, x4 = maxX, x5 = minX,
y1 = minY, y2 = maxY, y3 = maxY, y4 = minY, y5 = minY) %>%
gather(corner, boxPos, x1:y5) %>%
mutate(posCoord = substr(corner, 1, 1), posID = substr(corner, 2, 2)) %>%
dplyr::select(-corner) %>% spread(posCoord, boxPos)
}
if(matchBox){
p <- p + geom_path(aes(x=x, y=450-y, group = c(type, boxID), colour=boxID), faceData) + guides(colour="none")
}
else{
p <- p + geom_path(aes(x=x, y=450-y, group = c(FaceID), colour=type), faceData) + guides(colour = guide_legend(override.aes = list(linetype=c("dotdash", "F1"))))
}
print(p)
}
}
imagesList0<-as.list("2016_HSA_R01_BTomic_AUS_vs_DIstomin_UZB_MS157_clip.0013.png")
overlayGgplot(imagesList0, ALLmetaIMG, matchBox = FALSE)
ALLmetaIMGnamedFaces<-ALLmetaIMGnamed%>%
#filter(matchesManual) %>%
dplyr::select(-ID, -facecounter)%>%
mutate(fileID = as.numeric(factor(file))) %>%
mutate(FaceKey=paste(fileID, boxID, sep="-")) %>%
mutate(FaceID=paste(fileID, boxID, substring(type, 1,2), sep="-"))
overlayGgplot(imagesList0, ALLmetaIMG, matchBox = FALSE)
#plot images with overlaid boxes
overlayGgplot <- function(imgList, mergeData, matchBox=FALSE){
for(i in imgList){
img <- image_read(paste0("figures/", i))
p <- ggplot(data.frame(x=c(0,800), y=c(0,450)), aes(x,y)) +
theme_void()+ coord_fixed()+
annotation_custom(rasterGrob(img)) +
coord_cartesian(xlim=c(0, 800), ylim=c(0,450))
faceData <- ALLmetaIMGnamedFaces %>% filter(file == i)
if(nrow(faceData) == 0){
print(p)
next
} else{
faceData <- faceData %>%
mutate(x1 = minX, x2 = minX, x3 = maxX, x4 = maxX, x5 = minX,
y1 = minY, y2 = maxY, y3 = maxY, y4 = minY, y5 = minY) %>%
gather(corner, boxPos, x1:y5) %>%
mutate(posCoord = substr(corner, 1, 1), posID = substr(corner, 2, 2)) %>%
dplyr::select(-corner) %>% spread(posCoord, boxPos)
}
if(matchBox){
p <- p + geom_path(aes(x=x, y=450-y, group = c(type, boxID), colour=boxID), faceData) + guides(colour="none")
}
else{
p <- p + geom_path(aes(x=x, y=450-y, group = c(FaceID), colour=type), faceData) + guides(colour = guide_legend(override.aes = list(colour =c(Skybiometry="#ffe093", Microsoft="#5cc3f6",
Google="#5cba82", Animetrics="#FF959c", Manual="#db70ff"))))
}
print(p)
}
}
overlayGgplot(imagesList0, ALLmetaIMGnamedFaces, matchBox = FALSE)
#plot images with overlaid boxes
overlayGgplot <- function(imgList, mergeData, matchBox=FALSE){
for(i in imgList){
img <- image_read(paste0("figures/", i))
p <- ggplot(data.frame(x=c(0,800), y=c(0,450)), aes(x,y)) +
theme_void()+ coord_fixed()+
annotation_custom(rasterGrob(img)) +
coord_cartesian(xlim=c(0, 800), ylim=c(0,450))
faceData <- ALLmetaIMGnamedFaces %>% filter(file == i)
if(nrow(faceData) == 0){
print(p)
next
} else{
faceData <- faceData %>%
mutate(x1 = minX, x2 = minX, x3 = maxX, x4 = maxX, x5 = minX,
y1 = minY, y2 = maxY, y3 = maxY, y4 = minY, y5 = minY) %>%
gather(corner, boxPos, x1:y5) %>%
mutate(posCoord = substr(corner, 1, 1), posID = substr(corner, 2, 2)) %>%
dplyr::select(-corner) %>% spread(posCoord, boxPos)
}
if(matchBox){
p <- p + geom_path(aes(x=x, y=450-y, group = c(type, boxID), colour=boxID), faceData) + guides(colour="none")
}
else{
p <- p + geom_path(aes(x=x, y=450-y, group = c(FaceID), colour=type), faceData) + guides(colour = guide_legend(override.aes = list(colour =c(Skybiometry="#5cc3f6", Microsoft="#ffe093",
Google="#5cba82", Animetrics="#FF959c", Manual="#db70ff"))))
}
print(p)
}
}
overlayGgplot(imagesList0, ALLmetaIMGnamedFaces, matchBox = FALSE)
overlayGgplot(imagesList0, ALLmetaIMGnamedFaces, matchBox = FALSE)
overlaid boxes
overlayGgplot <- function(imgList, mergeData, matchBox=TRUE){
for(i in imgList){
#read in image
image <- readImage(paste0("figures/", i))
#convert image to a df, add hex value
image_df <- data.frame(x=rep(1:nrow(image), ncol(image)),
y=rep(1:ncol(image),
rep(nrow(image),
ncol(image))),
r=as.vector(image[,,1]),
g=as.vector(image[,,2]),
b=as.vector(image[,,3]))
image_df$h <- rgb(image_df[,3:5])
#Create the plot of the image
p <- ggplot() +
scale_fill_identity(guide="legend") +
geom_tile(data=image_df, aes(x,-y, fill=h)) +
theme_solid()
# Find associated Face Box information for specific image
faceData <- ALLmetaIMGnamedFaces %>% filter(file == i)
if(nrow(faceData) == 0){
return(p)
} else{
faceData <- faceData %>%
mutate(x1 = minX, x2 = minX, x3 = maxX, x4 = maxX, x5 = minX,
y1 = minY, y2 = maxY, y3 = maxY, y4 = minY, y5 = minY) %>%
gather(corner, boxPos, x1:y5) %>%
mutate(posCoord = substr(corner, 1, 1), posID = substr(corner, 2, 2)) %>%
dplyr::select(-corner) %>% spread(posCoord, boxPos)
}
}
if(matchBox){
p <- p + geom_path(aes(x=x, y=450-y, group = faceID, colour=faceID), faceData) +
guides(colour="none")
}
else{
p <- p + geom_path(inherit.aes=FALSE, data=faceData, aes(x=x, y=-y, colour=type, group = c(FaceID))) +
guides(colour = guide_legend(override.aes = list(colour=c(Skybiometry="#ffe093", Microsoft="#5cc3f6",
Google="#5cba82", Animetrics="#FF959c", Manual="#db70ff"))))
}
return(p)
}
imagesList0<-as.list("2016_HSA_R01_BTomic_AUS_vs_DIstomin_UZB_MS157_clip.0013.png")
overlayGgplot(imagesList0, ALLmetaIMG, matchBox = FALSE)
image <- readImage(paste0("figures/", i))
i<-("2016_HSA_R01_BTomic_AUS_vs_DIstomin_UZB_MS157_clip.0013.png")
image <- readImage(paste0("figures/", i))
image_df <- data.frame(x=rep(1:nrow(image), ncol(image)),
y=rep(1:ncol(image),
rep(nrow(image),
ncol(image))),
r=as.vector(image[,,1]),
g=as.vector(image[,,2]),
b=as.vector(image[,,3]))
image_df$h <- rgb(image_df[,3:5])
p <- ggplot() +
scale_fill_identity(guide="legend") +
geom_tile(data=image_df, aes(x,-y, fill=h)) +
theme_solid()
p
system.time(p)
system.time(print(p))
View(SBPAK)
View(SBPAK)
View(SBPAK)
img <- image_read(paste0("figures/", i))
p <- ggplot(data.frame(x=c(0,800), y=c(0,450)), aes(x,y)) +
theme_void()+ coord_fixed()+
annotation_custom(rasterGrob(img)) +
coord_cartesian(xlim=c(0, 800), ylim=c(0,450))
faceData <- ALLmetaIMGnamedFaces %>% filter(file == i)
p
image <- readImage(paste0("figures/", i))
image_df <- data.frame(x=rep(1:nrow(image), ncol(image)),
y=rep(1:ncol(image),
rep(nrow(image),
ncol(image))),
r=as.vector(image[,,1]),
g=as.vector(image[,,2]),
b=as.vector(image[,,3]))
image_df$h <- rgb(image_df[,3:5])
View(image_df)
p <- ggplot() +
scale_fill_identity(guide="legend") +
geom_tile(data=image_df, aes(x,-y, fill=h)) +
theme_solid()
p
p <- ggplot() +
scale_fill_identity(guide="legend") +
geom_point(data=image_df, aes(x,-y, fill=h)) +
theme_solid()
p
?rasterGrob
img <- image_read(paste0("figures/", i))
img
?unit
=======
select(`exp(Estimates)` = `exp(Mne$coefficients)`, `exp(2.5%)`, `exp(97.5%)`)
knitr::kable(Mneconfint[2:5,],longtable=TRUE, booktabs = TRUE, digits=3, caption=" ")
View(GEP1)
AKimgsG<-GEP %>% filter(player1=="GSimon")
AKimgsG<-AKimgsG %>% filter(detect=="Player")
AKlist <- as.list(AKimgsG$FileName)
length(AKlist)
AKimgsG<-GEP %>% filter(player2=="GSimon")
AKimgsG<-AKimgsG %>% filter(detect=="Player")
AKlist <- as.list(AKimgsG$FileName)
DisplayFaces(AKlist)
>>>>>>> Stashed changes
