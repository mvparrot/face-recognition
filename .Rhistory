S = ifelse(S.s=="   ", "-", S.e))%>%
# unite(Animetrics, A, A.s, sep="") %>%
# unite(Google, G, G.s, sep="") %>%
# unite(Microsoft, M, M.s, sep="") %>%
# unite(Skybiometry, S, S.s, sep="") %>%
# select(variable, Animetrics, Google, Microsoft, Skybiometry)
mutate(` ` = A.s,
`  ` = G.s,
`   ` = M.s,
`    ` = S.s) %>%
select(variable, A, ` `,
G, `  `,
M, `   `,
S, `    `)
knitr::kable(ModelEstimatesTable, align=c("l",
"r", "l",
"r", "l"),
booktabs = TRUE, longtable=TRUE, caption="The table of regression coefficients denotes the significant variables, and levels, for the four API types. The dashes represent coefficient that were not significant. The symbols to the right of the regression coefficients denote the significance level associated with each coefficient. The background variable, and levels of the interaction between shot angle and background were only significant for Google.", format = "latex")
predSet <-
aminFaces %>% select(file,glasses, headangle, lighting, obscured, shotangle, situation, visorhat, bg) %>%
filter(headangle=="Profile" &
situation=="Court in play" &
lighting=="Shaded" &
shotangle=="Upward Angle" &
bg=="Crowd" &
obscured=="Yes" &
visorhat=="Yes")
overlayGgplot(predSet$file)
aminFaces %>% filter(type=="Manual" | type=="Google") %>%
mutate(isplayer = ifelse(detect=="Player", 1, 0)) -> players
mod1 <- glm(isplayer ~ 0 +
shotangle +
bg +
bg*shotangle +
situation +
obscured +
headangle +
lighting +
glasses +
visorhat, data=players, family=binomial(link="logit"))
#drop1(mod1, test="Chisq")
#summary(mod1)
# currently same model as earlier, give two?
ggplot(amin, aes(x = type, fill=type)) +
geom_bar(position="dodge") +
xlab("Facial Recognition APIs") +
scale_x_discrete(limits=c("Manual","Google","Microsoft","Skybiometry","Animetrics")) +
ylab("Number of Faces") +
guides(fill=FALSE) +
labs(caption="") + scale_fill_manual(values=type.colours)
FacesAPI <- aminFaces %>%
filter(!duplicates) %>%
select(FaceKey, type) %>%
table() %>%
as.data.frame() %>%
spread(key=type, value=Freq) %>%
mutate(Animetrics = ifelse(Animetrics==0, "No Face", "Face"),
Google = ifelse(Google==0, "No Face", "Face"),
Microsoft = ifelse(Microsoft==0, "No Face", "Face"),
Manual = ifelse(Manual==0, "No Face", "Face"),
Skybiometry = ifelse(Skybiometry==0, "No Face", "Face"))
AM <- table(FacesAPI$Manual, FacesAPI$Animetrics, dnn = c("Manual", "Animetrics"))
GM <- table(FacesAPI$Manual, FacesAPI$Google, dnn = c("Manual", "Google"))
MM <- table(FacesAPI$Manual, FacesAPI$Microsoft, dnn = c("Manual", "Microsoft"))
SM <- table(FacesAPI$Manual, FacesAPI$Skybiometry, dnn = c("Manual", "Skybiometry"))
createUpSet(aminFaces)
i1 <- "2016_CT6_R01_CGarcia_FRA_vs_BStrycova_CZE_WS145_clip.0015.png" %>% overlayGgplot(., legend=FALSE) + ggtitle("  Image a.")
i2 <- "2016_HSA_R03_FDelbonis_ARG_vs_GSimon_FRA_MS302_clip.0072.png" %>% overlayGgplot(., legend=FALSE) + ggtitle("  Image b.")
i3 <- "2016_CT6_R02_ABeck_GER_vs_TBacsinszky_SUI_WS220_clip.0017.png" %>% overlayGgplot(., legend=FALSE) + ggtitle("  Image c.")
i4 <- "2016_SC2_R01_ATomljanovic_AUS_vs_KBondarenko_UKR_WS1112_clip.0053.png" %>% overlayGgplot(., legend=FALSE) + ggtitle("  Image d.")
gridExtra::grid.arrange(i1, i2, i3, i4, nrow=2)
ImageCharacteristics <- amin %>% filter(type=="Manual") %>% group_by(situation, bg, shotangle, detect) %>% dplyr::summarise(count=n())
ImageCharacteristics<-arrange(ImageCharacteristics, desc(count))
ImageCharacteristics<-ImageCharacteristics[1:5,]
knitr::kable(ImageCharacteristics, booktabs = TRUE, longtable=TRUE, caption="This table outlines the combinations of image attibutes that are most common in the image set. The combination of the Logo Wall background and the Player Shoulder Height angle are shared by three of the five image combinations.", format = "latex")
aminFaces$shotangle <- factor(aminFaces$shotangle,
levels = c("Birds Eye","Upward Angle","Player Shoulder Height"))
MosaicShotangle <- ggplot(data=aminFaces) +
geom_mosaic(aes(x=product(shotangle), fill=matchesManual)) +
#geom_text(aes(label="test", x=1, y=0.6)) +
scale_fill_brewer(palette="Dark2") +
guides(fill = guide_legend(title="API faces match \nmanual faces"))  +
labs(caption="") +
scale_x_productlist(labels=c("Birds Eye"="Birds \nEye",
"Upward Angle"="Upward \nAngle",
"Player Shoulder Height" =
"Player \nShoulder \nHeight")) + coord_flip() +
ylab("Proportion of faces") + xlab("Angle the face was captured from ") +
theme(legend.position = "none") +
ggtitle("Plot a. Proportion of faces captured \nat each angle")
aminFaces %>% count(situation)
levels(aminFaces$situation)
levels(factor(aminFaces$situation))
ggplot(data=aminFaces) +
geom_mosaic(aes(x=product(situation), fill=matchesManual)) +
scale_fill_brewer(palette="Dark2")
aminFaces$situation <- factor(aminFaces$situation, levels = c("Court close-up not player",
"Court in play",
"Off court close up of player",
"Crowd",
"Court player close-up"))
gplot(data=aminFaces) +
geom_mosaic(aes(x=product(situation), fill=matchesManual)) +
scale_fill_brewer(palette="Dark2")
ggplot(data=aminFaces) +
geom_mosaic(aes(x=product(situation), fill=matchesManual)) +
scale_fill_brewer(palette="Dark2")
ggplot(data=aminFaces) +
geom_mosaic(aes(x=product(situation), fill=matchesManual)) +
scale_fill_brewer(palette="Dark2") +
guides(fill = guide_legend(title="API faces match \nmanual faces"))  +
labs(caption="") +
scale_x_productlist(labels=c("Court close-up not player"="Court \nclose竏置p \nnot player",
"Court in play"="Court \nin play",
"Off court close up of player"="Off court \nclose up \nof player",
"Crowd"="Crowd",
"Court player close-up"="Court \nplayer \nclose竏置p")) +
coord_flip() +
ylab("Proportion of faces") + xlab("Situation the face was captured during") + theme(legend.position = "none")  +
ggtitle("Plot b. Proportion of faces captured \nin each situation")
unlink('Report06-12_cache', recursive = TRUE)
?kable
unlink('Report06-12_cache', recursive = TRUE)
ggplot(data=aminFaces) +
geom_mosaic(aes(x=product(situation), fill = bg)) + #,
#position = position_fill(reverse = TRUE),
#na.rm=TRUE) +
scale_x_discrete(labels=c("Court close-up not player"="Court \nclose竏置p \nnot player",
"Court in play"="Court in play",
"Off court close up of player"="Off court \nclose up \nof player",
"Crowd"="Crowd",
"Court player close-up"="Court \nplayer \nclose竏置p")) +
coord_flip() +
guides(fill = guide_legend(title="Background")) +
labs(caption="") +
ylab("Amount of faces") + xlab("Situation the face was captured during") + theme(legend.position = "none") +
ggtitle("Plot d. Proportion of faces captured\n with each background given the situation")
unlink('Report06-12_cache', recursive = TRUE)
?dependson
View(SceneAttributes)
SceneAttributes
SceneAttributes[,1]
unlink('Report06-12_cache', recursive = TRUE)
#packages:
library(bookdown)
library(pander)
library(ggplot2)
library(knitcitations)
library(RefManageR)
library(readr)
library(knitr)
library(grid)
library(kfigr)
library(UpSetR)
library(descr)
library(xtable)
library(gtable)
library(ggthemes)
library(EBImage)
library(gridExtra)
library(ggmosaic)
library(tidyverse)
library(purrr)
knitr::opts_chunk$set(echo=FALSE, message=FALSE, warning=FALSE, kfigr.link=TRUE, kfigr.prefix=TRUE, cache=TRUE, fig.env = TRUE, fig.cap=TRUE, fig.height=3)
options("citation_format" = "pandoc")
BibOptions(check.entries = FALSE, style = "markdown", bib.style = "alphabetic", cite.style = 'alphabetic')
#csv files:
amin<-read_csv("data/ALLmetaIMGnamed.csv", col_types = cols(type = col_factor(levels = c("Manual", "Animetrics", "Google", "Microsoft", "Skybiometry")))) %>%
filter(!duplicates)
SceneAttributes<-read_csv("data/SceneAttributes.csv")
FaceAttributes<-read_csv("data/FaceAttributes.csv")
SolutionSpecs<-read_csv("data/SolutionSpecifications.csv")
aminFaces <- amin %>%
filter(!is.na(type)) %>%
mutate(fileID = as.numeric(factor(file))) %>%
mutate(FaceKey=paste(fileID, boxID, sep="-")) %>%
mutate(FaceID=paste(fileID, boxID, substring(type, 1,2), sep="-"))
# colour scheme
type.colours <- c(Animetrics =     "#7BCCC4",
Google =     "#FC9272",
Manual =     "#C994C7",
Microsoft =  "#FA9FB5",
Skybiometry ="#ADDD8E")
#plot images with overlaid boxes
overlayGgplot <- function(imgList, mergeData, matchBox=FALSE, colourScheme = type.colours, legend=TRUE){
for(i in imgList){
#read in image
image <- readImage(paste0("figures/", i))
#used in analyses
#image <- readImage(paste0("images/", i))
#convert image to a df, add hex value
image_df <- data.frame(x=rep(1:nrow(image), ncol(image)),
y=rep(1:ncol(image),
rep(nrow(image),
ncol(image))),
r=as.vector(image[,,1]),
g=as.vector(image[,,2]),
b=as.vector(image[,,3]))
image_df$h <- rgb(image_df[,3:5])
#Create the plot of the image
p <- ggplot() +
scale_fill_identity() +
geom_tile(data=image_df, aes(x,-y, fill=h)) +
theme_void()
# Find associated Face Box information for specific image
faceData <- aminFaces %>% filter(file == i)
if(nrow(faceData) == 0){
return(p)
} else{
faceData <- faceData %>%
mutate(x1 = minX, x2 = minX, x3 = maxX, x4 = maxX, x5 = minX,
y1 = minY, y2 = maxY, y3 = maxY, y4 = minY, y5 = minY) %>%
gather(corner, boxPos, x1:y5) %>%
mutate(posCoord = substr(corner, 1, 1), posID = substr(corner, 2, 2)) %>%
dplyr::select(-corner) %>% spread(posCoord, boxPos) %>%
dplyr::select(file, type, minX, maxX, minY, maxY, FaceKey, FaceID, posID, x, y)
}
if(matchBox){
p1 <- p + geom_rect(data=faceData,
aes(xmin=minX, ymin=-maxY, xmax=maxX, ymax=-minY,
color=FaceKey, group=FaceID), fill=NA) +
guides(colour = "none")
}
else {
pa <- p + geom_rect(data=faceData,
aes(xmin=minX, ymin=-maxY, xmax=maxX, ymax=-minY,
color=type, group=FaceID), fill=NA)  +
coord_fixed(ratio=0.85) + scale_color_manual(values = colourScheme)
if (legend) p1 <- pa + guides(colour = guide_legend("")) + theme(legend.position = "bottom")
else p1<- pa + theme(legend.position = "none")
}
return(p1)
}
# Create graphs of factors in manual proportions
getManualCount <- function(type, count) {
return(count[type == "Manual"])
}
ggplotProportion <- function(dataset, factorVar){
factorVar <- deparse(substitute(factorVar))
dataset <- dataset %>% filter(matchesManual) %>% group_by_(factorVar, "type") %>% summarise(nTotal=n()) %>% group_by_(factorVar) %>% mutate(ManualCount = getManualCount(type, nTotal)) %>%
mutate(proportion = nTotal/ManualCount) %>% rename_(xvar = factorVar) %>% filter(type!="Manual")
ggplot(dataset, aes(x=xvar, y=proportion, group = reorder(type, -proportion), fill=type)) + geom_bar(stat = "identity", position = "dodge") +  ylab("Proportion of faces matched") + xlab(factorVar) + scale_colour_manual(values=type.colours)
}
ALLmetaIMGPlayers <- amin %>% filter(detect=="Player")
# Create UpSetR graph
createUpSet <- function(data) {
VennLists<-data %>%
split(.$type) %>%
map(~ .$FaceKey)%>%
fromList() %>%
upset(order.by="freq", nsets=100)
}
imagesList0<-as.list("2016_HSA_R01_BTomic_AUS_vs_DIstomin_UZB_MS157_clip.0013.png")
overlayGgplot(imagesList0, aminFaces, matchBox = FALSE)
knitr::kable(SceneAttributes, format = "latex", longtable=FALSE, booktabs =TRUE, caption = "Image descriptions that are associated with the attributes of each image.")
knitr::kable(FaceAttributes, format = "latex", longtable=FALSE, booktabs = TRUE, caption = "Possible face descriptions for each individual face. Most of the selections were obvious for each image, with the exception of obscured and head angle.")
times <- amin %>%
filter(type!="Manual") %>%
select(file, type, time.user.self, time.sys.self) %>%
group_by(file, type) %>%
mutate(n=n(), time.user.self=first(time.user.self), time.sys.self=first(time.sys.self))
t1 <- ggplot(times) +
geom_smooth(aes(x=n, y=time.sys.self, colour=type), method="lm") +
xlab("Number of faces detected") + ylab("System time (sec)") +
scale_colour_manual("API", values=type.colours) + theme(legend.position = "none")
t2 <- ggplot(times) +
geom_jitter(aes(x=n, y=time.sys.self, colour=type), alpha=0.2, width=0.3, height=0.01) +
facet_wrap(~type) +
ylim(c(0, 0.1)) +
#geom_smooth(aes(x=n, y=time.sys.self, colour=type), method="lm", se=FALSE) +
xlab("Number of faces detected") +
scale_colour_manual("API", values=type.colours) + theme(legend.position = "none")
grid.arrange(t1,t2,nrow=1)
# Prepare data
hitmiss <- function(x){
allType <- c("Animetrics", "Google", "Microsoft", "Skybiometry")
hit <- allType %in% x$type
x[1,] %>%
dplyr::select(file:visorhat) %>%
cbind(type = allType, hit = hit)
}
GlmModelCreation <- function(model, data = aminFaces) {
glmFits <- data %>%
split(.$FaceKey) %>%
map_df(~ hitmiss(.)) %>%
split(.$type) %>%
map(~ glm(model, data = dplyr::select(., -type, -file), binomial(link = "logit")))
}
ConvertModel2Table <- function(model){
model %>%
summary %>%
coef %>%
as.data.frame %>%
cbind %>%
rownames_to_column %>%
cbind %>%
dplyr::rename(variable = rowname)
}
GlmModelEstimates <- function(model, data = GlmModelCreation(model)){
glmSummary <- data %>%
map(~ ConvertModel2Table(.))
glmPlot <- do.call(rbind, Map(cbind, glmSummary, type = names(glmSummary)))
return(glmPlot)
}
# SignificancePlot <- function(model, data = GlmModelEstimates(model)) {
#   data %>%
#   mutate(significant = `Pr(>|z|)` < 0.05) %>%
#   ggplot(aes(x=type, y=`Pr(>|z|)`)) +
#   geom_col(aes(fill=significant)) +
#   facet_wrap(~ variable) +
#   coord_flip()
# }
EstimatesPlot <- function(model, data = GlmModelEstimates(model)) {
data %>%
mutate(significant = `Pr(>|z|)` < 0.05) %>%
ggplot(aes(x=type, y=Estimate)) +
geom_col(aes(fill=significant)) +
facet_wrap(~ variable, scales="free_x", labeller=label_wrap_gen(width = 25, multi_line = TRUE)) +
coord_flip()
}
ModelPlotResults<-function(model, data = GlmModelEstimates(model)){
ep<-EstimatesPlot(model, data)
#sp<- SignificancePlot(model, data)
grid.arrange(ep)#, sp)
}
TypeModel <- hit ~ 0 +
shotangle +
bg +
bg*shotangle +
situation +
obscured +
headangle +
lighting +
glasses +
visorhat
TypeGlms <- GlmModelCreation(model=TypeModel)
ModelEstimates <- GlmModelEstimates(data=TypeGlms)
#Create estimates columns
ModelEstimates %>% mutate(Estimate = round(Estimate,2)) %>%
select(variable, type, Estimate) %>%
spread(key=type, value=Estimate) %>%
select(variable, A.e=Animetrics, G.e=Google, M.e=Microsoft, S.e=Skybiometry)-> ModelEstimatesTypes
#Create significance columns
ModelEstimates %>% mutate(sig = ifelse(`Pr(>|z|)` <= 0, "***",
ifelse(`Pr(>|z|)` <= 0.001, "** ",
ifelse(`Pr(>|z|)` <= 0.010, "*  ",
ifelse(`Pr(>|z|)` <= 0.050, ".  ",
"   ")))))  %>%
select(variable, type, sig) %>%
spread(key=type, value=sig) %>%
select(variable, A.s=Animetrics, G.s=Google, M.s=Microsoft, S.s=Skybiometry) -> ModelEstimatesSign
ModelEstimatesTable <- as.data.frame(cbind(ModelEstimatesTypes, ModelEstimatesSign[,2:5])) %>%
mutate(A = ifelse(A.s=="   ", "-", A.e),
G = ifelse(G.s=="   ", "-", G.e),
M = ifelse(M.s=="   ", "-", M.e),
S = ifelse(S.s=="   ", "-", S.e))%>%
# unite(Animetrics, A, A.s, sep="") %>%
# unite(Google, G, G.s, sep="") %>%
# unite(Microsoft, M, M.s, sep="") %>%
# unite(Skybiometry, S, S.s, sep="") %>%
# select(variable, Animetrics, Google, Microsoft, Skybiometry)
mutate(` ` = A.s,
`  ` = G.s,
`   ` = M.s,
`    ` = S.s) %>%
select(variable, A, ` `,
G, `  `,
M, `   `,
S, `    `)
knitr::kable(ModelEstimatesTable, format = "latex", align=c("l",
"r", "l",
"r", "l"),
booktabs = TRUE, longtable=FALSE, caption="The table of regression coefficients denotes the significant variables, and levels, for the four API types. The dashes represent coefficient that were not significant. The symbols to the right of the regression coefficients denote the significance level associated with each coefficient. The background variable, and levels of the interaction between shot angle and background were only significant for Google.")
predSet <-
aminFaces %>% select(file,glasses, headangle, lighting, obscured, shotangle, situation, visorhat, bg) %>%
filter(headangle=="Profile" &
situation=="Match play" &
lighting=="Shaded" &
shotangle=="Upward" &
bg=="Crowd" &
obscured=="Yes" &
visorhat=="Yes")
overlayGgplot(predSet$file)
aminFaces %>% filter(type=="Manual" | type=="Google") %>%
mutate(isplayer = ifelse(detect=="Player", 1, 0)) -> players
mod1 <- glm(isplayer ~ 0 +
shotangle +
bg +
bg*shotangle +
situation +
obscured +
headangle +
lighting +
glasses +
visorhat, data=players, family=binomial(link="logit"))
#drop1(mod1, test="Chisq")
#summary(mod1)
# currently same model as earlier, give two?
ggplot(amin, aes(x = type, fill=type)) +
geom_bar(position="dodge") +
xlab("Facial Recognition APIs") +
scale_x_discrete(limits=c("Manual","Google","Microsoft","Skybiometry","Animetrics")) +
ylab("Number of Faces") +
guides(fill=FALSE) +
labs(caption="") + scale_fill_manual(values=type.colours)
FacesAPI <- aminFaces %>%
filter(!duplicates) %>%
select(FaceKey, type) %>%
table() %>%
as.data.frame() %>%
spread(key=type, value=Freq) %>%
mutate(Animetrics = ifelse(Animetrics==0, "No Face", "Face"),
Google = ifelse(Google==0, "No Face", "Face"),
Microsoft = ifelse(Microsoft==0, "No Face", "Face"),
Manual = ifelse(Manual==0, "No Face", "Face"),
Skybiometry = ifelse(Skybiometry==0, "No Face", "Face"))
AM <- table(FacesAPI$Manual, FacesAPI$Animetrics, dnn = c("Manual", "Animetrics"))
GM <- table(FacesAPI$Manual, FacesAPI$Google, dnn = c("Manual", "Google"))
MM <- table(FacesAPI$Manual, FacesAPI$Microsoft, dnn = c("Manual", "Microsoft"))
SM <- table(FacesAPI$Manual, FacesAPI$Skybiometry, dnn = c("Manual", "Skybiometry"))
createUpSet(aminFaces)
i1 <- "2016_CT6_R01_CGarcia_FRA_vs_BStrycova_CZE_WS145_clip.0015.png" %>% overlayGgplot(., legend=FALSE) + ggtitle("(a)")
i2 <- "2016_HSA_R03_FDelbonis_ARG_vs_GSimon_FRA_MS302_clip.0072.png" %>% overlayGgplot(., legend=FALSE) + ggtitle("(b)")
i3 <- "2016_CT6_R02_ABeck_GER_vs_TBacsinszky_SUI_WS220_clip.0017.png" %>% overlayGgplot(., legend=FALSE) + ggtitle("(c)")
i4 <- "2016_SC2_R01_ATomljanovic_AUS_vs_KBondarenko_UKR_WS1112_clip.0053.png" %>% overlayGgplot(., legend=FALSE) + ggtitle("(d)")
gridExtra::grid.arrange(i1, i2, i3, i4, nrow=2)
ImageCharacteristics <- amin %>% filter(type=="Manual") %>% group_by(situation, bg, shotangle, detect) %>% dplyr::summarise(count=n())
ImageCharacteristics<-arrange(ImageCharacteristics, desc(count))
ImageCharacteristics<-ImageCharacteristics[1:5,]
knitr::kable(ImageCharacteristics, booktabs = TRUE, longtable=FALSE, format.args=list(width=8), caption="Combinations of image attibutes that are most common in the image set. The combination of the Logo Wall background and the Level angle are shared by three of the five image combinations.", format = "latex")
aminFaces$shotangle <- factor(aminFaces$shotangle,
levels = c("Birds Eye","Upward","Level"))
aminFaces$matchesManual <- factor(aminFaces$matchesManual, levels=c(TRUE, FALSE))
MosaicShotangle <- ggplot(data=aminFaces) +
geom_mosaic(aes(x=product(shotangle), fill=matchesManual)) +
#geom_text(aes(label="test", x=1, y=0.6)) +
scale_fill_brewer(palette="Dark2") +
guides(fill = guide_legend(title="API matches manual"))  +
labs(caption="") +
scale_x_productlist(labels=c("Birds Eye"="Birds \nEye",
"Upward"="Upward \nAngle",
"Level" =
"Level")) + coord_flip() +
ylab("Proportion of faces") + xlab("Angle of face capture") +
theme(legend.position = "none") +
ggtitle("(a)")
aminFaces$situation <- factor(aminFaces$situation, levels = c("Not player",
"Match play",
"Off court",
"Crowd",
"Close-up"))
aminFaces$matchesManual <- factor(aminFaces$matchesManual, levels=c(TRUE, FALSE))
MosaicSit <- ggplot(data=aminFaces) +
geom_mosaic(aes(x=product(situation), fill=matchesManual)) +
scale_fill_brewer(palette="Dark2") +
guides(fill = guide_legend(title="API match manual"))  +
labs(caption="") +
scale_x_productlist(labels=c("Not player"="Not player",
"Match play"="Match play",
"Off court"="Off court",
"Crowd"="Crowd",
"Close-up"="Close-up")) +
coord_flip() +
ylab("Proportion of faces") + xlab("Situation") + theme(legend.position = "none")  +
ggtitle("(b)")
sbbgshot <- ggplot(data=aminFaces) +
geom_mosaic(aes(x=product(shotangle), fill = bg)) +#,
#position = position_fill(reverse = TRUE),
#na.rm=TRUE) +
scale_x_productlist(labels=c("Birds Eye"="Birds \nEye",
"Upward"="Upward",
"Level" =
"Level"))+
coord_flip() +
guides(fill = guide_legend(title="Background")) +
labs(caption="") +
ylab("Proportion of faces") + xlab("Angle of face capture") + theme(legend.position = "none") +
ggtitle("(c)")
sbbgsit <- ggplot(data=aminFaces) +
geom_mosaic(aes(x=product(situation), fill = bg)) + #,
#position = position_fill(reverse = TRUE),
#na.rm=TRUE) +
scale_x_productlist(labels=c("Not player"="Not player",
"Match play"="Match play",
"Off court"="Off court",
"Crowd"="Crowd",
"Close-up"="Close-up")) +
coord_flip() +
guides(fill = guide_legend(title="Background")) +
labs(caption="") +
ylab("Proportion of faces") + xlab("Situation") + theme(legend.position = "none") +
ggtitle("(d)")
g1 <- ggplotGrob(sbbgshot + theme(legend.position="bottom"))$grobs
legend1 <- g1[[which(sapply(g1, function(x) x$name) == "guide-box")]]
lheight1 <- sum(legend1$height)
plots1 <- arrangeGrob(sbbgshot, sbbgsit, ncol=2)
plots1 <- arrangeGrob(plots1, legend1, nrow=2, heights = unit.c(unit(1, "npc") - lheight1, lheight1))
g2 <- ggplotGrob(MosaicShotangle + theme(legend.position="bottom"))$grobs
legend2 <- g2[[which(sapply(g2, function(x) x$name) == "guide-box")]]
lheight2 <- sum(legend2$height)
plots2 <- arrangeGrob(MosaicShotangle, MosaicSit, ncol=2)
plots2 <- arrangeGrob(plots2, legend2, nrow=2, heights = unit.c(unit(1, "npc") - lheight2, lheight2))
grid.arrange(plots1, plots2, nrow=2)
aminFaces %>%
filter(type=="Manual") -> ManFaces
ManFaces
addmargins(table(ManFaces$glasses, ManFaces$visorhat))
prop.table(addmargins(table(ManFaces$glasses, ManFaces$visorhat)))
?prop.table
prop.table(addmargins(table(ManFaces$glasses, ManFaces$visorhat)), 1)
prop.table(addmargins(table(ManFaces$glasses, ManFaces$visorhat)), 2)
prop.table(addmargins(table(ManFaces$glasses, ManFaces$visorhat)), 1)
