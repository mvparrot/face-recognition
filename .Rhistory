split(.$type) %>%
map(~ .$FaceKey)%>%
fromList() %>%
upset(order.by="freq", nsets=100)
}
library(bookdown)
library(pander)
library(ggplot2)
library(imager)
library(devtools)
library(knitcitations)
library(RefManageR)
library(readr)
library(knitr)
library(grid)
library(tidyverse)
library(magick)
library(kfigr)
library(UpSetR)
library(descr)
library(tables)
library(xtable)
knitr::opts_chunk$set(echo=FALSE, message=FALSE, warning=FALSE, kfigr.link=TRUE, kfigr.prefix=TRUE, cache=TRUE, fig.env = TRUE)
options("citation_format" = "pandoc")
BibOptions(check.entries = FALSE, style = "markdown", bib.style = "alphabetic", cite.style = 'alphabetic')
ALLmetaIMG<-read_csv("ALLmetaIMG.csv", col_types = cols(type = col_factor(levels = c("Manual", "Animetrics", "Google", "Microsoft", "Skybiometry"))))
setwd("C:/Users/steff/Github/face-recognition")
ALLmetaIMG<-read_csv("ALLmetaIMG.csv", col_types = cols(type = col_factor(levels = c("Manual", "Animetrics", "Google", "Microsoft", "Skybiometry"))))
SceneAttributes<-read_csv("TableCSVs/SceneAttributes.csv")
FaceAttributes<-read_csv("TableCSVs/FaceAttributes.csv")
SolutionSpecs<-read_csv("TableCSVs/SolutionSpecifications.csv")
overlayGgplot <- function(imgList, mergeData, matchBox=FALSE){
for(i in imgList){
img <- image_read(paste0("images/", i))
p <- ggplot(data.frame(x=c(0,800), y=c(0,450)), aes(x,y)) +
theme_void()+ coord_fixed()+
annotation_custom(rasterGrob(img)) +
coord_cartesian(xlim=c(0, 800), ylim=c(0,450))
faceData <- ALLmetaIMGFaces %>% filter(file == i)
if(nrow(faceData) == 0){
print(p)
next
} else{
faceData <- faceData %>%
mutate(x1 = minX, x2 = minX, x3 = maxX, x4 = maxX, x5 = minX,
y1 = minY, y2 = maxY, y3 = maxY, y4 = minY, y5 = minY) %>%
gather(corner, boxPos, x1:y5) %>%
mutate(posCoord = substr(corner, 1, 1), posID = substr(corner, 2, 2)) %>%
dplyr::select(-corner) %>% spread(posCoord, boxPos)
}
if(matchBox){
p <- p + geom_path(aes(x=x, y=450-y, group = c(type, boxID), colour=boxID), faceData) + guides(colour="none")
}
else{
p <- p + geom_path(aes(x=x, y=450-y, group = c(FaceID), colour=type), faceData) + scale_color_manual(values = c(Skybiometry="#ffe093", Microsoft="#5cc3f6", Google="#5cba82", Animetrics="#FF959c", Manual="#db70ff"))
}
print(p)
}
}
getManualCount <- function(type, count) {
return(count[type == "Manual"])
}
ggplotProportion <- function(dataset, factorVar){
factorVar <- deparse(substitute(factorVar))
dataset <- dataset %>% filter(matchesManual) %>% group_by_(factorVar, "type") %>% summarise(nTotal=n()) %>% group_by_(factorVar) %>% mutate(ManualCount = getManualCount(type, nTotal)) %>%
mutate(proportion = nTotal/ManualCount) %>% rename_(xvar = factorVar) %>% filter(type!="Manual")
ggplot(dataset, aes(x=factor(xvar), y=proportion, group = type, fill=type)) + geom_bar(stat = "identity", position = "dodge") +
ylab("Proportion of faces matched") + xlab(factorVar)
}
ALLmetaIMG$graphic<-factor(ALLmetaIMG$graphic, levels = 0:1, labels = c("Live image", "Graphic"))
ALLmetaIMG$person<-factor(ALLmetaIMG$person, levels = 0:1, labels = c("No Person", "Person"))
ALLmetaIMG$situation<-factor(ALLmetaIMG$situation, levels = 0:5, labels = c("Court in play", "Court player close-up", "Court close-up not player", "Crowd", "Off court close up of player", "Transition"))
ALLmetaIMG$bg<-factor(ALLmetaIMG$bg, levels = 0:3, labels = c("Crowd", "Court", "Logo wall", "Not applicable"))
ALLmetaIMG$shotangle<-factor(ALLmetaIMG$shotangle, levels = 0:2, labels = c("Player Shoulder Height", "Birds Eye", "Upward Angle"))
ALLmetaIMG$detect<-factor(ALLmetaIMG$detect, levels = 0:2, labels = c("Player", "Other staff on court", "Fan"))
ALLmetaIMG$obscured<-factor(ALLmetaIMG$obscured, levels = 0:1, labels = c("No", "Yes"))
ALLmetaIMG$lighting<-factor(ALLmetaIMG$lighting, levels = 1:2, labels = c("Shaded", "Partially shaded"))
ALLmetaIMG$headangle<-factor(ALLmetaIMG$headangle, levels = 0:3, labels = c("Front on", "Back of head", "Profile", "Other"))
ALLmetaIMG$glasses<-factor(ALLmetaIMG$glasses, levels = 0:1, labels = c("No", "Yes"))
ALLmetaIMG$visorhat<-factor(ALLmetaIMG$visorhat, levels = 0:1, labels = c("No", "Yes"))
ALLmetaIMG$headangle <- as.character(ALLmetaIMG$headangle)
ALLmetaIMG$headangle[ALLmetaIMG$headangle == "Back of head"] <- "Other"
ALLmetaIMG$headangle <- as.factor(ALLmetaIMG$headangle)
ALLmetaIMGPlayers<- ALLmetaIMG %>% filter(detect=="Player")
createUpSet <- function(data) {
VennLists<-data %>%
split(.$type) %>%
map(~ .$FaceKey)%>%
fromList() %>%
upset(order.by="freq", nsets=100)
}
ALLmetaIMGFaces<-ALLmetaIMG%>%
filter(matchesManual) %>%
dplyr::select(-ID, -facecounter)%>%
mutate(fileID = as.numeric(factor(file))) %>%
mutate(FaceKey=paste(fileID, boxID, sep="-")) %>%
mutate(FaceID=paste(fileID, boxID, substring(type, 1,2), sep="-"))
imagesList0<-as.list("2016_HSA_R01_BTomic_AUS_vs_DIstomin_UZB_MS157_clip.0013.png")
overlayGgplot(imagesList0, ALLmetaIMGFaces, matchBox = FALSE)
knitr::kable(SceneAttributes, format = "markdown", longtable=TRUE, booktabs = TRUE, caption = "Attributes of a Scene of an image. The most appropriate option from the list was selected for each attribute.")
knitr::kable(SolutionSpecs, format = "markdown", longtable=TRUE, booktabs = TRUE, caption="")
knitr::kable(FaceAttributes, format = "markdown", longtable=TRUE, booktabs = TRUE)
# Prepare data
library(purrr)
library(tidyverse)
library(gridExtra)
library(dplyr)
library(ggplot2)
hitmiss <- function(x){
allType <- c("Animetrics", "Google", "Microsoft", "Skybiometry")
hit <- allType %in% x$type
x[1,] %>%
dplyr::select(file:visorhat) %>%
cbind(type = allType, hit = hit)
}
GlmModelCreation <- function(model, data = ALLmetaIMGFaces) {
glmFits <- data %>%
split(.$FaceKey) %>%
map_df(~ hitmiss(.)) %>%
split(.$type) %>%
map(~ glm(model, data = dplyr::select(., -type, -file, -boxID), binomial(link = "logit")))
}
ConvertModel2Table <- function(model){
model %>%
summary %>%
coef %>%
as.data.frame %>%
cbind %>%
rownames_to_column %>%
cbind %>%
dplyr::rename(variable = rowname)
}
GlmModelEstimates <- function(model, data = GlmModelCreation(model)){
glmSummary <- data %>%
map(~ ConvertModel2Table(.))
glmPlot <- do.call(rbind, Map(cbind, glmSummary, type = names(glmSummary)))
return(glmPlot)
}
SignificancePlot <- function(model, data = GlmModelEstimates(model)) {
data %>%
mutate(significant = `Pr(>|z|)` < 0.05) %>%
mutate(`Pr(<|z|)` = 1 - `Pr(>|z|)`) %>%
ggplot(aes(x=type, y=`Pr(<|z|)`)) +
theme(axis.text.x = element_text(angle = 30, hjust = 1)) +
geom_col(aes(fill=significant)) +
facet_wrap(~ variable)
}
EstimatesPlot <- function(model, data = GlmModelEstimates(model)) {
data %>%
mutate(significant = `Pr(>|z|)` < 0.05) %>%
ggplot(aes(x=type, y=Estimate)) +
theme(axis.text.x = element_text(angle = 30, hjust = 1),
axis.text.y = element_text(angle = 30, hjust = 1)) +
geom_col(aes(fill=significant)) +
facet_wrap(~ variable, scales = "free_y")
}
ModelPlotResults<-function(model, data = GlmModelEstimates(model)){
ep<-EstimatesPlot(model, data)
sp<- SignificancePlot(model, data)
grid.arrange(ep, sp)
}
ModelPlotResults(hit ~ shotangle + bg + bg*shotangle + graphic + situation + lighting + glasses + visorhat)
ggplot(ALLmetaIMG, aes(x = type, fill=type)) + geom_bar(position="dodge") +xlab("Facial Recognition Softwares")+scale_x_discrete(limits=c("Manual","Google","Microsoft","Skybiometry","Animetrics")) +ylab("Number of Potential Faces") + guides(fill=FALSE) + labs(caption="")
NoManual<-ALLmetaIMG %>% filter(ALLmetaIMG$type!="Manual")
NoManual<-NoManual %>% droplevels(NoManual$type)
Accuracy<-with(NoManual, table(NoManual$matchesManual, NoManual$type))
ct<-CrossTable(Accuracy, prop.chisq = FALSE, cell.layout = TRUE, digits=4)
print(ct)
imagesList3<-as.list("2016_SC2_R01_ATomljanovic_AUS_vs_KBondarenko_UKR_WS1112_clip.0053.png")
overlayGgplot(imagesList3, ALLmetaIMGFaces, matchBox = FALSE)
NoManual<-ALLmetaIMG %>% filter(ALLmetaIMG$type!="Manual")
NoManual<-NoManual %>% droplevels(NoManual$type)
Accuracy<-with(NoManual, table(NoManual$matchesManual, NoManual$type))
ct<-CrossTable(Accuracy, prop.chisq = FALSE, cell.layout = TRUE, digits=4)
print(ct)
createUpSet(ALLmetaIMGFaces)
NoManual<-ALLmetaIMG %>% filter(ALLmetaIMG$type!="Manual")
NoManual<-NoManual %>% droplevels(NoManual$type)
Accuracy<-with(NoManual, table(NoManual$matchesManual, NoManual$type))
ct<-CrossTable(Accuracy, prop.chisq = FALSE, cell.layout = TRUE, digits=4)
print(ct)
imagesList3<-as.list("2016_SC2_R01_ATomljanovic_AUS_vs_KBondarenko_UKR_WS1112_clip.0053.png")
overlayGgplot(imagesList3, ALLmetaIMGFaces, matchBox = FALSE)
set.seed(1994)
glmFits <- data %>%
split(.$FaceKey) %>%
map_df(~ hitmiss(.)) %>%
split(.$type) %>%
map(~ glm(hit ~ shotangle + bg + bg*shotangle + graphic + situation + lighting + glasses + visorhat,
data = dplyr::select(., -type, -file, -boxID), binomial(link = "logit")))
glmFits <- ALLmetaIMGFaces %>%
split(.$FaceKey) %>%
map_df(~ hitmiss(.)) %>%
split(.$type) %>%
map(~ glm(hit ~ shotangle + bg + bg*shotangle + graphic + situation + lighting + glasses + visorhat,
data = dplyr::select(., -type, -file, -boxID), binomial(link = "logit")))
glmFits%>% View()
glmFits %>% View()
glmFits <- ALLmetaIMGFaces %>%
split(.$FaceKey) %>%
map_df(~ hitmiss(.)) %>%
split(.$type) %>%
map(~ glm(hit ~ shotangle + bg + bg*shotangle + graphic + situation + lighting + glasses + visorhat, data = select(., -type, -file, -boxID), binomial(link = "logit")))
glmSummary <- glmFits %>%
map(~ rename(cbind(rownames_to_column(cbind(as.data.frame(coef(summary(.)))))), variable = rowname))
glmPlot <- do.call(rbind, Map(cbind, glmSummary, type = names(glmSummary)))
glmPlot
glmSummary
?`imager-package`
library(imager)
im <- imfill(5,5) #An image
im
Xc(im) #An image of the same size, containing the x coordinates of each pixel
Xc(im) %>% imrow(1)
Yc(im) %>% imrow(3) #y is constant along rows
Yc(im) %>% imcol(1)
plot(boats*(Xc(boats) < 100))
plot(boats*(Xc(boats) < 100))
plot(boats*(dnorm(Xc(boats),m=100,sd=30))) #Gaussian window
(Xc(boats) < 100)
plot((Xc(boats) < 100))
l100<-(Xc(boats) < 100)
crop.image(boats)
library(imager)
loc<- rbind( c(-106.5, 40.8),
c(-103.9, 37.5))
FR<- crop.image(RMelevation, loc)
image.plot( FR, col=terrain.colors(256))
temp<-  half.image( RMelevation)
temp<- half.image( temp)
library(fields)
install.packages("fields")
library(fields)
loc<- rbind( c(-106.5, 40.8),
c(-103.9, 37.5))
FR<- crop.image(RMelevation, loc)
image.plot( FR, col=terrain.colors(256))
data(RMelevation)
FR<- crop.image(RMelevation, loc)
image.plot( FR, col=terrain.colors(256))
image.plot(FR)
image.plot(RMelevation)
temp<-  half.image( RMelevation)
temp<- half.image( temp)
temp<-  average.image( RMelevation, Q=4)-> temp
image.plot( temp, col=terrain.colors(256))
x1p<- c(
-106.2017, -104.2418, -102.9182, -102.8163, -102.8927, -103.3254, -104.7763,
-106.5581, -108.2889, -109.1035, -109.3325, -108.7980)
x2p<- c(
43.02978, 42.80732, 41.89727, 40.84566, 39.81427, 38.17618, 36.53810, 36.29542,
36.90211, 38.29752, 39.45025, 41.02767)
xp<- cbind( x1p,x2p)
image.plot( temp)
polygon( xp[,1], xp[,2], lwd=2)
fullset<- make.surface.grid( list( x= temp$x, y= temp$y))
ind<-  in.poly( fullset,xp)
plot( fullset, pch=".")
polygon( xp[,1], xp[,2], lwd=2)
points( fullset[ind,], pch="o", col="red", cex=.5)
temp$z[!ind] <- NA
image.plot( temp)
polygon( xp[,1], xp[,2], lwd=2)
ind<- in.poly.grid( list( x= temp$x, y= temp$y), xp)
FR
image.plot(RMelevation)
image.plot(FR)
ALLmetaIMGFaces[1]
image.plot(FR)
ALLmetaIMGFaces[1]
ALLmetaIMGFaces[,1]
ALLmetaIMGFaces[1,]
ALLmetaIMGFaces[2,]
ALLmetaIMGFaces[2,] %>% View()
r2<-ALLmetaIMGFaces[2,] %>% View()
r2<-ALLmetaIMGFaces[2,]
loc<-rbind( c(r2$minX, r2$maxY),
c(r2$maxX, r2$minY))
FR<- crop.image(r2$file, loc)
image.plot(FR)
FR<- crop.image(r2[,file], loc)
r2$file
FR<- crop.image("2016_CT6_R01_GMonfils_FRA_vs_YSugita_JPN_MS137_clip.0023.png", loc)
typeof(RMelevation)
crop.image()
?crop.image
typeof("2016_CT6_R01_GMonfils_FRA_vs_YSugita_JPN_MS137_clip.0023.png")
?load.image
im <- load.image(paste0("images/", "2016_CT6_R01_GMonfils_FRA_vs_YSugita_JPN_MS137_clip.0023.png"))
im
im <- load.image(paste0("images/", ALLmetaIMGFaces$file[2,]))
im <- load.image(paste0("images/", ALLmetaIMGFaces$file[2]))
im
FR<- crop.image(im, loc)
RMelevation
im
View(im)
typeof(RMelevation)
?readbitmap
install.packages("readbitmap")
install.packages("readbitmap")
library(readbitmap)
i<-read.bitmap((paste0("images/", ALLmetaIMGFaces$file[2,]))
)
i<-read.bitmap((paste0("images/", ALLmetaIMGFaces$file[2])))
i
typeof(i)
image.plot(i)
library(fields)
r2<-ALLmetaIMGFaces[2,]
image.plot(i)
library(raster)
r <- raster(nrow=45, ncol=90)
r[] <- 1:ncell(r)
Subset the raster based on a define extent
e <- extent(-160, 10, 30, 60)
rc <- crop(r, e)
Plot results
par(mfrow=c(1,2))
plot(r)
plot(rc)
par(mfrow=c(1,2))
plot(r)
plot(rc)
plot(r)
r
?crop
im <- load.image(paste0("images/", ALLmetaIMGFaces$file[2,]))
library(imager)
im <- load.image(paste0("images/", ALLmetaIMGFaces$file[2]))
im
im[xpos, ypos, layer]
?imagemagick
??imagemagick
library(magick)
imsub(i,x < 30)
im <- load.image(paste0("images/", ALLmetaIMGFaces$file[2]))
imsub(im,x < 30)
subbb<-imsub(im,x < 30)
subbb
plot(subbb)
plot(subbb)
plot(subbb)
image.plot(subbb)
parrots.cp <- load.example("parrots")
plot(parrots.cp)
plot(parrots.cp)
plot(parrots.cp)
par(oma=c(5,7,1,1))
plot(parrots.cp)
graphics.off()
par("mar")
par(mar=c(1,1,1,1))
image.plot(subbb)
FR<- crop.image( , loc)
image.plot(i)
plot(parrots.cp)
library(magick)
tiger <- image_read((paste0("images/", ALLmetaIMGFaces$file[2]))
image_crop(image, "100x150+50")
tiger
tiger <- image_read((paste0("images/", ALLmetaIMGFaces$file[2]))
image_crop(image, "100x150+50")
tiger
tiger <- image_read((paste0("images/", ALLmetaIMGFaces$file[2]))
image_crop(image, "100x150+50")
tiger
ALLmetaIMGFaces$file[2]
tiger <- image_read("images/2016_CT6_R01_GMonfils_FRA_vs_YSugita_JPN_MS137_clip.0023.png", ))
tiger <- image_read("images/2016_CT6_R01_GMonfils_FRA_vs_YSugita_JPN_MS137_clip.0023.png")
tiger
image_crop(tiger, "100x150+50+50")
tiger <- image_read("images/2016_CT6_R01_GMonfils_FRA_vs_YSugita_JPN_MS137_clip.0023.png")
image_crop(tiger, "100x150+50+50")
tiger <- image_read("images/2016_CT6_R01_GMonfils_FRA_vs_YSugita_JPN_MS137_clip.0023.png")
tiger
paste0(ALLmetaIMGFaces$maxX[2]-ALLmetaIMGFaces$minX[2])
paste0(ALLmetaIMGFaces$maxX[2]-ALLmetaIMGFaces$minX[2], "x",ALLmetaIMGFaces$maxY[2]-ALLmetaIMGFaces$minY[2] )
paste0(ALLmetaIMGFaces$maxX[2]-ALLmetaIMGFaces$minX[2], "x",ALLmetaIMGFaces$maxY[2]-ALLmetaIMGFaces$minY[2] +,)
paste0(ALLmetaIMGFaces$maxX[2]-ALLmetaIMGFaces$minX[2], "x",ALLmetaIMGFaces$maxY[2]-ALLmetaIMGFaces$minY[2],+,)
paste0(ALLmetaIMGFaces$maxX[2]-ALLmetaIMGFaces$minX[2], "x",ALLmetaIMGFaces$maxY[2]-ALLmetaIMGFaces$minY[2],"+",)
?paste0
paste0(ALLmetaIMGFaces$maxX[2]-ALLmetaIMGFaces$minX[2], "x",ALLmetaIMGFaces$maxY[2]-ALLmetaIMGFaces$minY[2],"+", collapse = ", ")
paste0(ALLmetaIMGFaces$maxX[2]-ALLmetaIMGFaces$minX[2], "x",ALLmetaIMGFaces$maxY[2]-ALLmetaIMGFaces$minY[2],"+", ALLmetaIMGFaces$minX[2],"+", ALLmetaIMGFaces$maxY[2], collapse = ", ")
cropValue<-paste0(ALLmetaIMGFaces$maxX[2]-ALLmetaIMGFaces$minX[2], "x",ALLmetaIMGFaces$maxY[2]-ALLmetaIMGFaces$minY[2],"+", ALLmetaIMGFaces$minX[2],"+", ALLmetaIMGFaces$maxY[2], collapse = ", ")
image_crop(tiger, cropValue)
tiger <- image_read("images/2016_CT6_R01_GMonfils_FRA_vs_YSugita_JPN_MS137_clip.0023.png")
ALLmetaIMGFaces$file[2]
tiger
cropValue<-paste0(ALLmetaIMGFaces$maxX[2]-ALLmetaIMGFaces$minX[2], "x",ALLmetaIMGFaces$maxY[2]-ALLmetaIMGFaces$minY[2],"+", ALLmetaIMGFaces$minX[2],"+", ALLmetaIMGFaces$maxY[2], collapse = ", ")
image_crop(tiger, cropValue)
tiger
tiger <- image_read(paste0("images/", ALLmetaIMGFaces$file[2]))
tiger
ALLmetaIMGFaces$FaceID
duplicated(ALLmetaIMGFaces$FaceID)
sum(duplicated(ALLmetaIMGFaces$FaceID))
sum(duplicated(ALLmetaIMGFaces$FaceKey))
ALLmetaIMGFaces$FaceKey
GoogleFaces<-ALLmetaIMG %>% filter(type=="Google")
GoogleFaces<-ALLmetaIMG %>% subset(type=="Google")
ALLmetaIMG$
#create data set of just faces
tiger <- image_read(paste0("images/", ALLmetaIMGFaces$file[n]))
GoogleFaces
GoogleFaces<-ALLmetaIMG %>% subset(type=="Google") %>%View()
GoogleFaces<-ALLmetaIMGFaces %>% subset(type=="Google") %>%View()
sum(duplicated(GoogleFaces$FaceID))
GoogleFaces<-ALLmetaIMGFaces %>% subset(type=="Google")
tiger <- image_read(paste0("images/", GoogleFaces$file[n]))
n<-17
tiger <- image_read(paste0("images/", GoogleFaces$file[n]))
tiger
cropValue<-paste0(GoogleFaces$maxX[n]-GoogleFaces$minX[n], "x",GoogleFaces$maxY[n]-GoogleFaces$minY[n],"+", GoogleFaces$minX[n],"+", GoogleFaces$maxY[n], collapse = ", ")
paste0("face-", GoogleFaces$FaceID[n])<-image_crop(tiger, cropValue)
name<-paste0("face-", GoogleFaces$FaceID[n])
name
name<-image_crop(tiger, cropValue)
name
paste("face-", GoogleFaces$FaceID[n])<-image_crop(tiger, cropValue)
?rename
rename(name, paste("face-", GoogleFaces$FaceID[n]))
?gsub
assign(paste0("face-", GoogleFaces$FaceID[n]), image_crop(tiger, cropValue))
paste0("face-", GoogleFaces$FaceID[n])
face-18-1-Go
image_crop(tiger, cropValue)
assign(paste0("face-", GoogleFaces$FaceID[n]), name)
name<-image_crop(tiger, cropValue)
assign(paste0("face-", GoogleFaces$FaceID[n]), name)
GoogleFaces$maxX[n]-GoogleFaces$minX[n]
GoogleFaces$maxY[n]-GoogleFaces$minY[n]
GoogleFaces$minX[n]
GoogleFaces$maxY[n]
GoogleFaces$minY[n]
182+130
cropValue<-paste0(GoogleFaces$maxX[n]-GoogleFaces$minX[n], "x",GoogleFaces$maxY[n]-GoogleFaces$minY[n],"+", GoogleFaces$minX[n],"+", 312, collapse = ", ")
name<-image_crop(tiger, cropValue)
name
GoogleFaces$maxY[n]
n<-17
tiger
cropValue<-paste0(GoogleFaces$maxX[n]-GoogleFaces$minX[n], "x",GoogleFaces$maxY[n]-GoogleFaces$minY[n],"+", GoogleFaces$minX[n],"+", 450-GoogleFaces$maxY[n], collapse = ", ")
name<-image_crop(tiger, cropValue)
assign(paste0("face-", GoogleFaces$FaceID[n]), name)
tiger
cropValue<-paste0(GoogleFaces$maxX[n]-GoogleFaces$minX[n], "x",GoogleFaces$maxY[n]-GoogleFaces$minY[n],"+", GoogleFaces$minX[n],"+", 450-GoogleFaces$maxY[n], collapse = ", ")
name<-image_crop(tiger, cropValue)
name
cropValue<-paste0(GoogleFaces$maxX[n]-GoogleFaces$minX[n], "x",GoogleFaces$maxY[n]-GoogleFaces$minY[n],"+", GoogleFaces$minX[n],"+", 450-GoogleFaces$minY[n], collapse = ", ")
name<-image_crop(tiger, cropValue)
name
cropValue<-paste0(GoogleFaces$maxX[n]-GoogleFaces$minX[n], "x",GoogleFaces$maxY[n]-GoogleFaces$minY[n],"+", GoogleFaces$minX[n],"+", GoogleFaces$minY[n], collapse = ", ")
name<-image_crop(tiger, cropValue)
name
cropValue<-paste0(GoogleFaces$maxX[n]-GoogleFaces$minX[n]+20, "x",GoogleFaces$maxY[n]-GoogleFaces$minY[n],"+", GoogleFaces$minX[n],"+", GoogleFaces$minY[n], collapse = ", ")
name<-image_crop(tiger, cropValue)
name
cropValue<-paste0(GoogleFaces$maxX[n]-GoogleFaces$minX[n]+20, "x",GoogleFaces$maxY[n]-GoogleFaces$minY[n]+20,"+", GoogleFaces$minX[n]-10,"+", GoogleFaces$minY[n], collapse = ", ")
name<-image_crop(tiger, cropValue)
name
cropValue<-paste0(GoogleFaces$maxX[n]-GoogleFaces$minX[n]+20, "x",GoogleFaces$maxY[n]-GoogleFaces$minY[n]+20,"+", GoogleFaces$minX[n]-10,"+", GoogleFaces$minY[n]-10, collapse = ", ")
name<-image_crop(tiger, cropValue)
name
paste0("face-", GoogleFaces$FaceID[n])
paste("face-", GoogleFaces$FaceID[n])
paste0("face-", GoogleFaces$FaceID[n])
as.factor(paste0("face-", GoogleFaces$FaceID[n]))
as.factor(paste0("face-", GoogleFaces$FaceID[n]))<-name
typeof(as.factor(paste0("face-", GoogleFaces$FaceID[n])))
typeof(as.image(paste0("face-", GoogleFaces$FaceID[n])))
typeof(as.character(paste0("face-", GoogleFaces$FaceID[n])))
as.character(paste0("face-", GoogleFaces$FaceID[n]))<-name
myList<-GoogleFaces$FaceID
myList[n]
assign(myList[n], name)
myList[n]
assign(myList[n], name)
18-1-Go
assign(new, name)
name
typeof(name)
typeof(image_crop(tiger, cropValue))
str(name)
Cropped<-image_crop(tiger, cropValue)
image_write(Cropped, paste0("face-", GoogleFaces$FaceID[n]), ".png", collapse = ", "))
image_write(Cropped, paste0("face-", GoogleFaces$FaceID[n], ".png", collapse = ", "))
dir
dir()
image_write(Cropped, path=(paste0("face-", GoogleFaces$FaceID[n], ".png", collapse = ", ")))
dir()
?labelImage
??labelImage
print((paste0("face-", GoogleFaces$FaceID[n], ".png", collapse = ", "))
)
image_write(Cropped, path=(paste0("face-", GoogleFaces$FaceID[n], ".png", collapse = ", ")))
Cropped
data<-GoogleFaces
SubImage <- image_read(paste0("images/", data$file[n]))
cropValue<-paste0(data$maxX[n]-data$minX[n]+20, "x",data$maxY[n]-data$minY[n]+20,"+", data$minX[n]-10,"+", data$minY[n]-10, collapse = ", ")
Cropped<-image_crop(SubImage, cropValue)
image_write(Cropped, path=(paste0("images/Faces/","face-", data$FaceID[n], ".png", collapse = ", ")))
SubImage <- image_read(paste0("images/", data$file[n]))
cropValue<-paste0(data$maxX[n]-data$minX[n]+20, "x",data$maxY[n]-data$minY[n]+20,"+", data$minX[n]-10,"+", data$minY[n]-10, collapse = ", ")
Cropped<-image_crop(SubImage, cropValue)
image_write(Cropped, path=(paste0("images/Faces/","face-", data$FaceID[n], ".png", collapse = ", ")))
for(n in 1:NROW(GoogleFaces)){
SubImage <- image_read(paste0("images/", data$file[n]))
cropValue<-paste0(data$maxX[n]-data$minX[n]+20, "x",data$maxY[n]-data$minY[n]+20,"+", data$minX[n]-10,"+", data$minY[n]-10, collapse = ", ")
Cropped<-image_crop(SubImage, cropValue)
image_write(Cropped, path=(paste0("images/Faces/","face-", data$FaceID[n], ".png", collapse = ", ")))
}
