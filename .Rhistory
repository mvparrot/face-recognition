knitr::kable(GEexample[,25:28], digits=6, longtable=TRUE, booktabs = TRUE, col.names = c("neutral", "anger", "disgust",
"fear", "happiness", "sadness", "surprise"),
caption="The Skybiometry API provided 7 numerical values.")
knitr::kable(GEexample[,25:28], digits=6, longtable=TRUE, booktabs = TRUE, col.names = c("joy", "sorrow", "anger", "surprise"),
caption="The Skybiometry API provided 7 numerical values.")
GE <- read_csv("../data/GoogleFacesEmotions.csv")
GEexample <- GE %>% filter(FileName=="face-1745-1-Go.png")
knitr::kable(GEexample[,25:28], digits=6, longtable=TRUE, booktabs = TRUE, col.names = c("joy", "sorrow", "anger", "surprise"),
caption="The Google API provided 4 categorical Likelihoods.")
knitr::kable(GEexample[,25:28], longtable=TRUE, booktabs = TRUE, col.names = c("joy", "sorrow", "anger", "surprise"),
caption="The Google API provided 4 categorical Likelihoods.")
kable(GEexample[,25:28], longtable=TRUE, booktabs = TRUE, col.names = c("joy", "sorrow", "anger", "surprise"),
caption="The Google API provided 4 categorical Likelihoods.")
knitr::kable(GEexample[,25:28], longtable=TRUE, booktabs = TRUE, col.names = c("joy", "sorrow", "anger", "surprise"),
caption="The Google API provided 4 categorical Likelihoods.")
GEexample
knitr::kable(GEexample[, 25:28], booktabs = TRUE, col.names = c("joy", "sorrow", "anger", "surprise"),
caption="The Google API provided 4 categorical Likelihoods.")
knitr::kable(GEexample[, 25:28], col.names = c("joy", "sorrow", "anger", "surprise"),
caption="The Google API provided 4 categorical Likelihoods.")
knitr::kable(GEexample[, 25:28], col.names = c("joy", "sorrow", "anger", "surprise"), caption="The Google API provided 4 categorical Likelihoods.")
GEexample <- GEexample[, 25:28]
knitr::kable(GEexample, col.names = c("joy", "sorrow", "anger", "surprise"), caption="The Google API provided 4 categorical Likelihoods.")
GEexample <- GE %>% filter(FileName=="face-1745-1-Go.png")
GEexample <- GE %>% subset(FileName=="face-1745-1-Go.png")
#Mitchell O'Hara-Wild
#setwd() to your github repository before running
#In this repository, create a folder called "images" and store your images there.
workerID = ""
require(imager)
require(shiny)
require(shinyjs)
ui <- fluidPage(
useShinyjs(),
textOutput("info", h3),
plotOutput("plot1",
click = "plot_click",
dblclick = "plot_dblclick",
hover = "plot_hover",
brush = "plot_brush",
height="auto"
),# Partial example
conditionalPanel(
condition = "input.plot_brush",
#Face
h3("Face description"),
fluidRow(
column(4,
radioButtons("detect", label = h3("Detect Face"),
choices = list("Player" = 0,
"Other staff on court" = 1, "Fan" = 2, "None" = 3), selected = 0)
),
column(4,
radioButtons("obscured", label = h3("Face obscured"),
choices = list("Yes" = 1, "No" = 0), selected = 0)
),
column(4,
radioButtons("lighting", label = h3("Lighting"),
choices = list("Direct sunlight" = 0, "Shaded" = 1, "Partially shaded" = 2), selected = 0)
)
),
fluidRow(
column(4,
radioButtons("headangle", label = h3("Head angle"),
choices = list("Front on" = 0, "Back of head" = 1,
"Profile" = 2, "Other" = 3), selected = 0)
),
column(4,
radioButtons("glasses", label = h3("Glasses"),
choices = list("Yes" = 1, "No" = 0), selected = 0),
actionButton("cancelface", "Cancel")
),
column(4,
radioButtons("visorhat", label = h3("Visor/hat"),
choices = list("Yes" = 1, "No" = 0), selected = 0),
actionButton("nextface", "Save")
)
)
),
conditionalPanel(
condition = "!input.plot_brush",
#Scene
h3("Scene description"),
fluidRow(
column(4,
radioButtons("graphic", label = h3("2D Graphic"),
choices = list("Live image" = 0, "2D Graphic" = 1), selected = 0),
radioButtons("bg", label = h3("Background"),
choices = list("Crowd" = 0,
"Court" = 1, "Logo wall" = 2, "Not applicable" = 3), selected = 0)
),
column(4,
radioButtons("person", label = h3("Detectable Person"),
choices = list("Yes" = 1, "No" = 0), selected = 1),
radioButtons("shotangle", label = h3("Shot angle"),
choices = list("Level with players" = 0,
"Birds eye" = 1,
"Upward angle" = 2),selected = 0)
),
column(4,
radioButtons("situation", label = h3("Situation"),
choices = list("Court in play" = 0,
"Court player close-up" = 1,
"Court close-up not player" = 2,
"Crowd" = 3,
"Off court close up of player" = 4,
"Transition" = 4),selected = 0),
actionButton("nextimg", "Next image")
)
)
)
)
server <- function(input, output, session) {
if(!("images" %in% dir())){
stop("Use setwd() to the github repository, with images in a folder called 'images'")
}
v <- try(
reactiveValues(imagelist = dir("images")[-match(unique(na.omit(read.csv("ManualClassifiedScenes.csv")[,"file"])), dir("images"))],
counter = 0,
facedata = rep(NA, 11),
saveddataface = read.csv(paste0("ManualClassifiedFaces", workerID, ".csv")),
saveddatascene = read.csv(paste0("ManualClassifiedScenes", workerID, ".csv")))
)
if(class(v) == "try-error"){
message("WARNING: Previously classified images not found.")
v <- reactiveValues(imagelist = dir("images"),
counter = 0,
facedata = rep(NA, 11),
saveddataface = NULL,
saveddatascene = NULL)
}
if(isolate(length(v$imagelist)) == 0){
message("NOTE: Starting new classification")
v <- reactiveValues(imagelist = dir("images"),
counter = 0,
facedata = rep(NA, 11),
saveddataface = read.csv(paste0("ManualClassifiedFaces", workerID, ".csv")),
saveddatascene = read.csv(paste0("ManualClassifiedScenes", workerID, ".csv")))
}
observe({
#If you click submit
input$nextimg
#Save data to disk
isolate({
#Skip first run
if(v$counter > 0){
newSceneData <- data.frame(file=v$imagelist[v$counter], graphic = input$graphic, person = input$person, situation = input$situation, bg = input$bg, shotangle=input$shotangle)
v$saveddatascene <<- rbind(v$saveddatascene, newSceneData)
if(NCOL(v$facedata) > 1){ #If at least one entry
v$facedata <<- as.data.frame(v$facedata)[-1,] #Remove NA row
if(NROW(v$facedata)>0){
v$facedata <<- cbind(file=v$imagelist[v$counter], v$facedata) #add file name
}
v$saveddataface <<- rbind(v$saveddataface, v$facedata) #add to data
}
#Save scene info
write.csv(v$saveddatascene, file=paste0("ManualClassifiedScenes", workerID, ".csv"), row.names = FALSE)
write.csv(v$saveddatascene, file=paste0("datahistory/ManualClassifiedScenes", workerID, "_", Sys.Date(), ":", as.POSIXlt(Sys.time())$hour, ".csv"), row.names = FALSE)
#Save face info
if(!is.null(v$saveddataface)){
write.csv(v$saveddataface, file=paste0("ManualClassifiedFaces", workerID, ".csv"), row.names = FALSE)
write.csv(v$saveddataface, file=paste0("datahistory/ManualClassifiedFaces", workerID, "_", Sys.Date(), ":", as.POSIXlt(Sys.time())$hour, ".csv"), row.names = FALSE)
}
#v$imagedata <- rep(NA, 4)
v$facedata <- rep(NA, 11)
}
v$counter <<- v$counter + 1 #change image
})
})
output$plot1 <- renderPlot({
plot(load.image(paste0("images/", v$imagelist[v$counter])))
#print(imagelist[v$counter])
#Add lines
if(!all(is.na(v$facedata))){
for(i in 2:NROW(v$facedata)){
lines(c(rep(v$facedata[i,"xmin"], 2), rep(v$facedata[i,"xmax"], 2), v$facedata[i,"xmin"]),
c(v$facedata[i,"ymin"], rep(v$facedata[i,"ymax"], 2), rep(v$facedata[i,"ymin"],2)) ,col="green")
}
}},
height = function() {
session$clientData$output_plot1_width*(450/800)
}
)
observe({
input$nextface
#Remove brush from img
runjs("document.getElementById('plot1_brush').remove()")
#Save data
isolate({
newFaceData <- c(facecounter=ifelse(is.null(nrow(v$facedata)), 1, nrow(v$facedata)), xmin=input$plot_brush$xmin, xmax=input$plot_brush$xmax, ymin=input$plot_brush$ymin, ymax=input$plot_brush$ymax,
detect=input$detect, obscured=input$obscured, lighting=input$lighting,
headangle=input$headangle, glasses=input$glasses, visorhat=input$visorhat)
if(length(newFaceData) > 7){
v$facedata <<- rbind(v$facedata,newFaceData)
}
})
})
observe({
input$cancelface
#Remove brush from img
runjs("document.getElementById('plot1_brush').remove()")
})
output$info <- renderText({
paste0("Image ", v$counter, "/", length(v$imagelist), " (", v$imagelist[v$counter], ")")
})
}
shinyApp(ui, server)
runApp('C:/Users/steff/Downloads/for_usb/for_usb/sea_level')
install.packages("ggthemes")
runApp('C:/Users/steff/Downloads/for_usb/for_usb/sea_level')
install.packages("viridis")
install.packages("ggmap")
shiny::runApp()
knitr::opts_chunk$set(echo = TRUE)
library(ggmap)
get_lonlat <- function(pc) {
loc <- geocode(paste0("Vic, ", pc))
return(loc)
}
get_lonlat("3000")
install.packages("tufte")
library(tidyverse)
library(tidyverse)
library(readr)
library(GGally)
ME <- read_csv("data/MicrosoftEmotions.csv")
ME <- read_csv("..data/MicrosoftEmotions.csv")
ME <- read_csv("data/MicrosoftEmotions.csv")
SB<-read_csv("data/SkybiometryEmotions.csv")
GE<- read_csv("SoftwareRequestScripts/GoogleClassifiedFaces.csv")
GE <- read_csv("data/GoogleFacesEmotions.csv")
EmotionSoftwareSpecs<-read_csv("TableCSVs/EmotionSoftwareSpecifications.csv")
SB<-SB %>%
rowwise %>%
mutate(z = sumf(c(anger.confidence, disgust.confidence, fear.confidence, happiness.confidence, neutral_mood.confidence, sadness.confidence, surprise.confidence,  na.rm=T)))
SB<-SB %>%
rowwise %>% mutate(z = (anger.confidence+
disgust.confidence+
fear.confidence+
happiness.confidence+
neutral_mood.confidence+
sadness.confidence+
surprise.confidence))
SB<-SB %>%
mutate(anger = anger.confidence/z,
disgust = disgust.confidence/z,
fear = fear.confidence/z,
happiness = happiness.confidence/z,
neutral = neutral_mood.confidence/z,
sadness = sadness.confidence/z,
surprise = surprise.confidence/z)
knitr::kable(EmotionSoftwareSpecs, longtable=TRUE, booktabs = TRUE, caption="This details the capabilities we considered important in recognising emotions in images of faces.")
EmotionSoftwareSpecs<-read_csv("Figures/EmotionSoftwareSpecifications.csv")
knitr::kable(EmotionSoftwareSpecs, longtable=TRUE, booktabs = TRUE, caption="This details the capabilities we considered important in recognising emotions in images of faces.")
GE[706,c(1,10:13)]
SB[6,1:19]
ME[6,1:9]
ME$FileName[25, ]
ME$FileName[25]
MEexample <- ME %>% subset(FileName=="face-1745-1-Go.png")
knitr::kable(MEexample[2:9], longtable=TRUE, booktabs = TRUE, caption="The Microsoft API provided 7 numerical values, one for each emotion.")
knitr::kable(MEexample[2:9], digits=6, longtable=TRUE, booktabs = TRUE, caption="The Microsoft API provided 7 numerical values, one for each emotion.")
knitr::kable(MEexample[2:9], digits=7, longtable=TRUE, booktabs = TRUE, caption="The Microsoft API provided 7 numerical values, one for each emotion.")
knitr::kable(MEexample[2:9], digits=6, longtable=TRUE, booktabs = TRUE, caption="The Microsoft API provided 7 numerical values, one for each emotion.")
SBexample <- SB %>% subset(FileName=="face-1745-1-Go.png")
SBexample <- SB %>% subset(aname=="face-1745-1-Go.png")
SBexample <- SB %>% subset(aname=="face-1745-1-Go.png") %>% select(ends_with(".confidence"))
knitr::kable(SBexample[3:9], digits=6, longtable=TRUE, booktabs = TRUE, caption="The Skybiometry API provided 7 numerical values, one for each emotion.")
knitr::kable(SBexample[3:9], digits=6, longtable=TRUE, booktabs = TRUE,
col.names = c("neutral", "anger", "disgust", "fear",
"happiness", "sadness", "suprise"),
caption="The Skybiometry API provided 7 numerical values, one for each emotion.")
GEexample <- GE %>% subset(FileName=="face-1745-1-Go.png") %>% select(ends_with("Likelihood"))
knitr::kable(GEexample, digits=6, longtable=TRUE, booktabs = TRUE,
col.names = c("neutral", "anger", "disgust", "fear",
"happiness", "sadness", "suprise"),
caption="The Skybiometry API provided 7 numerical Confidence values, one for each emotion.")
knitr::kable(GEexample, digits=6, longtable=TRUE, booktabs = TRUE,
col.names = c("joy", "sorrow", "anger", "suprise"),
caption="The Skybiometry API provided 7 numerical Confidence values, one for each emotion.")
SBT <- SB %>% subset(aname=="face-1745-1-Go.png")
colnames(SBT)
SBT <- SB %>% subset(aname=="face-1745-1-Go.png") %>% select("neutral", "anger", "disgust", "fear", "happiness", "sadness", "suprise")
SBT <- SB %>% subset(aname=="face-1745-1-Go.png") %>% select(neutral, "anger", "disgust", "fear", "happiness", "sadness", "suprise")
SBT <- SB %>% subset(aname=="face-1745-1-Go.png") %>% select(neutral, anger, disgust, fear, happiness, sadness, suprise)
SBT <- SB %>% subset(aname=="face-1745-1-Go.png") %>% select(neutral, anger, disgust, fear, happiness, sadness, surprise)
SBT
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE)
library(tidyverse)
library(readr)
library(GGally)
#Read in data files
ME <- read_csv("data/MicrosoftEmotions.csv")
SB <- read_csv("data/SkybiometryEmotions.csv")
GE <- read_csv("data/GoogleFacesEmotions.csv")
EmotionSoftwareSpecs<-read_csv("Figures/EmotionSoftwareSpecifications.csv")
#Create normalised SB values
SB<-SB %>%
rowwise %>% mutate(z = (anger.confidence+
disgust.confidence+
fear.confidence+
happiness.confidence+
neutral_mood.confidence+
sadness.confidence+
surprise.confidence))
SB<-SB %>%
mutate(anger = anger.confidence/z,
disgust = disgust.confidence/z,
fear = fear.confidence/z,
happiness = happiness.confidence/z,
neutral = neutral_mood.confidence/z,
sadness = sadness.confidence/z,
surprise = surprise.confidence/z)
LT <- rbind(Likelihood, Value)
Likelihood <-c("VERY_UNLIKELY", "UNLIKELY", "POSSIBLE", "LIKELY", "VERY_LIKELY")
Value <- c(0.1, 0.3, 0.5, 0.7, 0.9)
LT <- rbind(Likelihood, Value)
knitr::kable(LT, longtable=TRUE, booktabs = TRUE,
caption=".")
LT
LT <- cbind(Likelihood, Value)
knitr::kable(LT, longtable=TRUE, booktabs = TRUE,
caption=".")
LT <- cbind(-Likelihood, -Value)
library(imager)
ggplot(load.image("Faces/face-399-1-Go.png")
ggplot(load.image("Faces/face-399-1-Go.png"))
plot(load.image("Faces/face-399-1-Go.png"))
i1<-load.image("Faces/face-399-1-Go.png")
i1
typeof(img)
typeof(i1)
plot(i1, axes = F)
i1<-as.data.frame(load.image("Faces/face-399-1-Go.png"))
ggplot(i1, aes(x,y))+geom_raster(aes(fill=value))
ggplot(i1, aes(x,y))+geom_raster()
i1<-load.image("Faces/face-399-1-Go.png")
plot(i1, axes=F)
plot(i1,xlim = )
i1
i1$Width
i1<-load.image("Faces/face-1260-1-Go.png")
i1
i<-"face-1260-1-Go.png"
img <- image_read(paste0("Faces/", i))
image_read
??image_read
library(magick)
img <- image_read(paste0("Faces/", i))
img
img <- image_read(paste0("Faces/", i))
p <- ggplot(data.frame(x=c(0,350), y=c(0,350)), aes(x,y))+
theme_void()+ coord_fixed()+
annotation_custom(rasterGrob(img)) +
coord_cartesian(xlim=c(0, 350), ylim=c(0,350))
??rasterGrob
library(grid)
p <- ggplot(data.frame(x=c(0,350), y=c(0,350)), aes(x,y))+
theme_void()+ coord_fixed()+
annotation_custom(rasterGrob(img)) +
coord_cartesian(xlim=c(0, 350), ylim=c(0,350))
p
p <- ggplot(data.frame(x=c(0,350), y=c(0,350)), aes(x,y))+
theme_void()+
annotation_custom(rasterGrob(img)) +
coord_cartesian(xlim=c(0, 350), ylim=c(0,350))
p
plotFaces <- function(imgList){
for(i in imgList){
img <- image_read(paste0("Faces/", i))
p <- ggplot(data.frame(x=c(0,350), y=c(0,350)), aes(x,y))+
theme_void()+
annotation_custom(rasterGrob(img)) +
coord_cartesian(xlim=c(0, 350), ylim=c(0,350))
}
print(p)
}
plotFaces("face-1260-1-Go.png")
f1 <- plotFaces("face-1635-1-Go.png")
f4 <- plotFaces("face-626-1-Go.png")
grid.arrange(f1, f2, f3, f4, f5, f6)
library(gridExtra)
grid.arrange(f1, f2, f3, f4, f5, f6, nrow=2)
f1 <- plotFaces("face-1635-1-Go.png")
f2 <- plotFaces("face-1128-1-Go.png")
f3 <- plotFaces("face-1746-1-Go.png")
f4 <- plotFaces("face-626-1-Go.png")
f5 <- plotFaces("face-450-1-Go.png")
f6 <- plotFaces("face-816-1-Go.png")
grid.arrange(f1, f2, f3, f4, f5, f6, nrow=2)
plotFaces <- function(imgList){
for(i in imgList){
img <- image_read(paste0("Faces/", i))
p <- ggplot(data.frame(x=c(0,350), y=c(0,350)), aes(x,y))+
theme_void()+
annotation_custom(rasterGrob(img)) +
coord_cartesian(xlim=c(0, 350), ylim=c(0,350))
}
return(p)
}
f1 <- plotFaces("face-1635-1-Go.png")
f2 <- plotFaces("face-1128-1-Go.png")
f3 <- plotFaces("face-1746-1-Go.png")
f4 <- plotFaces("face-626-1-Go.png")
f5 <- plotFaces("face-450-1-Go.png")
f6 <- plotFaces("face-816-1-Go.png")
grid.arrange(f1, f2, f3, f4, f5, f6,
nrow=2)
?grid.arrange
grid.arrange(f1, f2, f3, f4, f5, f6, padding= 1,nrow=2)
plotFaces <- function(imgList){
for(i in imgList){
img <- image_read(paste0("Faces/", i))
p <- ggplot(data.frame(x=c(0,350), y=c(0,350)), aes(x,y))+
theme_void()+
annotation_custom(rasterGrob(img)) +
coord_cartesian(xlim=c(0, 350), ylim=c(0,400))
}
return(p)
}
f1 <- plotFaces("face-1635-1-Go.png")
f2 <- plotFaces("face-1128-1-Go.png")
f3 <- plotFaces("face-1746-1-Go.png")
f4 <- plotFaces("face-626-1-Go.png")
f5 <- plotFaces("face-450-1-Go.png")
f6 <- plotFaces("face-816-1-Go.png")
grid.arrange(f1, f2, f3, f4, f5, f6,nrow=2)
grid.arrange(f1, f2, f3, f4, f5, f6,nrow=2)
library(ggplot2)
grid.arrange(f1, f2, f3, f4, f5, f6,nrow=2)
plotFaces <- function(imgList){
for(i in imgList){
img <- image_read(paste0("Faces/", i))
p <- ggplot(data.frame(x=c(0,350), y=c(0,350)), aes(x,y))+
# theme_void()+
annotation_custom(rasterGrob(img)) +
coord_cartesian(xlim=c(0, 350), ylim=c(0,400))
}
return(p)
}
f1 <- plotFaces("face-1635-1-Go.png")
f2 <- plotFaces("face-1128-1-Go.png")
f3 <- plotFaces("face-1746-1-Go.png")
f4 <- plotFaces("face-626-1-Go.png")
f5 <- plotFaces("face-450-1-Go.png")
f6 <- plotFaces("face-816-1-Go.png")
grid.arrange(f1, f2, f3, f4, f5, f6,nrow=2)
plotFaces <- function(imgList){
for(i in imgList){
img <- image_read(paste0("Faces/", i))
p <- ggplot(data.frame(x=c(0,350), y=c(0,350)), aes(x,y))+
theme_classic() +
annotation_custom(rasterGrob(img)) +
coord_cartesian(xlim=c(0, 350), ylim=c(0,400))
}
return(p)
}
f1 <- plotFaces("face-1635-1-Go.png")
f2 <- plotFaces("face-1128-1-Go.png")
f3 <- plotFaces("face-1746-1-Go.png")
f4 <- plotFaces("face-626-1-Go.png")
f5 <- plotFaces("face-450-1-Go.png")
f6 <- plotFaces("face-816-1-Go.png")
grid.arrange(f1, f2, f3, f4, f5, f6,nrow=2)
plotFaces <- function(imgList){
for(i in imgList){
img <- image_read(paste0("Faces/", i))
p <- ggplot(data.frame(x=c(0,350), y=c(0,350)), aes(x,y))+
theme_classic(xlab("")) +
annotation_custom(rasterGrob(img)) +
coord_cartesian(xlim=c(0, 350), ylim=c(0,400))
}
return(p)
}
f1 <- plotFaces("face-1635-1-Go.png")
plotFaces <- function(imgList){
for(i in imgList){
img <- image_read(paste0("Faces/", i))
p <- ggplot(data.frame(x=c(0,350), y=c(0,350)), aes(x,y))+
theme_classic() + xlab("") +
annotation_custom(rasterGrob(img)) +
coord_cartesian(xlim=c(0, 350), ylim=c(0,400))
}
return(p)
}
f1 <- plotFaces("face-1635-1-Go.png")
f2 <- plotFaces("face-1128-1-Go.png")
f3 <- plotFaces("face-1746-1-Go.png")
f4 <- plotFaces("face-626-1-Go.png")
f5 <- plotFaces("face-450-1-Go.png")
f6 <- plotFaces("face-816-1-Go.png")
grid.arrange(f1, f2, f3, f4, f5, f6,nrow=2)
??grid.arrange
plotFaces <- function(imgList){
for(i in imgList){
img <- image_read(paste0("Faces/", i))
p <- ggplot(data.frame(x=c(0,350), y=c(0,350)), aes(x,y))+
theme_void() + #xlab("") + ylab("") +
annotation_custom(rasterGrob(img)) +
coord_cartesian(xlim=c(0, 350), ylim=c(0,400))
}
return(p)
}
f1 <- plotFaces("face-1635-1-Go.png")
f2 <- plotFaces("face-1128-1-Go.png")
f3 <- plotFaces("face-1746-1-Go.png")
f4 <- plotFaces("face-626-1-Go.png")
f5 <- plotFaces("face-450-1-Go.png")
f6 <- plotFaces("face-816-1-Go.png")
grid.arrange(f1, f2, f3, f4, f5, f6,nrow=2, padding = unit(0.5, "line"))
??grid.arrange
shiny::runApp('C:/Users/steff/Downloads/for_usb/for_usb/sea_level')
