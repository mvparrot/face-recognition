SBP1$Emotion <- as.factor(SBP1$Emotion)
MEP1 <- MEP %>%
filter(!is.na(anger)) %>%
group_by(FileName) %>%
gather(key = Emotion, value=EmotionValue,
anger,contempt,disgust,fear,happiness,neutral,sadness,surprise)  %>%
arrange(FileName, desc(EmotionValue)) %>%
group_by_(~ FileName) %>%
slice(1)
MEP1$Emotion <- as.factor(MEP1$Emotion)
S4 <- select(SBP, FileName = aname, Skybiometry = neutral)
S5 <- select(MEP, FileName, Microsoft = neutral)
S6 <- select(GEP, FileName, Google = neutral)
J3 <- full_join(S4, S5, by = "FileName")
J4 <- full_join(J3, S6, by = "FileName")
ModelTable <- function(model){
model %>%
summary %>%
coef %>%
as.data.frame %>%
cbind %>%
rownames_to_column %>%
cbind %>%
dplyr::rename(variable = rowname)
}
SignificancePlot <- function(model, data = GlmModelEstimates(model)) {
data %>%
mutate(significant = `Pr(>|z|)` < 0.05) %>%
mutate(`Pr(<|z|)` = 1 - `Pr(>|z|)`) %>%
ggplot(aes(x=variable, y=`Pr(<|z|)`)) +
theme(axis.text.x = element_text(angle = 30, hjust = 1)) +
geom_col(aes(fill=significant))
}
EstimatesPlot <- function(model, data = GlmModelEstimates(model)) {
data %>%
mutate(significant = `Pr(>|z|)` < 0.05) %>%
ggplot(aes(x=variable, y=Estimate)) +
theme(axis.text.x = element_text(angle = 30, hjust = 1),
axis.text.y = element_text(angle = 30, hjust = 1)) +
geom_col(aes(fill=significant))
}
ModelPlotResults<-function(model, data = ModelTable(model)){
ep<-EstimatesPlot(model, data)
sp<- SignificancePlot(model, data)
grid.arrange(ep, sp, nrow=1)
}
img <- image_read("Figures/2016_CT6_R01_JMillman_AUS_vs_DSchwartzman_ARG_MS159_clip.0013.png")
p <- ggplot() + theme_void() + annotation_custom(rasterGrob(img)) +
coord_cartesian(xlim=c(0, 800), ylim=c(0,450))
p
knitr::kable(EmotionSoftwareSpecs, longtable=TRUE, booktabs = TRUE, caption="This table details the capabilities that were considered in contrasting the accessibility and outputs of APIs that recognise emotions in images of faces.")
plotFaces <- function(imgList){
for(i in imgList){
img <- image_read(paste0("Faces/", i))
p <- ggplot(data.frame(x=c(0,350), y=c(0,350)), aes(x,y))+
theme_void() +
annotation_custom(rasterGrob(img)) +
coord_cartesian(xlim=c(0, 350), ylim=c(0,400))
}
return(p)
}
TableEmotions <- function(imgList){
for(i in imgList){
d <- DE %>% filter(FileName== i)
dl <- d %>%
select(Skybiometry = Skybiometry, Microsoft = Microsoft, Google = Google) %>%
gather(key = Software, value = Emotion, Microsoft, Skybiometry, Google)
t <- tableGrob(dl, theme = ttheme_minimal(core=list(fg_params=list(hjust=0, x=0.1)),rowhead=list(fg_params=list(hjust=0, x=0))), rows = c("", "", ""))
}
return(t)
}
#Faces
f1 <- "face-1635-1-Go.png"
f2 <- "face-1128-1-Go.png"
f3 <- "face-1746-1-Go.png"
i1 <- plotFaces(f1)
i2 <- plotFaces(f2)
i3 <- plotFaces(f3)
# Tables of their resulting emotion value
t1 <- TableEmotions(f1)
t2 <- TableEmotions(f2)
t3 <- TableEmotions(f3)
#f4 <- "face-626-1-Go.png"
#f5 <- "face-450-1-Go.png"
#f6 <- "face-816-1-Go.png"
grid.arrange(i1, i2, i3, t1, t2, t3, nrow=2)
MEexample <- ME %>% subset(FileName=="face-1635-1-Go.png")
MEexample <- lapply(MEexample[2:9], function(x){replace(x, x <0.001,0)})
knitr::kable(as.data.frame(MEexample),longtable=TRUE, booktabs = TRUE, digits=3, format.args = list(nsmall=3, digits=3, scientific=FALSE), caption="The Microsoft API provided eight numerical values, one for each emotion.")
SBexample <- SB %>% subset(aname=="face-1635-1-Go.png") %>% select(ends_with(".confidence"))
knitr::kable(SBexample[3:9], longtable=TRUE, booktabs = TRUE,col.names = c("neutral", "anger", "disgust", "fear", "happiness", "sadness", "surprise"),
caption="The Skybiometry API provided seven numerical Confidence values, one for each emotion.")
GEexample <- GE %>% subset(FileName=="face-1635-1-Go.png") %>% select(ends_with("Likelihood"))
knitr::kable(GEexample, longtable=TRUE, booktabs = TRUE,
col.names = c("happiness", "sadness", "anger", "surprise"),
caption="The Google Vision API provided four likelihood possibilities, one for each emotion.")
SBT <- SB %>% subset(aname=="face-1635-1-Go.png") %>% select(neutral, anger, disgust, fear, happiness, sadness, surprise)
SBTexample <- lapply(SBT, function(x){replace(x, x <0.001,0)})
knitr::kable(as.data.frame(SBTexample), longtable=TRUE, booktabs = TRUE, digits=3, caption="The Skybiometry API provided 7 numerical Confidence values, one for each emotion.")
Likelihood <-c("VERY_UNLIKELY", "UNLIKELY", "POSSIBLE", "LIKELY", "VERY_LIKELY")
Value <- c(10, 30, 50, 70, 90)
LT <- cbind(Likelihood, Value)
pander(LT, caption="")
GET <- GEP %>% subset(FileName=="face-1635-1-Go.png") %>%
select(happiness, sadness, anger, surprise, neutral)
GETexample <- lapply(GET, function(x){replace(x, x <0.001,0)})
knitr::kable(as.data.frame(GETexample), longtable=TRUE, booktabs = TRUE, digits=3, caption="The Google Vision API provided five proportions, one for each emotion and a neutral category.")
J4 <- J4 %>% rowwise() %>%
mutate(Gna = ifelse(!is.na(Google), TRUE, FALSE)) %>%
mutate(Sna = ifelse(!is.na(Skybiometry), TRUE, FALSE)) %>%
mutate(Mna = ifelse(!is.na(Microsoft), TRUE, FALSE))
#Gneu <- DE %>% filter(is.na(Microsoft) & is.na(Skybiometry))
#table(Gneu$Google)
nfft<-ftable(J4$Gna, J4$Mna, J4$Sna, dnn = c("Google", "Microsoft", "Skybiometry"))
stargazer(format(nfft, quote=FALSE, justify="right"),title = "Emotion results were found by all three APIs for 364 common faces, none of the APIs produced results for 10 player faces. Google was able to produce 382 results that Skybiometry and Microsoft did not.", header=FALSE, type="latex")
gganG <- ggplot(GEP, aes(x=anger)) +
geom_histogram(binwidth=0.055, aes(y=..count../sum(..count..))) +
coord_cartesian(xlim = c(0,1), ylim = c(0,1)) + ylab("")
ggjoG <- ggplot(GEP, aes(x=happiness)) +
geom_histogram(binwidth=0.055, aes(y=..count../sum(..count..))) +
coord_cartesian(xlim = c(0,1), ylim = c(0,1)) + ylab("")
ggneG <- ggplot(GEP, aes(x=neutral)) +
geom_histogram(binwidth=0.055, aes(y=..count../sum(..count..))) +
coord_cartesian(xlim = c(0,1), ylim = c(0,1)) + ylab("")
ggsoG <- ggplot(GEP, aes(x=sadness)) +
geom_histogram(binwidth=0.055, aes(y=..count../sum(..count..))) +
coord_cartesian(xlim = c(0,1), ylim = c(0,1)) + ylab("")
ggsuG <- ggplot(GEP, aes(x=surprise)) +
geom_histogram(binwidth=0.055, aes(y=..count../sum(..count..))) +
coord_cartesian(xlim = c(0,1), ylim = c(0,1)) + ylab("")
grid.arrange(gganG,ggjoG,ggneG,ggsoG,ggsuG,nrow=2,
top=textGrob("Google Distribution of Emotion Porportions",
gp=gpar(fontsize=20,font=3)),
left = ("Percentage of Emotion values"))
gganS <- ggplot(SBP, aes(x=anger))+  geom_histogram(binwidth=0.055, aes(y=..count../sum(..count..))) +coord_cartesian(xlim = c(0,1), ylim = c(0,1)) + ylab("")
gghaS <- ggplot(SBP, aes(x=happiness))+  geom_histogram(binwidth=0.055, aes(y=..count../sum(..count..))) +coord_cartesian(xlim = c(0,1), ylim = c(0,1)) + ylab("")
ggneS <- ggplot(SBP, aes(x=neutral))+  geom_histogram(binwidth=0.055, aes(y=..count../sum(..count..))) +coord_cartesian(xlim = c(0,1), ylim = c(0,1)) + ylab("")
ggsaS <- ggplot(SBP, aes(x=sadness))+  geom_histogram(binwidth=0.055, aes(y=..count../sum(..count..))) +coord_cartesian(xlim = c(0,1), ylim = c(0,1)) + ylab("")
ggsuS <- ggplot(SBP, aes(x=surprise))+  geom_histogram(binwidth=0.055, aes(y=..count../sum(..count..))) +coord_cartesian(xlim = c(0,1), ylim = c(0,1)) + ylab("")
ggdiS <- ggplot(SBP, aes(x=disgust))+  geom_histogram(binwidth=0.055, aes(y=..count../sum(..count..))) +coord_cartesian(xlim = c(0,1), ylim = c(0,1)) + ylab("")
ggfeS <- ggplot(SBP, aes(x=fear))+  geom_histogram(binwidth=0.055, aes(y=..count../sum(..count..))) +coord_cartesian(xlim = c(0,1), ylim = c(0,1)) + ylab("")
grid.arrange(gganS, gghaS, ggneS, ggsaS, ggsuS, ggdiS, ggfeS,nrow=3,
top=textGrob("Skybiometry Distribution of Emotion Porportions",gp=gpar(fontsize=20,font=3)),
left = ("Percentage of Emotion values"))
gganM <- ggplot(MEP, aes(x=anger)) +  geom_histogram(binwidth=0.055, aes(y=..count../sum(..count..))) + coord_cartesian(xlim = c(0,1), ylim = c(0,1)) + ylab("")
gghaM <- ggplot(MEP, aes(x=happiness)) +  geom_histogram(binwidth=0.055, aes(y=..count../sum(..count..))) + coord_cartesian(xlim = c(0,1), ylim = c(0,1)) + ylab("")
ggneM <- ggplot(MEP, aes(x=neutral)) +  geom_histogram(binwidth=0.055, aes(y=..count../sum(..count..))) + coord_cartesian(xlim = c(0,1), ylim = c(0,1)) + ylab("")
ggsaM <- ggplot(MEP, aes (x=sadness)) +  geom_histogram(binwidth=0.055, aes(y=..count../sum(..count..))) + coord_cartesian(xlim = c(0,1), ylim = c(0,1)) + ylab("")
ggsuM <- ggplot(MEP, aes(x=surprise)) +  geom_histogram(binwidth=0.055, aes(y=..count../sum(..count..))) + coord_cartesian(xlim = c(0,1), ylim = c(0,1)) + ylab("")
ggdiM <- ggplot(MEP, aes(x=disgust)) +  geom_histogram(binwidth=0.055, aes(y=..count../sum(..count..))) + coord_cartesian(xlim = c(0,1), ylim = c(0,1)) + ylab("")
ggfeM <- ggplot(MEP, aes(x=fear)) +  geom_histogram(binwidth=0.055, aes(y=..count../sum(..count..))) + coord_cartesian(xlim = c(0,1), ylim = c(0,1)) + ylab("")
ggcoM <- ggplot(MEP, aes(x=contempt)) +  geom_histogram(binwidth=0.055, aes(y=..count../sum(..count..))) + coord_cartesian(xlim = c(0,1), ylim = c(0,1)) + ylab("")
grid.arrange(gganM, gghaM, ggneM, ggsaM, ggsuM, ggdiM, ggfeM, ggcoM,nrow=3,top=textGrob("Microsoft Distribution of Emotion Porportions", gp=gpar(fontsize=20,font=3)), left =("Percentage of Emotion values"))
#Table including Google
#ftable(DE$Google, DE$Skybiometry, DE$Microsoft, dnn = c("Google", "Skybiometry", "Microsoft"))
DE$MEmotion <- factor(DE$Microsoft,
levels =c("neutral", "anger", "happiness", "sadness", "surprise"))
DE$Skybiometry <- factor(DE$Skybiometry,
levels =c("neutral", "anger", "happiness", "sadness", "surprise"))
PGneu <- subset(DE, DE$Google=="neutral")
PGneut <- table(PGneu$Microsoft, PGneu$Skybiometry, dnn = c("Microsoft","Skybiometry"), useNA="always")
pander(PGneut, style = "rmarkdown",
caption="Where Google provided the Emotional Result of Neutral; Microsoft associated high neutral values with many of these faces, however Skybiometry only classifed 3 of these faces as neutral.")
DE$Microsoft <- factor(DE$Microsoft,
levels =c("neutral", "happiness"))
PGjoy <- subset(DE, DE$Google=="joy")
PGjoyt<-table(PGjoy$Microsoft, PGjoy$Skybiometry, dnn = c("Microsoft","Skybiometry"), useNA="always")
pander(PGjoyt, style = "rmarkdown", caption="Where Google provided the Emotional Result of Joy. The most common Skybiometry response was ")
DE$MMicrosoft <- factor(DE$Microsoft,
levels =c("neutral"))
PGang <- subset(DE, DE$Google=="anger")
PGangt<-table(PGang$Microsoft, PGang$Skybiometry, dnn = c("Microsoft","Skybiometry"), useNA="always")
pander(PGangt, style = "rmarkdown", caption="Where Google provided the Emotional Result of Anger")
DE$Microsoft <- factor(DE$Microsoft,
levels =c("anger", "disgust", "happiness","neutral",  "sadness","surprise"))
DEne <- DE %>% rowwise() %>%
mutate(Skybiometry = ifelse(is.na(Skybiometry), "NA",
ifelse( Skybiometry=="neutral", "neutral", "non-neutral")))%>%
mutate(Google = ifelse(is.na(Google), "NA",
ifelse(Google=="neutral", "neutral", "non-neutral")))%>%
mutate(Microsoft = ifelse(is.na(Microsoft), "NA",
ifelse(Microsoft=="neutral", "neutral", "non-neutral")))
# neutral flat table
DEne$Microsoft <- factor(DEne$Microsoft,
levels =c("neutral", "non-neutral", "NA"))
DEne$Skybiometry <- factor(DEne$Skybiometry,
levels =c("neutral", "non-neutral", "NA"))
DEne$Google <- factor(DEne$Google,
levels =c("neutral", "non-neutral", "NA"))
nft<- ftable(DEne, row.vars = c("Google", "Microsoft"), col.vars = c("Skybiometry"))
stargazer(format(nft, quote=FALSE, justify="right"), title = "This shows the agreement between non-neutral and neutral faces recognised by Goole, Microsoft and, Skybiometry. Only three faces were categorised as neutral. Of these, Google was much more likely to categorise as neutral.", header=FALSE, type="latex")
ggscatmat(as.data.frame(na.omit(J4[,c(2:4)])), alpha = 0.4)
Mne = glm(neutral01 ~ bg+shotangle+obscured+headangle+glasses+visorhat+, data = MEP1, family=binomial(logit))
Mne = glm(neutral01 ~ bg+shotangle+obscured+headangle+glasses+visorhat, data = MEP1, family=binomial(logit))
GEP1 <- GEP1 %>% rowwise %>% mutate(Gneutral = ifelse(Emotion=="neutral", "neutral","non-neutral")) %>%  mutate(neutral01 = ifelse(Gneutral=="neutral",1,0))
MEP1 <- MEP1 %>% rowwise %>% mutate(Mneutral = ifelse(Emotion=="neutral", "neutral","non-neutral")) %>% mutate(neutral01 = ifelse(Mneutral=="neutral",1,0))
SBP1 <- SBP1 %>% rowwise %>% mutate(Sneutral = ifelse(Emotion=="neutral", "neutral","non-neutral")) %>% mutate(neutral01 = ifelse(Sneutral=="neutral",1,0))
Mne = glm(neutral01 ~ bg+shotangle+obscured+headangle+glasses+visorhat, data = MEP1, family=binomial(logit))
summary(Mne)
Mne = glm(neutral01 ~ bg+obscured+headangle+glasses+visorhat, data = MEP1, family=binomial(logit))
summary(Mne)
shotangle+
shotangle+
Mne = glm(neutral01 ~ bg+shotangle+obscured+headangle+glasses+visorhat, data = MEP1, family=binomial(logit))
summary(Mne)
Mne = glm(neutral01 ~ bg+shotangle+obscured+headangle+glasses+visorhat, data = MEP1, family=binomial(logit))
summary(Mne)
Mne = glm(neutral01 ~ bg+obscured+headangle+glasses+visorhat, data = MEP1, family=binomial(logit))
Mneconfint <- as.data.frame(confint(Mne)) %>%
mutate(`exp(2.5%)` = exp(`2.5 %`)) %>%
mutate(`exp(97.5%)` = exp(`97.5 %`)) %>%
cbind(rownames(confint(Mne)), exp(Mne$coefficients), .) %>%
select(Estimates = `exp(Mne$coefficients)`, `exp(2.5%)`, `exp(97.5%)`)
Mneconfint
pander(gplconfint[2:8,], digits=3, caption="")
pander(Mneconfint[2:8,], digits=3, caption="")
warnings()
colname(MEP1)
colnames(MEP1)
Mne = glm(neutral01 ~ bg+situation+shotangle+lighting+obscured+headangle+
glasses+visorhat+playerName            , data = MEP1, family=binomial(logit))
summary(Mne)
Mne = glm(neutral01 ~ bg+situation+shotangle+lighting+obscured+headangle+
glasses+visorhat, data = MEP1, family=binomial(logit))
summary(Mne)
Mne = glm(neutral01 ~ situation+shotangle+lighting+obscured+headangle+
glasses+visorhat, data = MEP1, family=binomial(logit))
summary(Mne)
Mne = glm(neutral01 ~ bg+shotangle+lighting+obscured+headangle+
glasses+visorhat, data = MEP1, family=binomial(logit))
summary(Mne)
Mne = glm(neutral01 ~ bg+lighting+obscured+headangle+
glasses+visorhat, data = MEP1, family=binomial(logit))
Mne = glm(neutral01 ~ bg+lighting+obscured+headangle+
glasses+visorhat, data = MEP1, family=binomial(logit))
summary(Mne)
Mne = glm(neutral01 ~ bg+shotangle+obscured+headangle+
glasses+visorhat, data = MEP1, family=binomial(logit))
summary(Mne)
+lighting
Mne = glm(neutral01 ~ bg+shotangle+lighting+obscured+headangle+
glasses+visorhat, data = MEP1, family=binomial(logit))
summary(Mne)
Mne = glm(neutral01 ~ bg+shotangle+headangle+
glasses+visorhat, data = MEP1, family=binomial(logit))
summary(Mne)
Mne = glm(neutral01 ~ bg+shotangle+obscured+
glasses+visorhat, data = MEP1, family=binomial(logit))
summary(Mne)
Mne = glm(neutral01 ~ bg+shotangle+obscured+
visorhat, data = MEP1, family=binomial(logit))
summary(Mne)
Mne = glm(neutral01 ~ bg+shotangle+obscured+
glasses, data = MEP1, family=binomial(logit))
summary(Mne)
Mne = glm(neutral01 ~ bg+obscured+
glasses, data = MEP1, family=binomial(logit))
summary(Mne)
Mne = glm(neutral01 ~ bg+obscured+playerName+
glasses, data = MEP1, family=binomial(logit))
summary(Mne)
Mne = glm(neutral01 ~ bg+obscured+glasses, data = MEP1, family=binomial(logit))
summary(Mne)
Mneconfint <- as.data.frame(confint(Mne)) %>%
mutate(`exp(2.5%)` = exp(`2.5 %`)) %>%
mutate(`exp(97.5%)` = exp(`97.5 %`)) %>%
cbind(rownames(confint(Mne)), exp(Mne$coefficients), .) %>%
select(Estimates = `exp(Mne$coefficients)`, `exp(2.5%)`, `exp(97.5%)`)
pander(Mneconfint[2:8,], digits=3, caption="")
pander(Mneconfint[2:6,], digits=3, caption="")
pander(Mneconfint[2:5,], digits=3, caption="")
install.packages(packrat)
install.packages("packrat")
install.packages("packrat")
#packages:
library(bookdown)
library(pander)
library(ggplot2)
library(imager)
library(devtools)
library(knitcitations)
library(RefManageR)
library(readr)
library(knitr)
library(grid)
library(tidyverse)
install.packages("glue")
#packages:
library(bookdown)
library(pander)
library(ggplot2)
library(imager)
library(devtools)
library(knitcitations)
library(RefManageR)
library(readr)
library(knitr)
library(grid)
library(tidyverse)
library(magick)
library(kfigr)
library(UpSetR)
library(descr)
library(tables)
library(xtable)
library(ggthemes)
library(EBI                                                   emage)
library(EBImage)
knitr::opts_chunk$set(echo=FALSE, message=FALSE, warning=FALSE, kfigr.link=TRUE, kfigr.prefix=TRUE, cache=TRUE, fig.env = TRUE)
options("citation_format" = "pandoc")
BibOptions(check.entries = FALSE, style = "markdown", bib.style = "alphabetic", cite.style = 'alphabetic')
ALLmetaIMGnamed<-read_csv("data/ALLmetaIMGnamed.csv", col_types = cols(type = col_factor(levels = c("Manual", "Animetrics", "Google", "Microsoft", "Skybiometry"))))
SceneAttributes<-read_csv("TableCSVs/SceneAttributes.csv")
SolutionSpecs<-read_csv("TableCSVs/SolutionSpecifications.csv")
#plot images with overlaid boxes
overlayGgplot <- function(imgList, mergeData, matchBox=FALSE){
for(i in imgList){
img <- image_read(paste0("figures/", i))
p <- ggplot(data.frame(x=c(0,800), y=c(0,450)), aes(x,y)) +
theme_void()+ coord_fixed()+
annotation_custom(rasterGrob(img)) +
coord_cartesian(xlim=c(0, 800), ylim=c(0,450))
faceData <- ALLmetaIMGnamedFaces %>% filter(file == i)
if(nrow(faceData) == 0){
print(p)
next
} else{
faceData <- faceData %>%
mutate(x1 = minX, x2 = minX, x3 = maxX, x4 = maxX, x5 = minX,
y1 = minY, y2 = maxY, y3 = maxY, y4 = minY, y5 = minY) %>%
gather(corner, boxPos, x1:y5) %>%
mutate(posCoord = substr(corner, 1, 1), posID = substr(corner, 2, 2)) %>%
dplyr::select(-corner) %>% spread(posCoord, boxPos)
}
if(matchBox){
p <- p + geom_path(aes(x=x, y=450-y, group = c(type, boxID), colour=boxID), faceData) + guides(colour="none")
}
else{
p <- p + geom_path(aes(x=x, y=450-y, group = c(FaceID), colour=type), faceData) + guides(colour = guide_legend(override.aes = list(linetype=c("dotdash", "F1"))))
}
print(p)
}
}
imagesList0<-as.list("2016_HSA_R01_BTomic_AUS_vs_DIstomin_UZB_MS157_clip.0013.png")
overlayGgplot(imagesList0, ALLmetaIMG, matchBox = FALSE)
ALLmetaIMGnamedFaces<-ALLmetaIMGnamed%>%
#filter(matchesManual) %>%
dplyr::select(-ID, -facecounter)%>%
mutate(fileID = as.numeric(factor(file))) %>%
mutate(FaceKey=paste(fileID, boxID, sep="-")) %>%
mutate(FaceID=paste(fileID, boxID, substring(type, 1,2), sep="-"))
overlayGgplot(imagesList0, ALLmetaIMG, matchBox = FALSE)
#plot images with overlaid boxes
overlayGgplot <- function(imgList, mergeData, matchBox=FALSE){
for(i in imgList){
img <- image_read(paste0("figures/", i))
p <- ggplot(data.frame(x=c(0,800), y=c(0,450)), aes(x,y)) +
theme_void()+ coord_fixed()+
annotation_custom(rasterGrob(img)) +
coord_cartesian(xlim=c(0, 800), ylim=c(0,450))
faceData <- ALLmetaIMGnamedFaces %>% filter(file == i)
if(nrow(faceData) == 0){
print(p)
next
} else{
faceData <- faceData %>%
mutate(x1 = minX, x2 = minX, x3 = maxX, x4 = maxX, x5 = minX,
y1 = minY, y2 = maxY, y3 = maxY, y4 = minY, y5 = minY) %>%
gather(corner, boxPos, x1:y5) %>%
mutate(posCoord = substr(corner, 1, 1), posID = substr(corner, 2, 2)) %>%
dplyr::select(-corner) %>% spread(posCoord, boxPos)
}
if(matchBox){
p <- p + geom_path(aes(x=x, y=450-y, group = c(type, boxID), colour=boxID), faceData) + guides(colour="none")
}
else{
p <- p + geom_path(aes(x=x, y=450-y, group = c(FaceID), colour=type), faceData) + guides(colour = guide_legend(override.aes = list(colour =c(Skybiometry="#ffe093", Microsoft="#5cc3f6",
Google="#5cba82", Animetrics="#FF959c", Manual="#db70ff"))))
}
print(p)
}
}
overlayGgplot(imagesList0, ALLmetaIMGnamedFaces, matchBox = FALSE)
#plot images with overlaid boxes
overlayGgplot <- function(imgList, mergeData, matchBox=FALSE){
for(i in imgList){
img <- image_read(paste0("figures/", i))
p <- ggplot(data.frame(x=c(0,800), y=c(0,450)), aes(x,y)) +
theme_void()+ coord_fixed()+
annotation_custom(rasterGrob(img)) +
coord_cartesian(xlim=c(0, 800), ylim=c(0,450))
faceData <- ALLmetaIMGnamedFaces %>% filter(file == i)
if(nrow(faceData) == 0){
print(p)
next
} else{
faceData <- faceData %>%
mutate(x1 = minX, x2 = minX, x3 = maxX, x4 = maxX, x5 = minX,
y1 = minY, y2 = maxY, y3 = maxY, y4 = minY, y5 = minY) %>%
gather(corner, boxPos, x1:y5) %>%
mutate(posCoord = substr(corner, 1, 1), posID = substr(corner, 2, 2)) %>%
dplyr::select(-corner) %>% spread(posCoord, boxPos)
}
if(matchBox){
p <- p + geom_path(aes(x=x, y=450-y, group = c(type, boxID), colour=boxID), faceData) + guides(colour="none")
}
else{
p <- p + geom_path(aes(x=x, y=450-y, group = c(FaceID), colour=type), faceData) + guides(colour = guide_legend(override.aes = list(colour =c(Skybiometry="#5cc3f6", Microsoft="#ffe093",
Google="#5cba82", Animetrics="#FF959c", Manual="#db70ff"))))
}
print(p)
}
}
overlayGgplot(imagesList0, ALLmetaIMGnamedFaces, matchBox = FALSE)
overlayGgplot(imagesList0, ALLmetaIMGnamedFaces, matchBox = FALSE)
overlaid boxes
overlayGgplot <- function(imgList, mergeData, matchBox=TRUE){
for(i in imgList){
#read in image
image <- readImage(paste0("figures/", i))
#convert image to a df, add hex value
image_df <- data.frame(x=rep(1:nrow(image), ncol(image)),
y=rep(1:ncol(image),
rep(nrow(image),
ncol(image))),
r=as.vector(image[,,1]),
g=as.vector(image[,,2]),
b=as.vector(image[,,3]))
image_df$h <- rgb(image_df[,3:5])
#Create the plot of the image
p <- ggplot() +
scale_fill_identity(guide="legend") +
geom_tile(data=image_df, aes(x,-y, fill=h)) +
theme_solid()
# Find associated Face Box information for specific image
faceData <- ALLmetaIMGnamedFaces %>% filter(file == i)
if(nrow(faceData) == 0){
return(p)
} else{
faceData <- faceData %>%
mutate(x1 = minX, x2 = minX, x3 = maxX, x4 = maxX, x5 = minX,
y1 = minY, y2 = maxY, y3 = maxY, y4 = minY, y5 = minY) %>%
gather(corner, boxPos, x1:y5) %>%
mutate(posCoord = substr(corner, 1, 1), posID = substr(corner, 2, 2)) %>%
dplyr::select(-corner) %>% spread(posCoord, boxPos)
}
}
if(matchBox){
p <- p + geom_path(aes(x=x, y=450-y, group = faceID, colour=faceID), faceData) +
guides(colour="none")
}
else{
p <- p + geom_path(inherit.aes=FALSE, data=faceData, aes(x=x, y=-y, colour=type, group = c(FaceID))) +
guides(colour = guide_legend(override.aes = list(colour=c(Skybiometry="#ffe093", Microsoft="#5cc3f6",
Google="#5cba82", Animetrics="#FF959c", Manual="#db70ff"))))
}
return(p)
}
imagesList0<-as.list("2016_HSA_R01_BTomic_AUS_vs_DIstomin_UZB_MS157_clip.0013.png")
overlayGgplot(imagesList0, ALLmetaIMG, matchBox = FALSE)
image <- readImage(paste0("figures/", i))
i<-("2016_HSA_R01_BTomic_AUS_vs_DIstomin_UZB_MS157_clip.0013.png")
image <- readImage(paste0("figures/", i))
image_df <- data.frame(x=rep(1:nrow(image), ncol(image)),
y=rep(1:ncol(image),
rep(nrow(image),
ncol(image))),
r=as.vector(image[,,1]),
g=as.vector(image[,,2]),
b=as.vector(image[,,3]))
image_df$h <- rgb(image_df[,3:5])
p <- ggplot() +
scale_fill_identity(guide="legend") +
geom_tile(data=image_df, aes(x,-y, fill=h)) +
theme_solid()
p
system.time(p)
system.time(print(p))
View(SBPAK)
View(SBPAK)
View(SBPAK)
img <- image_read(paste0("figures/", i))
p <- ggplot(data.frame(x=c(0,800), y=c(0,450)), aes(x,y)) +
theme_void()+ coord_fixed()+
annotation_custom(rasterGrob(img)) +
coord_cartesian(xlim=c(0, 800), ylim=c(0,450))
faceData <- ALLmetaIMGnamedFaces %>% filter(file == i)
p
image <- readImage(paste0("figures/", i))
image_df <- data.frame(x=rep(1:nrow(image), ncol(image)),
y=rep(1:ncol(image),
rep(nrow(image),
ncol(image))),
r=as.vector(image[,,1]),
g=as.vector(image[,,2]),
b=as.vector(image[,,3]))
image_df$h <- rgb(image_df[,3:5])
View(image_df)
p <- ggplot() +
scale_fill_identity(guide="legend") +
geom_tile(data=image_df, aes(x,-y, fill=h)) +
theme_solid()
p
p <- ggplot() +
scale_fill_identity(guide="legend") +
geom_point(data=image_df, aes(x,-y, fill=h)) +
theme_solid()
p
?rasterGrob
img <- image_read(paste0("figures/", i))
img
?unit
