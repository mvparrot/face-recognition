require(RefManageR)
require(bibtex)
install.packages("bibtex")
require(RefManageR)
bib <- ReadBib(system.file("Bib", "references.bib",
#                           package = "RefManageR"), check = FALSE)
#BibOptions(check.entries = FALSE, style = "markdown", bib.style = #"alphabetic", cite.style = 'alphabetic')
bib <- ReadBib(system.file("Bib", "references.bib",
package = "RefManageR"), check = FALSE)
bib <- ReadBib(system.file("Bib", "biblio.bib", package = "RefManageR"), check = FALSE)
bib <- ReadBib(system.file("Bib", "biblio.bib", package = "RefManageR"), check = FALSE)
bib <- ReadBib(system.file("Bib", "biblio.bib", package = "RefManageR"), check = FALSE)
bib <- ReadBib(system.file("Bib", "biblio.bib", package = "RefManageR"), check = FALSE)
bib <- ReadBib(system.file("Bib", "biblio.bib", package = "RefManageR"), check = FALSE)
file.name <- system.file("Bib", "biblio.bib",package="RefManageR")
bib <- ReadBib(file.name)
bib <- ReadBib(file.name)
require(bibtex)
bib <- ReadBib(file.name)
BibEntry(bibtype = "Article", key = "mclean2014", title = "An Article Title",
author = " McLean, Mathew W. and Wand, Matt P.", journaltitle = "The Journal Title",
date = "2014-02-06", pubstate = "forthcoming")
bib <- BibEntry(bibtype = "XData", key = "arxiv_data", eprinttype = "arxiv",
eprintclass = "stat.ME", year = 2013, urldate = "2014-02-01", pubstate = "submitted")
bib <- c(bib, BibEntry(bibtype = "Misc", key = "mclean2014b",
title = "Something On the {arXiv}", author = "Mathew W. McLean", eprint = "1312.9999",
xdata = "arxiv_data", url = "https://arxiv.org/abs/1310.5811"))
bib
toBiblatex(bib)
bib
BibEntry(bibtype = "Article", key = "mclean2014", title = "An Article Title",
author = " McLean, Mathew W. and Wand, Matt P.", journaltitle = "The Journal Title",
date = "2014-02-06", pubstate = "forthcoming")
bib <- BibEntry(bibtype = "XData", key = "arxiv_data", eprinttype = "arxiv",
eprintclass = "stat.ME", year = 2013, urldate = "2014-02-01", pubstate = "submitted")
bib <- c(bib, BibEntry(bibtype = "Misc", key = "mclean2014b",
title = "Something On the {arXiv}", author = "Mathew W. McLean", eprint = "1312.9999",
xdata = "arxiv_data", url = "https://arxiv.org/abs/1310.5811"))
bib
toBiblatex(bib)
citation("httr")
library(magick)
img <- image_read(paste0("images/", i))
i<-("2016_SC2_R01_AKerber_GER_vs_MDoi_JPN_WS1332_clip.0083.png")
img <- image_read(paste0("images/", i))
setwd("C:/Users/steff/Github/face-recognition")
??UpSetR
ALLmetaIMGFaces<-ALLmetaIMG%>%
filter(!is.na(boxID)) %>%
dplyr::select(-ID, -facecounter)%>%
mutate(fileID = as.numeric(factor(file))) %>%
mutate(FaceKey=paste(fileID, boxID, sep="-")) %>%
mutate(FaceID=paste(fileID, boxID, substring(type, 1,2), sep="-"))
```{r cache=FALSE, echo=FALSE, message=FALSE, warning=FALSE, results='asis'}
#packages:
library(pander)
library(ggplot2)
library(imager)
library(devtools)
library(knitcitations)
library(RefManageR)
library(readr)
library(knitr)
library(grid)
library(tidyverse)
library(magick)
library(kfigr)
knitr::opts_chunk$set(echo=FALSE, message=FALSE, warning=FALSE, kfigr.link=TRUE)
options("citation_format" = "pandoc")
BibOptions(check.entries = FALSE, style = "markdown", bib.style = "alphabetic", cite.style = 'alphabetic')
setwd("C:/Users/steff/Github/face-recognition")
#csv files:
ALLmetaIMG<-read_csv("ALLmetaIMG.csv", col_types = cols(type = col_factor(levels = c("Manual", "Animetrics", "Google", "Microsoft", "Skybiometry"))))
SceneAttributes<-read_csv("TableCSVs/SceneAttributes.csv")
FaceAttributes<-read_csv("TableCSVs/FaceAttributes.csv")
SolutionSpecs<-read_csv("TableCSVs/SolutionSpecifications.csv")
#plot images with overlaid boxes
overlayGgplot <- function(imgList, mergeData, matchBox=FALSE){
for(i in imgList){
img <- image_read(paste0("images/", i))
p <- ggplot(data.frame(x=c(0,800), y=c(0,450)), aes(x,y)) +
theme_void()+ coord_fixed()+
annotation_custom(rasterGrob(img)) +
scale_x_continuous(expand = c(0,0), limits = c(0,800)) +
scale_y_continuous(expand = c(0,0), limits = c(0,450))
faceData <- ALLmetaIMGFaces %>% filter(file == i)
if(nrow(faceData) == 0){
return(p)
} else{
faceData <- faceData %>%
mutate(x1 = minX, x2 = minX, x3 = maxX, x4 = maxX, x5 = minX,
y1 = minY, y2 = maxY, y3 = maxY, y4 = minY, y5 = minY) %>%
gather(corner, boxPos, x1:y5) %>%
mutate(posCoord = substr(corner, 1, 1), posID = substr(corner, 2, 2)) %>%
select(-corner) %>% spread(posCoord, boxPos)
}
if(matchBox){
p <- p + geom_path(aes(x=x, y=450-y, group = c(type, boxID), colour=boxID), faceData) + guides(colour="none")
}
else{
p <- p + geom_path(aes(x=x, y=450-y, group = type, colour=type), faceData)
}
return(p)
}
}
# Create graphs of factors in manual proportions
getManualCount <- function(type, count) {
return(count[type == "Manual"])
}
ggplotProportion <- function(dataset, factorVar){
factorVar <- deparse(substitute(factorVar))
dataset <- dataset %>% filter(matchesManual) %>% group_by_(factorVar, "type") %>% summarise(nTotal=n()) %>% group_by_(factorVar) %>% mutate(ManualCount = getManualCount(type, nTotal)) %>%
mutate(proportion = nTotal/ManualCount) %>% rename_(xvar = factorVar) %>% filter(type!="Manual")
ggplot(dataset, aes(x=factor(xvar), y=proportion, group = type, fill=type)) + geom_bar(stat = "identity", position = "dodge") +
ylab("Proportion of faces matched") + xlab(factorVar)
}
#Factor Names
ALLmetaIMG$graphic<-factor(ALLmetaIMG$graphic, levels = 0:1, labels = c("Live image", "Graphic"))
ALLmetaIMG$bg<-factor(ALLmetaIMG$bg, levels = 0:3, labels = c("Crowd", "Court", "Logo wall", "Not applicable"))
ALLmetaIMG$person<-factor(ALLmetaIMG$person, levels = 0:1, labels = c("No Person", "Person"))
ALLmetaIMG$shotangle<-factor(ALLmetaIMG$shotangle, levels = 0:2, labels = c("Player Shoulder Height", "Birds Eye", "Upward Angle"))
ALLmetaIMG$situation<-factor(ALLmetaIMG$situation, levels = 0:5, labels = c("Court in play", "Court player close-up", "Court close-up not player", "Crowd", "Off court close up of player", "Transition"))
ALLmetaIMG$detect<-factor(ALLmetaIMG$detect, levels = 0:3, labels = c("Player", "Other staff on court", "Fan", "None"))
ALLmetaIMG$obscured<-factor(ALLmetaIMG$obscured, levels = 0:1, labels = c("No", "Yes"))
ALLmetaIMG$lighting<-factor(ALLmetaIMG$lighting, levels = 0:2, labels = c("Direct sunlight", "Shaded", "Partially shaded"))
ALLmetaIMG$headangle<-factor(ALLmetaIMG$headangle, levels = 0:3, labels = c("Front on", "Back of head", "Profile", "Other"))
ALLmetaIMG$glasses<-factor(ALLmetaIMG$glasses, levels = 0:1, labels = c("No", "Yes"))
ALLmetaIMG$visorhat<-factor(ALLmetaIMG$visorhat, levels = 0:1, labels = c("No", "Yes"))
ALLmetaIMG$headangle <- as.character(ALLmetaIMG$headangle)
ALLmetaIMG$headangle[ALLmetaIMG$headangle == "Back of head"] <- "Other"
ALLmetaIMG$headangle <- as.factor(ALLmetaIMG$headangle)
ALLmetaIMGPlayers<- ALLmetaIMG %>% filter(detect=="Player")
#change this to facesVenn with binary information
ALLmetaIMGFaces<-ALLmetaIMG%>%
filter(!is.na(boxID)) %>%
dplyr::select(-ID, -facecounter)%>%
mutate(fileID = as.numeric(factor(file))) %>%
mutate(FaceKey=paste(fileID, boxID, sep="-")) %>%
mutate(FaceID=paste(fileID, boxID, substring(type, 1,2), sep="-"))
```
ALLmetaIMGFaces<-ALLmetaIMG%>%
filter(!is.na(boxID)) %>%
dplyr::select(-ID, -facecounter)%>%
mutate(fileID = as.numeric(factor(file))) %>%
mutate(FaceKey=paste(fileID, boxID, sep="-")) %>%
mutate(FaceID=paste(fileID, boxID, substring(type, 1,2), sep="-"))
ALLmetaIMGFaces2<-ALLmetaIMGFaces %>%
group_by(FaceKey) %>%
summarise(Microsoft = VennMatrixFn(type=type, "Microsoft"),
Animetrics = VennMatrixFn(type=type, "Animetrics"),
Skybiometry = VennMatrixFn(type=type, "Skybiometry"),
Google = VennMatrixFn(type=type, "Google"),
Manual = VennMatrixFn(type=type, "Microsoft"))
VennMatrixFn <- function(type = NULL, match=NULL, ...){
if (is.null(type)){
stop("No faces in group, this is a bug")
}
as.numeric(any(type %in% match))
}
VennLists<-ALLmetaIMGFaces %>%
filter(glasses=="Yes") %>%
split(.$type) %>%
map(~ .$FaceKey)%>%
#append(list(Glasses = filter(ALLmetaIMGFaces, glasses=="Yes")$FaceKey)) %>%
fromList() %>%
upset(order.by="freq", nsets=100)
library(UpSetR)
VennLists<-ALLmetaIMGFaces %>%
filter(glasses=="Yes") %>%
split(.$type) %>%
map(~ .$FaceKey)%>%
#append(list(Glasses = filter(ALLmetaIMGFaces, glasses=="Yes")$FaceKey)) %>%
fromList() %>%
upset(order.by="freq", nsets=100)
VennLists<-ALLmetaIMGFaces %>%
# filter(glasses=="Yes") %>%
split(.$type) %>%
map(~ .$FaceKey)%>% venn()
library(eVenn)
library(venn)
VennLists<-ALLmetaIMGFaces %>%
# filter(glasses=="Yes") %>%
split(.$type) %>%
map(~ .$FaceKey)%>% venn()
VennLists<-ALLmetaIMGFaces %>%
# filter(glasses=="Yes") %>%
split(.$type) %>%
map(~ .$FaceKey)%>% venn()
VennLists<-ALLmetaIMGFaces %>%
# filter(glasses=="Yes") %>%
split(.$type) %>%
map(~ .$FaceKey)%>%
#append(list(Glasses = filter(ALLmetaIMGFaces, glasses=="Yes")$FaceKey)) %>%
fromList() %>%
upset(order.by="freq", nsets=100)
movies <- read.csv(system.file("extdata", "movies.csv", package = "UpSetR"),
header = T, sep = ";")
movies <- read.csv(system.file("extdata", "movies.csv", package = "UpSetR"),
header = T, sep = ";")
View(ALLmetaIMG)
View(ALLmetaIMGFaces)
ALLmetaIMGFaces%>% filter(player2=="AMurray" | player1=="AMurray")
MurrayFaces<-ALLmetaIMGFaces%>% filter(player2=="AMurray" | player1=="AMurray")
View(MurrayFaces)
MurrayList<-as.list(MurrayFaces$file)
MurrayList<-as.list(MurrayFaces$file)
MurrayList
MurrayList<-as.list(unique(MurrayFaces$file))
MurrayList
overlayGgplot(MurrayList, MurrayFaces)
VennLists<-ALLmetaIMGFaces %>%
split(.$type) %>%
map(~ .$FaceKey)%>%
fromList() %>%
upset(order.by="freq", nsets=100)
VennLists1<-ALLmetaIMGFaces %>%
filter(glasses=="Yes") %>%
split(.$type) %>%
map(~ .$FaceKey)
??upset
VennLists<-ALLmetaIMGFaces %>%
split(.$type) %>%
map(~ .$FaceKey)%>%
fromList() %>%
upset(order.by="freq", nsets=100, set.metadata = list(data = ALLmetaIMGFaces$glasses, plots = list(list(type = "heat", column = "accepted", assign = 5, colors = c("red", "green")))))
VennLists<-ALLmetaIMGFaces %>%
split(.$type) %>%
map(~ .$FaceKey)%>%
fromList() %>%
upset(order.by="freq", nsets=100, set.metadata = list(data = ALLmetaIMGFaces[glasses],, plots = list(list(type = "heat", column = "accepted", assign = 5, colors = c("red", "green")))))
VennLists<-ALLmetaIMGFaces %>%
split(.$type) %>%
map(~ .$FaceKey)%>%
fromList() %>%
upset(order.by="freq", nsets=100, set.metadata = list(data = ALLmetaIMGFaces[glasses,], plots = list(list(type = "heat", column = "accepted", assign = 5, colors = c("red", "green")))))
??anchors
??anchor
??anchors
