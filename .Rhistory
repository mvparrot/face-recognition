group_by(FaceKey) %>%
summarise(a = mytestFn(type=type))
table(ALLmetaIMGFaces2$a)
VennMatrixFn <- function(type = NULL, ...){
paste0(as.numeric(any(type %in% "Microsoft")),
as.numeric(any(type %in% "Animetrics")),
as.numeric(any(type %in% "Skybiometry")),
as.numeric(any(type %in% "Google")),
as.numeric(any(type %in% "Manual")))
}
ALLmetaIMGFaces2<-ALLmetaIMGFaces %>%
group_by(FaceKey) %>%
summarise(a = VennMatrixFn(type=type))
table(ALLmetaIMGFaces2$a)
a <- table(ALLmetaIMGFaces2$a)
v.table<-venn( list(A=1:5,B=4:6,C=c(4,8:10),D=c(4:12)))
install.packages("venn")
library(venn)
v.table<-venn( list(A=1:5,B=4:6,C=c(4,8:10),D=c(4:12)))
v.table
venn( list(A=1:5,B=4:6,C=c(4,8:10),D=c(4:12)))
plot(v.table)
VennMatrixFn <- function(type = NULL, match=NULL, ...){
if (is.null(type)){
stop("No faces in group, this is a bug")
}
as.numeric(any(type %in% match))
}
ALLmetaIMGFaces2<-ALLmetaIMGFaces %>%
group_by(FaceKey) %>%
summarise(Microsoft = VennMatrixFn(type=type, "Microsoft"),
Animetrics = VennMatrixFn(type=type, "Animetrics"),
Skybiometry = VennMatrixFn(type=type, "Skybiometry"),
Google = VennMatrixFn(type=type, "Google"),
Manual = VennMatrixFn(type=type, "Microsoft"))
list(A=1:5,B=4:6,C=c(4,8:10),D=c(4:12))
ALLmetaIMGFaces %>%
group_by(type) %>% map_chr(~ .$FaceKey)
ALLmetaIMGFaces %>%
group_by(type)
?map_chr
1:10 %>%
map(~ rnorm(10, .x))
ALLmetaIMGFaces %>%
group_by(type) %>% map(~ .$FaceKey)
1:6
as.character(1:6)
as.character(1:6)$nu
list(1:6)$nu
list(1:6, "a")$nu
list(1:6, "a")
ALLmetaIMGFaces %>%
group_by(type) %>% map(~ print(.))
ALLmetaIMGFaces %>%
group_by(type) %>% map(~ colnames(.))
ALLmetaIMGFaces %>%
split(.$type) %>%
map(~ colnames(.))
ALLmetaIMGFaces %>%
split(.$type) %>%
map(~ .$FaceKey)
ALLmetaIMGFaces %>%
split(.$type) %>%
map(~ .$FaceKey) %>%
venn()
install.packages("UpSetR")
require(UpSetR)
ALLmetaIMGFaces %>%
split(.$type) %>%
map(~ .$FaceKey) %>%
ALLmetaIMGFaces %>%
split(.$type) %>%
map(~ .$FaceKey)
VennLists<-ALLmetaIMGFaces %>%
split(.$type) %>%
map(~ .$FaceKey)
VennLists<-ALLmetaIMGFaces %>%
split(.$type) %>%
map(~ .$FaceKey) %>%
fromList() %>%
upset(order.by="freq")
VennLists<-ALLmetaIMGFaces %>%
split(.$type) %>%
map(~ .$FaceKey)
ALLmetaIMGFaces %>%
split(.$type) %>%
map(~ .$FaceKey)%>%
mutate(z=3)
list(43) %>% append(4)
list(43) %>% append(x=4)
?append
list(43) %>% append(list(x=4)
)
VennLists<-ALLmetaIMGFaces %>%
split(.$type) %>%
map(~ .$FaceKey)%>%
append(list(Glasses = filter(ALLmetaIMGFaces, glasses=TRUE) %>% map(~ .$FaceKey))) %>%
fromList() %>%
upset(order.by="freq")
str(ALLmetaIMGFaces$glasses)
VennLists<-ALLmetaIMGFaces %>%
split(.$type) %>%
map(~ .$FaceKey)%>%
append(list(Glasses = filter(ALLmetaIMGFaces, glasses=="Yes") %>% map(~ .$FaceKey))) %>%
fromList() %>%
upset(order.by="freq")
filter(ALLmetaIMGFaces, glasses=="Yes")
VennLists<-ALLmetaIMGFaces %>%
split(.$type) %>%
map(~ .$FaceKey)%>%
append(list(Glasses = filter(ALLmetaIMGFaces, glasses=="Yes")$FaceKey) %>%
fromList() %>%
upset(order.by="freq")
VennLists<-ALLmetaIMGFaces %>%
split(.$type) %>%
map(~ .$FaceKey)%>%
append(list(Glasses = filter(ALLmetaIMGFaces, glasses=="Yes")$FaceKey)) %>%
fromList() %>%
upset(order.by="freq")
ALLmetaIMGFaces %>%
split(.$type) %>%
map(~ .$FaceKey)%>%
append(list(Glasses = filter(ALLmetaIMGFaces, glasses=="Yes")$FaceKey))
ALLmetaIMGFaces %>%
split(.$type) %>%
map(~ .$FaceKey)%>%
append(list(Glasses = filter(ALLmetaIMGFaces, glasses=="Yes")$FaceKey)) -> a
a
head(a)
map(a, ~ head(.))
?upset
ALLmetaIMGFaces %>%
split(.$type) %>%
map(~ .$FaceKey)%>%
append(list(Glasses = filter(ALLmetaIMGFaces, glasses=="Yes")$FaceKey)) %>%
fromList() %>%
upset(order.by="freq", nsets=100)
VennLists<-ALLmetaIMGFaces %>%
filter(glasses=="Yes") %>%
split(.$type) %>%
map(~ .$FaceKey)%>%
#append(list(Glasses = filter(ALLmetaIMGFaces, glasses=="Yes")$FaceKey)) %>%
fromList() %>%
upset(order.by="freq", nsets=100)
ALLmetaIMGFaces %>%
filter(glasses=="Yes") %>%
split(.$type) %>%
map(~ .$FaceKey)%>%
#append(list(Glasses = filter(ALLmetaIMGFaces, glasses=="Yes")$FaceKey)) %>%
fromList() %>%
upset(order.by="freq", nsets=100, nintersects = 10)
ALLmetaIMGFaces %>%
filter(glasses=="Yes") %>%
split(.$FaceKey) %>%
map(~ !("Manual" %in% .$type))
ALLmetaIMGFaces %>%
filter(glasses=="Yes") %>%
split(.$FaceKey) %>%
map_df(~ !("Manual" %in% .$type))
?map_if
ALLmetaIMGFaces %>%
filter(glasses=="Yes") %>%
split(.$FaceKey) %>%
map_if(~ !("Manual" %in% .$type), .)
ALLmetaIMGFaces %>%
filter(glasses=="Yes") %>%
split(.$FaceKey) %>%
map_if(~ !("Manual" %in% .$type), ~ .)
?split
ALLmetaIMGFaces %>%
filter(glasses=="Yes") %>%
split(.$FaceKey) %>%
map_if(~ !("Manual" %in% .$type), ~ .) %>%
unsplit()
ALLmetaIMGFaces %>%
filter(glasses=="Yes") %>%
split(.$FaceKey) %>%
map_if(~ !("Manual" %in% .$type), ~ .) %>%
unsplit(names(.))
ALLmetaIMGFaces %>%
filter(glasses=="Yes") %>%
split(.$FaceKey) %>%
map_if(~ !("Manual" %in% .$type), ~ .$type)
?map_if
ALLmetaIMGFaces %>%
filter(glasses=="Yes") %>%
split(.$FaceKey) %>%
map_if(~ !("Manual" %in% .$type), ~ .$type) %>%
map(~.
)
ALLmetaIMGFaces %>%
filter(glasses=="Yes") %>%
split(.$FaceKey) %>%
map_if(~ !("Manual" %in% .$type), ~ .$type) %>%
map(~.$type)
ALLmetaIMGFaces %>%
filter(glasses=="Yes") %>%
split(.$FaceKey) %>%
map_if(~ !("Manual" %in% .$type), ~ class(.))
class(2)
ALLmetaIMGFaces %>%
filter(glasses=="Yes") %>%
split(.$FaceKey) %>%
map_if(~ !("Manual" %in% .$type), ~ class(.x))
ALLmetaIMGFaces %>%
filter(glasses=="Yes") %>%
split(.$FaceKey) %>%
map_if(~ !("Manual" %in% .$type), "type")
ALLmetaIMGFaces %>%
filter(glasses=="Yes") %>%
split(.$FaceKey) %>%
map_lgl(~ !("Manual" %in% .$type))
a <- ALLmetaIMGFaces %>%
filter(glasses=="Yes") %>%
split(.$FaceKey) %>%
map_lgl(~ !("Manual" %in% .$type))
colnames(a)[a]
a
names(a)[a]
ALLmetaIMGFaces %>%
filter(glasses=="Yes") %>%
split(.$FaceKey) %>%
map_lgl(~ !("Manual" %in% .$type)) %>%
map_chr(~ names(.)[.])
a <- ALLmetaIMGFaces %>%
filter(glasses=="Yes") %>%
split(.$FaceKey) %>%
map_lgl(~ !("Manual" %in% .$type)) %>%
function(a) names(a)[a]
ALLmetaIMGFaces %>%
filter(glasses=="Yes") %>%
split(.$FaceKey) %>%
map_lgl(~ !("Manual" %in% .$type)) %>%
(function(a) names(a)[a])
a <- ALLmetaIMGFaces %>%
filter(glasses=="Yes") %>%
split(.$FaceKey) %>%
map_lgl(~ !("Manual" %in% .$type)) %>%
(function(a) names(a)[a]
a <- ALLmetaIMGFaces %>%
filter(glasses=="Yes") %>%
split(.$FaceKey) %>%
map_lgl(~ !("Manual" %in% .$type)) %>%
(function(a) names(a)[a])
ALLmetaIMGFaces %>% filter(FaceKey %in% a)
ALLmetaIMGFaces %>% filter(FaceKey %in% a) %>% View()
View(ALLmetaIMGFaces)
ALLmetaIMG%>%filter(FaceKey=="1610-1")
View(ALLmetaIMG)
ALLmetaIMG <- read.csv("C:/Users/steff/Github/face-recognition/ALLmetaIMG.csv")
View(ALLmetaIMG)
colnames(ALLmetaIMG)
ALLmetaIMGFaces<-ALLmetaIMG%>%
filter(!is.na(boxID)) %>%
mutate(fileID = as.numeric(factor(file))) %>%
mutate(FaceKey=paste(fileID, boxID, sep="-"))
a <- ALLmetaIMGFaces %>%
filter(glasses=="Yes") %>%
split(.$FaceKey) %>%
map_lgl(~ !("Manual" %in% .$type)) %>%
(function(a) names(a)[a])
ALLmetaIMGFaces %>% filter(FaceKey %in% a) %>% View()
ALLmetaIMG <- read.csv("C:/Users/steff/Github/face-recognition/ALLmetaIMG.csv")
View(ALLmetaIMG)
ALLmetaIMGFaces<-ALLmetaIMG%>%
filter(!is.na(boxID)) %>%
mutate(fileID = as.numeric(factor(file))) %>%
mutate(FaceKey=paste(fileID, boxID, sep="-"))
a <- ALLmetaIMGFaces %>%
filter(glasses=="Yes") %>%
split(.$FaceKey) %>%
map_lgl(~ !("Manual" %in% .$type)) %>%
(function(a) names(a)[a])
ALLmetaIMGFaces %>% filter(FaceKey %in% a) %>% View()
?upset
movies <- read.csv(system.file("extdata", "movies.csv", package = "UpSetR"),
header = T, sep = ";")
View(movies)
??ggplot
#plot images with overlaid boxes
overlayGgplot <- function(imgList, mergeData, matchBox=TRUE, capt=NULL){
for(i in imgList){
img <- image_read(paste0("images/", i))
p <- ggplot(data.frame(x=c(0,800), y=c(0,450)), aes(x,y)) +
theme_void()+ coord_fixed()+
annotation_custom(rasterGrob(img)) +
scale_x_continuous(expand = c(0,0), limits = c(0,800)) +
scale_y_continuous(expand = c(0,0), limits = c(0,450))
faceData <- ALLmetaIMG %>% filter(file == i)
if(nrow(faceData) == 0){
return(p)
} else{
faceData <- faceData %>%
mutate(x1 = minX, x2 = minX, x3 = maxX, x4 = maxX, x5 = minX,
y1 = minY, y2 = maxY, y3 = maxY, y4 = minY, y5 = minY) %>%
gather(corner, boxPos, x1:y5) %>%
mutate(posCoord = substr(corner, 1, 1), posID = substr(corner, 2, 2)) %>%
select(-corner) %>% spread(posCoord, boxPos)
}
if(matchBox){
p <- p + geom_path(aes(x=x, y=450-y, group = faceID, colour=faceID), faceData) + guides(colour="none")
}
else{
p <- p + geom_path(aes(x=x, y=450-y, group = faceID, colour=type), faceData)
}
}
p<-p+labs(caption = capt)
return(p)
}
#packages:
require(pander)
require(ggplot2)
require(imager)
require(devtools)
require(knitcitations)
require(RefManageR)
require(readr)
require(knitr)
require(grid)
require(tidyverse)
require(magick)
require(kfigr)
knitr::opts_chunk$set(echo=FALSE, message=FALSE, warning=FALSE,
cache=TRUE, kfigr.link=TRUE)
options("citation_format" = "pandoc")
BibOptions(check.entries = FALSE, style = "markdown", bib.style = "alphabetic", cite.style = 'alphabetic')
setwd("C:/Users/steff/Github/face-recognition")
#csv files:
ALLmetaIMG<-read_csv("ALLmetaIMG.csv", col_types = cols(type = col_factor(levels = c("Manual", "Animetrics", "Google", "Microsoft", "Skybiometry"))))
SceneAttributes<-read_csv("TableCSVs/SceneAttributes.csv")
FaceAttributes<-read_csv("TableCSVs/FaceAttributes.csv")
SolutionSpecs<-read_csv("TableCSVs/SolutionSpecifications.csv")
#plot images with overlaid boxes
overlayGgplot <- function(imgList, mergeData, matchBox=TRUE, capt=NULL){
for(i in imgList){
img <- image_read(paste0("images/", i))
p <- ggplot(data.frame(x=c(0,800), y=c(0,450)), aes(x,y)) +
theme_void()+ coord_fixed()+
annotation_custom(rasterGrob(img)) +
scale_x_continuous(expand = c(0,0), limits = c(0,800)) +
scale_y_continuous(expand = c(0,0), limits = c(0,450))
faceData <- ALLmetaIMG %>% filter(file == i)
if(nrow(faceData) == 0){
return(p)
} else{
faceData <- faceData %>%
mutate(x1 = minX, x2 = minX, x3 = maxX, x4 = maxX, x5 = minX,
y1 = minY, y2 = maxY, y3 = maxY, y4 = minY, y5 = minY) %>%
gather(corner, boxPos, x1:y5) %>%
mutate(posCoord = substr(corner, 1, 1), posID = substr(corner, 2, 2)) %>%
select(-corner) %>% spread(posCoord, boxPos)
}
if(matchBox){
p <- p + geom_path(aes(x=x, y=450-y, group = faceID, colour=faceID), faceData) + guides(colour="none")
}
else{
p <- p + geom_path(aes(x=x, y=450-y, group = faceID, colour=type), faceData)
}
}
p<-p+labs(caption = capt)
return(p)
}
# Create graphs of factors in manual proportions
getManualCount <- function(type, count) {
return(count[type == "Manual"])
}
ggplotProportion <- function(dataset, factorVar){
factorVar <- deparse(substitute(factorVar))
dataset <- dataset %>% filter(matchesManual) %>% group_by_(factorVar, "type") %>% summarise(nTotal=n()) %>% group_by_(factorVar) %>% mutate(ManualCount = getManualCount(type, nTotal)) %>%
mutate(proportion = nTotal/ManualCount) %>% rename_(xvar = factorVar) %>% filter(type!="Manual")
ggplot(dataset, aes(x=factor(xvar), y=proportion, group = type, fill=type)) + geom_bar(stat = "identity", position = "dodge") +
ylab("Proportion of faces matched") + xlab(factorVar)
}
#Factor Names
ALLmetaIMG$graphic<-factor(ALLmetaIMG$graphic, levels = 0:1, labels = c("Live image", "Graphic"))
ALLmetaIMG$bg<-factor(ALLmetaIMG$bg, levels = 0:3, labels = c("Crowd", "Court", "Logo wall", "Not applicable"))
ALLmetaIMG$person<-factor(ALLmetaIMG$person, levels = 0:1, labels = c("No Person", "Person"))
ALLmetaIMG$shotangle<-factor(ALLmetaIMG$shotangle, levels = 0:2, labels = c("Player Shoulder Height", "Birds Eye", "Upward Angle"))
ALLmetaIMG$situation<-factor(ALLmetaIMG$situation, levels = 0:5, labels = c("Court in play", "Court player close-up", "Court close-up not player", "Crowd", "Off court close up of player", "Transition"))
ALLmetaIMG$detect<-factor(ALLmetaIMG$detect, levels = 0:3, labels = c("Player", "Other staff on court", "Fan", "None"))
ALLmetaIMG$obscured<-factor(ALLmetaIMG$obscured, levels = 0:1, labels = c("No", "Yes"))
ALLmetaIMG$lighting<-factor(ALLmetaIMG$lighting, levels = 0:2, labels = c("Direct sunlight", "Shaded", "Partially shaded"))
ALLmetaIMG$headangle<-factor(ALLmetaIMG$headangle, levels = 0:3, labels = c("Front on", "Back of head", "Profile", "Other"))
ALLmetaIMG$glasses<-factor(ALLmetaIMG$glasses, levels = 0:1, labels = c("No", "Yes"))
ALLmetaIMG$visorhat<-factor(ALLmetaIMG$visorhat, levels = 0:1, labels = c("No", "Yes"))
ALLmetaIMG$headangle <- as.character(ALLmetaIMG$headangle)
ALLmetaIMG$headangle[ALLmetaIMG$headangle == "Back of head"] <- "Other"
ALLmetaIMG$headangle <- as.factor(ALLmetaIMG$headangle)
ALLmetaIMGPlayers<- ALLmetaIMG %>% filter(detect=="Player")
imagesList0<-as.list("2016_HSA_R01_BTomic_AUS_vs_DIstomin_UZB_MS157_clip.0013.png")
overlayGgplot(imagesList0, ALLmetaIMG, matchBox = FALSE)
overlayGgplot <- function(imgList, mergeData, matchBox=TRUE){
for(i in imgList){
img <- image_read(paste0("images/", i))
p <- ggplot(data.frame(x=c(0,800), y=c(0,450)), aes(x,y)) +
theme_void()+ coord_fixed()+
annotation_custom(rasterGrob(img)) +
scale_x_continuous(expand = c(0,0), limits = c(0,800)) +
scale_y_continuous(expand = c(0,0), limits = c(0,450))
faceData <- ALLmetaIMG %>% filter(file == i)
if(nrow(faceData) == 0){
return(p)
} else{
faceData <- faceData %>%
mutate(x1 = minX, x2 = minX, x3 = maxX, x4 = maxX, x5 = minX,
y1 = minY, y2 = maxY, y3 = maxY, y4 = minY, y5 = minY) %>%
gather(corner, boxPos, x1:y5) %>%
mutate(posCoord = substr(corner, 1, 1), posID = substr(corner, 2, 2)) %>%
select(-corner) %>% spread(posCoord, boxPos)
}
if(matchBox){
p <- p + geom_path(aes(x=x, y=450-y, group = boxID, colour=boxID), faceData) + guides(colour="none")
}
else{
p <- p + geom_path(aes(x=x, y=450-y, group = boxID, colour=type), faceData)
}
}
return(p)
}
overlayGgplot(imagesList0, ALLmetaIMG, matchBox = FALSE)
View(ALLmetaIMG)
View(ALLmetaIMG)
overlayGgplot <- function(imgList, mergeData, matchBox=TRUE){
for(i in imgList){
img <- image_read(paste0("images/", i))
p <- ggplot(data.frame(x=c(0,800), y=c(0,450)), aes(x,y)) +
theme_void()+ coord_fixed()+
annotation_custom(rasterGrob(img)) +
scale_x_continuous(expand = c(0,0), limits = c(0,800)) +
scale_y_continuous(expand = c(0,0), limits = c(0,450))
faceData <- ALLmetaIMG %>% filter(file == i)
if(nrow(faceData) == 0){
return(p)
} else{
faceData <- faceData %>%
mutate(x1 = minX, x2 = minX, x3 = maxX, x4 = maxX, x5 = minX,
y1 = minY, y2 = maxY, y3 = maxY, y4 = minY, y5 = minY) %>%
gather(corner, boxPos, x1:y5) %>%
mutate(posCoord = substr(corner, 1, 1), posID = substr(corner, 2, 2)) %>%
select(-corner) %>% spread(posCoord, boxPos)
}
if(matchBox){
p <- p + geom_path(aes(x=x, y=450-y, group = BoxID, colour=faceID), faceData) + guides(colour="none")
}
else{
p <- p + geom_path(aes(x=x, y=450-y, group = BoxID, colour=type), faceData)
}
}
}
return(p)
}
overlayGgplot <- function(imgList, mergeData, matchBox=TRUE){
for(i in imgList){
img <- image_read(paste0("images/", i))
p <- ggplot(data.frame(x=c(0,800), y=c(0,450)), aes(x,y)) +
theme_void()+ coord_fixed()+
annotation_custom(rasterGrob(img)) +
scale_x_continuous(expand = c(0,0), limits = c(0,800)) +
scale_y_continuous(expand = c(0,0), limits = c(0,450))
faceData <- ALLmetaIMG %>% filter(file == i)
if(nrow(faceData) == 0){
return(p)
} else{
faceData <- faceData %>%
mutate(x1 = minX, x2 = minX, x3 = maxX, x4 = maxX, x5 = minX,
y1 = minY, y2 = maxY, y3 = maxY, y4 = minY, y5 = minY) %>%
gather(corner, boxPos, x1:y5) %>%
mutate(posCoord = substr(corner, 1, 1), posID = substr(corner, 2, 2)) %>%
select(-corner) %>% spread(posCoord, boxPos)
}
if(matchBox){
p <- p + geom_path(aes(x=x, y=450-y, group = BoxID, colour=faceID), faceData) + guides(colour="none")
}
else{
p <- p + geom_path(aes(x=x, y=450-y, group = boxID, colour=type), faceData)
}
return(p)
}
}
overlayGgplot(imagesList0, ALLmetaIMG, matchBox = FALSE)
overlayGgplot(imagesList0, ALLmetaIMG)
overlayGgplot <- function(imgList, mergeData, matchBox=TRUE){
for(i in imgList){
img <- image_read(paste0("images/", i))
p <- ggplot(data.frame(x=c(0,800), y=c(0,450)), aes(x,y)) +
theme_void()+ coord_fixed()+
annotation_custom(rasterGrob(img)) +
scale_x_continuous(expand = c(0,0), limits = c(0,800)) +
scale_y_continuous(expand = c(0,0), limits = c(0,450))
faceData <- ALLmetaIMG %>% filter(file == i)
if(nrow(faceData) == 0){
return(p)
} else{
faceData <- faceData %>%
mutate(x1 = minX, x2 = minX, x3 = maxX, x4 = maxX, x5 = minX,
y1 = minY, y2 = maxY, y3 = maxY, y4 = minY, y5 = minY) %>%
gather(corner, boxPos, x1:y5) %>%
mutate(posCoord = substr(corner, 1, 1), posID = substr(corner, 2, 2)) %>%
select(-corner) %>% spread(posCoord, boxPos)
}
if(matchBox){
p <- p + geom_path(aes(x=x, y=450-y, group = boxID, colour=faceID), faceData) + guides(colour="none")
}
else{
p <- p + geom_path(aes(x=x, y=450-y, group = boxID, colour=type), faceData)
}
return(p)
}
}
overlayGgplot(imagesList0, ALLmetaIMG)
View(ALLmetaIMG)
View(ALLmetaIMGFaces)
