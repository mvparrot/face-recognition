ETF3231 <- read.csv("~/Documents/ETF3231.csv")
View(ETF3231)
install.packages("ggplot2")
ggplot(aes(x=Total), data=ETF3231) + geom_histogram()
library(ggplot2)
ggplot(aes(x=Total), data=ETF3231) + geom_histogram()
ggplot(aes(x=Total, fill=ETF5231), data=ETF3231) + geom_histogram()
ETF3231$ETF5231
ggplot(aes(x=Total, colour=ETF5231), data=ETF3231) + geom_histogram()
ggplot(aes(x=Total, colour=ETF5231), data=ETF3231) + geom_histogram() + facet(~ETF5231)
ggplot(aes(x=Total, colour=ETF5231), data=ETF3231) + geom_histogram() + facet_grid(~ETF5231)
ggplot(aes(x=Total, fill=ETF5231), data=ETF3231) + geom_histogram(position="dodge")
ggplot(aes(x=Total, fill=ETF5231), data=ETF3231) + geom_density()
mean(ETF3231$Mark)
mean(ETF3231$Total)
ggplot(aes(x=Total, fill=subset(ETF5231, Total!=0)), data=ETF3231) + geom_density()
ggplot(aes(x=Total, fill=ETF5231, data=ETF3231[,ETF3231$Total!=0]) + geom_density()
ggplot(aes(x=Total, fill=ETF5231), data=ETF3231[,ETF3231$Total!=0]) + geom_density()
mean(ETF3231$Total)
ggplot(aes(x=Total, fill=ETF5231), data=ETF3231[,ETF3231$Total!=0]) + geom_density()
ggplot(aes(x=Total, fill=ETF5231), data=ETF3231[ETF3231$Total!=0,]) + geom_density()
ggplot(aes(x=Total, colour=ETF5231), data=ETF3231[ETF3231$Total!=0,]) + geom_density()
ggplot(aes(x=Total, group=ETF5231, colour=ETF5231), data=ETF3231[ETF3231$Total!=0,]) + geom_density()
23-8
scan("~/Documents/names.R")
sample(scan("~/Documents/names.R", what = "character"))
sample(scan("~/Documents/names.R", what = "character"))
sample(scan("~/Documents/names.R", what = "character"))
sample(scan("~/Documents/names.R", what = "character"))
sample(scan("~/Documents/names.R", what = "character"))
sample(scan("~/Documents/names.R", what = "character"))
matrix(sample(scan("~/Documents/names.R", what = "character")), ncol=2)
matrix(sample(scan("~/Documents/names.R", what = "character")), ncol=2)
sample(scan("~/Documents/teams", what = "character"))
sample(c(scan("~/Documents/teams", what = "character"), rep("Bye",5)))
sample(c(scan("~/Documents/teams", what = "character"), rep("Bye",5)))
install.packages("purrr")
library(fpp)
fit <- auto.arima(usconsumption[, 1], xreg=usconsumption[, 2])
fitted(fit, h=2)    # all NAs
hfitted(fit, h=2)  # all NAs
install.packages(fpp)
install.packages("fpp")
library(fpp)
fit <- auto.arima(usconsumption[, 1], xreg=usconsumption[, 2])
fitted(fit, h=2)    # all NAs
hfitted(fit, h=2)  # all NAs
fitted(fit, h=2)    # all NAs
forecast:::hfitted(fit, h=2)  # all NAs
fitted(fit, h=2)    # all NAs
forecast:::fitted.Arima()
forecast:::fitted.Arima
usconsumption <- usconsumption
install.packages("devtools")
api_key <- "2411ca5a7294462b9923e6ef7f97eb24"
api_secret <- "f57d0bc3b0eb427389f6c890700b4749"
image_urls <- c(
"http://mitchelloharawild.com/tennis/2016_HSA_R01_BTomic_AUS_vs_DIstomin_UZB_MS157_clip.0003.png"
)
request_pattern <- "http://api.skybiometry.com/fc/faces/detect.json?api_key=KEY&api_secret=SECRET&urls=IMAGE"
the_request <- function(url)
sub("IMAGE", url, sub("SECRET", api_secret, sub("KEY", api_key, request_pattern)))
the_request <- Vectorize(the_request)
requests <- the_request(image_urls)
test <- lapply(requests, readLines)
a <- fromJSON(test[[1]])
a <- fromJSON(test[[4]])
a$photos$tags
makeBoxSkyBiometry <- function(center.x, center.y, width, height){
minx <- center.x - width/2
miny <- center.y - height/2
maxx <- center.x + width/2
maxy <- center.y + height/2
x <- c(minx, minx, maxx, maxx, minx)*8
y <- c(maxy, miny, miny, maxy, maxy)*4.5
return(data.frame(x=x, y=y))
}
box <- makeBoxSkyBiometry(a$photos$tags[[1]]$center$x,a$photos$tags[[1]]$center$y, a$photos$tags[[1]]$width, a$photos$tags[[1]]$height)
plot(load.image("images/2016_HSA_R01_BTomic_AUS_vs_DIstomin_UZB_MS157_clip.0003.png"))
lines(box$x, box$y ,col="green")
points(a$photos$tags[[1]]$eye_left$x*8,a$photos$tags[[1]]$eye_left$y*4.5, col="green")
points(a$photos$tags[[1]]$eye_right$x*8,a$photos$tags[[1]]$eye_right$y*4.5, col="red")
points(a$photos$tags[[1]]*8,a$photos$tags[[1]]$eye_right$y*4.5, col="red")
a
a <- fromJSON(test[[1]])
library(jsonlite)
a <- fromJSON(test[[1]])
a$photos$tags
makeBoxSkyBiometry <- function(center.x, center.y, width, height){
minx <- center.x - width/2
miny <- center.y - height/2
maxx <- center.x + width/2
maxy <- center.y + height/2
x <- c(minx, minx, maxx, maxx, minx)*8
y <- c(maxy, miny, miny, maxy, maxy)*4.5
return(data.frame(x=x, y=y))
}
box <- makeBoxSkyBiometry(a$photos$tags[[1]]$center$x,a$photos$tags[[1]]$center$y, a$photos$tags[[1]]$width, a$photos$tags[[1]]$height)
plot(load.image("images/2016_HSA_R01_BTomic_AUS_vs_DIstomin_UZB_MS157_clip.0003.png"))
lines(box$x, box$y ,col="green")
library(imager)
plot(load.image("images/2016_HSA_R01_BTomic_AUS_vs_DIstomin_UZB_MS157_clip.0003.png"))
setwd("github/face-recognition/")
plot(load.image("images/2016_HSA_R01_BTomic_AUS_vs_DIstomin_UZB_MS157_clip.0003.png"))
lines(box$x, box$y ,col="green")
points(a$photos$tags[[1]]$eye_left$x*8,a$photos$tags[[1]]$eye_left$y*4.5, col="green")
points(a$photos$tags[[1]]$eye_right$x*8,a$photos$tags[[1]]$eye_right$y*4.5, col="red")
points(a$photos$tags[[1]]*8,a$photos$tags[[1]]$eye_right$y*4.5, col="red")
points(a$photos$tags[[1]]*8,a$photos$tags[[1]]$eye_right$y*4.5, col="red")
a$photos$tags
a$photos$tags$mouth_center.y
a$photos$tags[[1]]
cbind(a$photos$url, a$photos$tags[[1]])
length(a$photos$tags)
image_urls <- c(
"http://mitchelloharawild.com/tennis/2016_HSA_R01_BTomic_AUS_vs_DIstomin_UZB_MS157_clip.0003.png",
"http://mitchelloharawild.com/tennis/2016_CT8_R02_TSmyczek_USA_vs_VTroicki_SRB_MS222_clip.0050.png",
"http://mitchelloharawild.com/tennis/2016_CT8_R02_TSmyczek_USA_vs_VTroicki_SRB_MS222_clip.0052.png"
)
request_pattern <- "http://api.skybiometry.com/fc/faces/detect.json?api_key=KEY&api_secret=SECRET&urls=IMAGE"
the_request <- function(url)
sub("IMAGE", url, sub("SECRET", api_secret, sub("KEY", api_key, request_pattern)))
the_request <- Vectorize(the_request)
requests <- the_request(image_urls)
test <- lapply(requests, readLines)
image_urls <- file.path("http://on-the-t.com/assets/match_images", list.files())
image_urls <- grep("RLA.*R07", image_urls, val = TRUE) # Only RLA R07 are posted
image_urls
image_urls <- file.path("http://on-the-t.com/assets/match_images", list.files())
image_urls <- c(
"http://mitchelloharawild.com/tennis/2016_HSA_R01_BTomic_AUS_vs_DIstomin_UZB_MS157_clip.0003.png",
"http://mitchelloharawild.com/tennis/2016_CT8_R02_TSmyczek_USA_vs_VTroicki_SRB_MS222_clip.0050.png",
"http://mitchelloharawild.com/tennis/2016_CT8_R02_TSmyczek_USA_vs_VTroicki_SRB_MS222_clip.0052.png",
"http://mitchelloharawild.com/tennis/2016_CT8_R02_TSmyczek_USA_vs_VTroicki_SRB_MS222_clip.0017.png",
"http://mitchelloharawild.com/tennis/2016_HSA_R01_BTomic_AUS_vs_DIstomin_UZB_MS157_clip.0020.png"
)
request_pattern <- "http://api.skybiometry.com/fc/faces/detect.json?api_key=KEY&api_secret=SECRET&urls=IMAGE"
the_request <- function(url)
sub("IMAGE", url, sub("SECRET", api_secret, sub("KEY", api_key, request_pattern)))
the_request <- Vectorize(the_request)
requests <- the_request(image_urls)
test <- lapply(requests, readLines)
a <- fromJSON(test[[1]])
a
a <- fromJSON(test[[5]])
a$photos$tags
a$photos
a$photos$tags
a$photos$tags[[1]]
plot(load.image("images/2016_HSA_R01_BTomic_AUS_vs_DIstomin_UZB_MS157_clip.0020.png"))
NROW(a$photos$tags[[1]])
a$photos$tags[[1]][,1]
a$photos$tags[[1]][1,]
a$photos$tags[[1]]$eye_left$x
a$photos$tags[[1]]$eye_left$x[1,]
a$photos$tags[[1]]$eye_left$x[1]
for(i in 1:NROW(a$photos$tags[[1]])){
box <- makeBoxSkyBiometry(a$photos$tags[[1]]$center$x[i],a$photos$tags[[1]]$center$y[i], a$photos$tags[[1]]$width[i], a$photos$tags[[1]]$height[i])
lines(box$x, box$y ,col="green")
points(a$photos$tags[[1]]$eye_left$x[i]*8,a$photos$tags[[1]]$eye_left$y[i]*4.5, col="green")
points(a$photos$tags[[1]]$eye_right$x[i]*8,a$photos$tags[[1]]$eye_right$y[i]*4.5, col="red")
}
a$photos
a$photos$url
cbind(url = a$photos$url, a$photos$tags[[1]])
getFacesSkyBiometry <- function(a){
cbind(url = a$photos$url, a$photos$tags[[1]])
}
test
parse_json <- lapply(test, fromJSON)
parse_json
length(parse_json)
names(parse_json)
parse_json[[1]]
getFacesSkyBiometry <- function(a){
cbind(url = a$photos$url, a$photos$tags[[1]])
}
lapply(parse_json, getFacesSkyBiometry)
parsedFaces <- lapply(parse_json, getFacesSkyBiometry)
parsedFaces$`http://mitchelloharawild.com/tennis/2016_HSA_R01_BTomic_AUS_vs_DIstomin_UZB_MS157_clip.0003.png`
parsedFaces[[2]]`
parsedFaces[[2]]
getFacesSkyBiometry <- function(a){
if(!is.null(a$photos$tags[[1]])){
cbind(url = a$photos$url, a$photos$tags[[1]])
}
else{
NA
}
}
parsedFaces <- lapply(parse_json, getFacesSkyBiometry)
parsedFaces[[2]]
debug(getFacesSkyBiometry)
a
parsedFaces <- lapply(parse_json, getFacesSkyBiometry)
a
a
is.null(a$photos$tags[[1]])
a$photos$tags
a$photos$tags[[1]]
getFacesSkyBiometry <- function(a){
if(length(a$photos$tags[[1]]) > 1){
cbind(url = a$photos$url, a$photos$tags[[1]])
}
else{
NA
}
}
parsedFaces <- lapply(parse_json, getFacesSkyBiometry)
parsedFaces[[2]]
?as.data.frame.list
parsedFaces
as.data.frame(parsedFaces)
getFacesSkyBiometry <- function(a){
if(length(a$photos$tags[[1]]) > 1){
cbind(url = a$photos$url, a$photos$tags[[1]])
}
else{
rep(NA, 10)
}
}
parsedFaces <- lapply(parse_json, getFacesSkyBiometry)
getFacesSkyBiometry <- function(a){
if(length(a$photos$tags[[1]]) > 1){
cbind(url = a$photos$url, a$photos$tags[[1]])
}
else{
cbind(url = a$photos$url, rep(NA, 9))
}
}
parsedFaces <- lapply(parse_json, getFacesSkyBiometry)
as.data.frame(parsedFaces)
parsedFaces[[1]]
parsedFaces[[2]]
getFacesSkyBiometry <- function(a){
if(length(a$photos$tags[[1]]) > 1){
cbind(url = a$photos$url, a$photos$tags[[1]])
}
else{
c(url = a$photos$url, rep(NA, 9))
}
}
parsedFaces <- lapply(parse_json, getFacesSkyBiometry)
as.data.frame(parsedFaces)
parsedFaces$`http://mitchelloharawild.com/tennis/2016_HSA_R01_BTomic_AUS_vs_DIstomin_UZB_MS157_clip.0003.png`
parsedFaces$`http://mitchelloharawild.com/tennis/2016_CT8_R02_TSmyczek_USA_vs_VTroicki_SRB_MS222_clip.0050.png`
T(1:7)
t(1:7)
getFacesSkyBiometry <- function(a){
if(length(a$photos$tags[[1]]) > 1){
cbind(url = a$photos$url, a$photos$tags[[1]])
}
else{
t(c(url = a$photos$url, rep(NA, 9)))
}
}
parsedFaces <- lapply(parse_json, getFacesSkyBiometry)
as.data.frame(parsedFaces)
parsedFaces$`http://mitchelloharawild.com/tennis/2016_CT8_R02_TSmyczek_USA_vs_VTroicki_SRB_MS222_clip.0050.png`
a <0 parsedFaces$`http://mitchelloharawild.com/tennis/2016_CT8_R02_TSmyczek_USA_vs_VTroicki_SRB_MS222_clip.0050.png`
a <- parsedFaces$`http://mitchelloharawild.com/tennis/2016_CT8_R02_TSmyczek_USA_vs_VTroicki_SRB_MS222_clip.0050.png`
length(a)
NCOL(a)
rbind(a,a)
rbind(parsedFaces)
?do.call
a
do.call(rbind, parsedFaces)
lapply(parsedFaces, NCOL)
parsedFaces$`http://mitchelloharawild.com/tennis/2016_HSA_R01_BTomic_AUS_vs_DIstomin_UZB_MS157_clip.0003.png`
getFacesSkyBiometry <- function(a){
if(length(a$photos$tags[[1]]) > 1){
cbind(url = a$photos$url, a$photos$tags[[1]])
}
else{
t(c(url = a$photos$url, rep(NA, 19)))
}
}
parsedFaces <- lapply(parse_json, getFacesSkyBiometry)
a
rbind(a,a,a,a,a,a)
parsedFaces
class(parsedFaces)
do.call(rbind,parsedFaces)
data.frame(url = a$photos$url, label=NA, confirmed = NA, manual=NA, width=NA, height=NA, yaw=NA, roll=NA,
pitch = NA, attributes.face.value = NA, attributes.face.confidence = NA, points = NA, similarities = NA,
tid = NA, recognizable = NA, center.x = NA, center.y = NA)
data.frame(url = NA, label=NA, confirmed = NA, manual=NA, width=NA, height=NA, yaw=NA, roll=NA,
pitch = NA, attributes.face.value = NA, attributes.face.confidence = NA, points = NA, similarities = NA,
tid = NA, recognizable = NA, center.x = NA, center.y = NA)
NCOL(data.frame(url = NA, label=NA, confirmed = NA, manual=NA, width=NA, height=NA, yaw=NA, roll=NA,
pitch = NA, attributes.face.value = NA, attributes.face.confidence = NA, points = NA, similarities = NA,
tid = NA, recognizable = NA, center.x = NA, center.y = NA))
parsedFaces$`http://mitchelloharawild.com/tennis/2016_HSA_R01_BTomic_AUS_vs_DIstomin_UZB_MS157_clip.0003.png`
colnames(parsedFaces$`http://mitchelloharawild.com/tennis/2016_HSA_R01_BTomic_AUS_vs_DIstomin_UZB_MS157_clip.0003.png`)
unlist(parsedFaces$`http://mitchelloharawild.com/tennis/2016_HSA_R01_BTomic_AUS_vs_DIstomin_UZB_MS157_clip.0003.png`)
data.frame(unlist(parsedFaces$`http://mitchelloharawild.com/tennis/2016_HSA_R01_BTomic_AUS_vs_DIstomin_UZB_MS157_clip.0003.png`))
colnames(parsedFaces$`http://mitchelloharawild.com/tennis/2016_HSA_R01_BTomic_AUS_vs_DIstomin_UZB_MS157_clip.0003.png`)
a <- colnames(parsedFaces$`http://mitchelloharawild.com/tennis/2016_HSA_R01_BTomic_AUS_vs_DIstomin_UZB_MS157_clip.0003.png`)
colnames(unlist(parsedFaces$`http://mitchelloharawild.com/tennis/2016_HSA_R01_BTomic_AUS_vs_DIstomin_UZB_MS157_clip.0003.png`))
data.frame(parsedFaces$`http://mitchelloharawild.com/tennis/2016_HSA_R01_BTomic_AUS_vs_DIstomin_UZB_MS157_clip.0003.png`))
data.frame(parsedFaces$`http://mitchelloharawild.com/tennis/2016_HSA_R01_BTomic_AUS_vs_DIstomin_UZB_MS157_clip.0003.png`)
colnames(data.frame(parsedFaces$`http://mitchelloharawild.com/tennis/2016_HSA_R01_BTomic_AUS_vs_DIstomin_UZB_MS157_clip.0003.png`))
?data.frame
colnames(as.data.frame(parsedFaces$`http://mitchelloharawild.com/tennis/2016_HSA_R01_BTomic_AUS_vs_DIstomin_UZB_MS157_clip.0003.png`))
colnames(unlist(parsedFaces$`http://mitchelloharawild.com/tennis/2016_HSA_R01_BTomic_AUS_vs_DIstomin_UZB_MS157_clip.0003.png`, recursive = TRUE))
data.frame(unlist(parsedFaces$`http://mitchelloharawild.com/tennis/2016_HSA_R01_BTomic_AUS_vs_DIstomin_UZB_MS157_clip.0003.png`, recursive = TRUE))
colnames(data.frame(unlist(parsedFaces$`http://mitchelloharawild.com/tennis/2016_HSA_R01_BTomic_AUS_vs_DIstomin_UZB_MS157_clip.0003.png`, recursive = TRUE)))
?unlist
c(parsedFaces[[1]])
unlist(c(parsedFaces[[1]]))
colnames(unlist(c(parsedFaces[[1]])))
c(unlist(c(parsedFaces[[1]]))
)
c(unlist(c(parsedFaces[[1]])))
names(c(unlist(c(parsedFaces[[1]]))))
names(unlist(c(parsedFaces[[1]])))
data.frame(unlist(c(parsedFaces[[1]])))
dim(data.frame(unlist(c(parsedFaces[[1]]))))
t(data.frame(unlist(c(parsedFaces[[1]]))))
a$photos$tags[[1]]
]
a <- fromJSON(test[[5]])
]
a$photos$tags[[1]]
unlist(a$photos$tags[[1]])
unlist(data.frame(a$photos$tags[[1]]))
unlist(as.data.frame(a$photos$tags[[1]]))
a$photos$tags[[1]]
as.data.frame(a$photos$tags[[1]])
as.data.frame(a$photos$tags[[1]])$nose
as.data.frame(a$photos$tags[[1]])
library(forecast)
forecast:::datamat
forecast:::datamat(a$photos$tags)
forecast:::datamat(a$photos$tags[[1]])
forecast:::datamat(a$photos$tags[[1]])$x
forecast:::datamat(a$photos$tags[[1]])
unlist(a$photos$tags[[1]][1,])
colnames(unlist(a$photos$tags[[1]][1,]))
names(unlist(a$photos$tags[[1]][1,]))
mytest <- forecast:::datamat(a$photos$tags[[1]])
colnames(mytest) <- names(unlist(a$photos$tags[[1]][1,]))
View(mytest)
NCOL(mytest)
names(unlist(a$photos$tags[[1]][1,]))
name <- names(unlist(a$photos$tags[[1]][1,]))
out <- "c('"
out
out <- "c("
for(i in 1:length(name)){
out <- paste0(out, "', ", name[i])
}
out
out <- "data.frame("
for(i in 1:length(name)){
out <- paste0(out, " = NA', ", name[i])
}
out
out <- "data.frame("
for(i in 1:length(name)){
out <- paste0(out, " = NA, ", name[i])
}
out
getFacesSkyBiometry <- function(a){
if(length(a$photos$tags[[1]]) > 1){
cbind(url = a$photos$url, a$photos$tags[[1]])
}
else{
data.frame(url = NA, label = NA, confirmed = NA, manual = NA, width = NA, height = NA, yaw = NA, roll = NA,
pitch = NA, attributes.face.value = NA, attributes.face.confidence = NA, points = NA, similarities = NA,
tid = NA, recognizable = NA, center.x = NA, center.y = NA, eye_left.x = NA, eye_left.y = NA,
eye_left.confidence = NA, eye_left.id = NA, eye_right.x = NA, eye_right.y = NA, eye_right.confidence = NA,
eye_right.id = NA, mouth_center.x = NA, mouth_center.y = NA, mouth_center.confidence = NA, mouth_center.id = NA,
nose.x = NA, nose.y = NA, nose.confidence = NA, nose.id = NA)
}
}
do.call(rbind,parsedFaces)
parsedFaces <- lapply(parse_json, getFacesSkyBiometry)
do.call(rbind,parsedFaces)
parsedFaces[[1]]
parsedFaces[[2]]
getFacesSkyBiometry <- function(a){
if(length(a$photos$tags[[1]]) > 1){
require(forecast)
tagdata <- forecast:::datamat(a$photos$tags[[1]])
colnames(tagdata) <- names(unlist(a$photos$tags[[1]][1,]))
cbind(url = a$photos$url, tagdata)
}
else{
data.frame(url = NA, label = NA, confirmed = NA, manual = NA, width = NA, height = NA, yaw = NA, roll = NA,
pitch = NA, attributes.face.value = NA, attributes.face.confidence = NA, points = NA, similarities = NA,
tid = NA, recognizable = NA, center.x = NA, center.y = NA, eye_left.x = NA, eye_left.y = NA,
eye_left.confidence = NA, eye_left.id = NA, eye_right.x = NA, eye_right.y = NA, eye_right.confidence = NA,
eye_right.id = NA, mouth_center.x = NA, mouth_center.y = NA, mouth_center.confidence = NA, mouth_center.id = NA,
nose.x = NA, nose.y = NA, nose.confidence = NA, nose.id = NA)
}
}
parsedFaces <- lapply(parse_json, getFacesSkyBiometry)
do.call(rbind,parsedFaces)
parsedFaces$`http://mitchelloharawild.com/tennis/2016_HSA_R01_BTomic_AUS_vs_DIstomin_UZB_MS157_clip.0003.png`
parsedFaces$`http://mitchelloharawild.com/tennis/2016_HSA_R01_BTomic_AUS_vs_DIstomin_UZB_MS157_clip.0003.png`$center.y
parsedFaces$`http://mitchelloharawild.com/tennis/2016_HSA_R01_BTomic_AUS_vs_DIstomin_UZB_MS157_clip.0003.png`$center
do.call(rbind,parsedFaces)
lapply(parsedFaces, NCOL)
colnames(parsedFaces[[1]])
colnames(parsedFaces[[2]])
parsedFaces[[1]]
parse_json$`http://mitchelloharawild.com/tennis/2016_HSA_R01_BTomic_AUS_vs_DIstomin_UZB_MS157_clip.0003.png`
parse_json$`http://mitchelloharawild.com/tennis/2016_HSA_R01_BTomic_AUS_vs_DIstomin_UZB_MS157_clip.0003.png`$tags
parse_json$`http://mitchelloharawild.com/tennis/2016_HSA_R01_BTomic_AUS_vs_DIstomin_UZB_MS157_clip.0003.png`$photos$tags[[1]]
parsedFaces[[1]]
a
forecast:::datamat(a$photos$tags[[1]])
a$photos$tags[[1]]
requests
?readLines
requests[1]
library(httr)
?GET
GET("http://api.skybiometry.com/fc/faces/detect.json", query = list(api_key = "2411ca5a7294462b9923e6ef7f97eb24", api_secret = "f57d0bc3b0eb427389f6c890700b4749", urls = "http://mitchelloharawild.com/tennis/2016_HSA_R01_BTomic_AUS_vs_DIstomin_UZB_MS157_clip.0020.png"))
a <- GET("http://api.skybiometry.com/fc/faces/detect.json", query = list(api_key = "2411ca5a7294462b9923e6ef7f97eb24", api_secret = "f57d0bc3b0eb427389f6c890700b4749", urls = "http://mitchelloharawild.com/tennis/2016_HSA_R01_BTomic_AUS_vs_DIstomin_UZB_MS157_clip.0020.png"))
a$request
a$url
a$status_code
a$headers
a$all_headers
a$content
a$handle
a$times
a$date
a$content
a <- POST("http://api.skybiometry.com/fc/faces/detect.json", query = list(api_key = "2411ca5a7294462b9923e6ef7f97eb24", api_secret = "f57d0bc3b0eb427389f6c890700b4749", urls = "http://mitchelloharawild.com/tennis/2016_HSA_R01_BTomic_AUS_vs_DIstomin_UZB_MS157_clip.0020.png"))
a
a$content
?add_headers
