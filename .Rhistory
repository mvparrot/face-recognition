Skybiometry ="#66A61E")
#plot images with overlaid boxes
overlayGgplot <- function(imgList, mergeData, matchBox=FALSE, colourScheme = type.colours){
for(i in imgList){
#read in image
#image <- readImage(paste0("figures/", i))
#used in analyses
image <- readImage(paste0("images/", i))
#convert image to a df, add hex value
image_df <- data.frame(x=rep(1:nrow(image), ncol(image)),
y=rep(1:ncol(image),
rep(nrow(image),
ncol(image))),
r=as.vector(image[,,1]),
g=as.vector(image[,,2]),
b=as.vector(image[,,3]))
image_df$h <- rgb(image_df[,3:5])
#Create the plot of the image
p <- ggplot() +
scale_fill_identity() +
geom_tile(data=image_df, aes(x,-y, fill=h)) +
theme_void()
# Find associated Face Box information for specific image
faceData <- ALLmetaIMGnamedFaces %>% filter(file == i)
if(nrow(faceData) == 0){
return(p)
} else{
faceData <- faceData %>%
mutate(x1 = minX, x2 = minX, x3 = maxX, x4 = maxX, x5 = minX,
y1 = minY, y2 = maxY, y3 = maxY, y4 = minY, y5 = minY) %>%
gather(corner, boxPos, x1:y5) %>%
mutate(posCoord = substr(corner, 1, 1), posID = substr(corner, 2, 2)) %>%
dplyr::select(-corner) %>% spread(posCoord, boxPos) %>%
dplyr::select(file, type, minX, maxX, minY, maxY, FaceKey, FaceID, posID, x, y)
}
}
if(matchBox){
p1 <- p + geom_rect(data=faceData,
aes(xmin=minX, ymin=-maxY, xmax=maxX, ymax=-minY,
color=FaceKey, group=FaceID), fill=NA) +
guides(colour = "none")
}
else{
p1 <- p + geom_rect(data=faceData,
aes(xmin=minX, ymin=-maxY, xmax=maxX, ymax=-minY,
color=type, group=FaceID), fill=NA) +
guides(colour = guide_legend(""))  + theme(legend.position = "bottom") +
coord_fixed(ratio=0.85) + scale_color_manual(values = colourScheme)
}
return(p1)
}
overlayGgplot(imagesList0, ALLmetaIMGnamedFaces, matchBox = FALSE)
RColorBrewer::brewer.pal(n=5, "Dark2")
RColorBrewer::brewer.pal(n=, "Dark2")
RColorBrewer::brewer.pal(n=6, "Dark2")
type.colours <- c(Animetrics =     "#1B9E77",
Google =     "#D95F02",
Manual =     "#E6AB02",
Microsoft =  "#E7298A",
Skybiometry ="#66A61E")
overlayGgplot <- function(imgList, mergeData, matchBox=FALSE, colourScheme = type.colours){
for(i in imgList){
#read in image
#image <- readImage(paste0("figures/", i))
#used in analyses
image <- readImage(paste0("images/", i))
#convert image to a df, add hex value
image_df <- data.frame(x=rep(1:nrow(image), ncol(image)),
y=rep(1:ncol(image),
rep(nrow(image),
ncol(image))),
r=as.vector(image[,,1]),
g=as.vector(image[,,2]),
b=as.vector(image[,,3]))
image_df$h <- rgb(image_df[,3:5])
#Create the plot of the image
p <- ggplot() +
scale_fill_identity() +
geom_tile(data=image_df, aes(x,-y, fill=h)) +
theme_void()
# Find associated Face Box information for specific image
faceData <- ALLmetaIMGnamedFaces %>% filter(file == i)
if(nrow(faceData) == 0){
return(p)
} else{
faceData <- faceData %>%
mutate(x1 = minX, x2 = minX, x3 = maxX, x4 = maxX, x5 = minX,
y1 = minY, y2 = maxY, y3 = maxY, y4 = minY, y5 = minY) %>%
gather(corner, boxPos, x1:y5) %>%
mutate(posCoord = substr(corner, 1, 1), posID = substr(corner, 2, 2)) %>%
dplyr::select(-corner) %>% spread(posCoord, boxPos) %>%
dplyr::select(file, type, minX, maxX, minY, maxY, FaceKey, FaceID, posID, x, y)
}
}
if(matchBox){
p1 <- p + geom_rect(data=faceData,
aes(xmin=minX, ymin=-maxY, xmax=maxX, ymax=-minY,
color=FaceKey, group=FaceID), fill=NA) +
guides(colour = "none")
}
else{
p1 <- p + geom_rect(data=faceData,
aes(xmin=minX, ymin=-maxY, xmax=maxX, ymax=-minY,
color=type, group=FaceID), fill=NA) +
guides(colour = guide_legend(""))  + theme(legend.position = "bottom") +
coord_fixed(ratio=0.85) + scale_color_manual(values = colourScheme)
}
return(p1)
}
overlayGgplot(imagesList0, ALLmetaIMGnamedFaces, matchBox = FALSE)
i1 <- "2016_CT6_R01_CGarcia_FRA_vs_BStrycova_CZE_WS145_clip.0015.png" %>% overlayGgplot()
i2 <- "2016_CT6_R01_EKulichkova_RUS_vs_APetkovic_GER_WS128_clip.0080.png" %>% overlayGgplot()
i3 <- "2016_CT6_R02_ABeck_GER_vs_TBacsinszky_SUI_WS220_clip.0017.png" %>% overlayGgplot()
i4 <- "2016_SC2_R01_ATomljanovic_AUS_vs_KBondarenko_UKR_WS1112_clip.0053.png" %>% overlayGgplot()
grid.arrange(i1, i2, i3, i4, nrow=2)
library(gridExtra)
gridExtra::grid.arrange(i1, i2, i3, i4, nrow=2)
p1 <- p + geom_rect(data=faceData,
aes(xmin=minX, ymin=-maxY, xmax=maxX, ymax=-minY,
color=type, group=FaceID), fill=NA)  +
coord_fixed(ratio=0.85) + scale_color_manual(values = colourScheme)
p1
colourScheme = type.colours
p1
p + geom_rect(data=faceData,
aes(xmin=minX, ymin=-maxY, xmax=maxX, ymax=-minY,
color=type, group=FaceID), fill=NA)  +
coord_fixed(ratio=0.85) + scale_color_manual(values = colourScheme)
#plot images with overlaid boxes
overlayGgplot <- function(imgList, mergeData, matchBox=FALSE, colourScheme = type.colours, legend=TRUE){
for(i in imgList){
#read in image
#image <- readImage(paste0("figures/", i))
#used in analyses
image <- readImage(paste0("images/", i))
#convert image to a df, add hex value
image_df <- data.frame(x=rep(1:nrow(image), ncol(image)),
y=rep(1:ncol(image),
rep(nrow(image),
ncol(image))),
r=as.vector(image[,,1]),
g=as.vector(image[,,2]),
b=as.vector(image[,,3]))
image_df$h <- rgb(image_df[,3:5])
#Create the plot of the image
p <- ggplot() +
scale_fill_identity() +
geom_tile(data=image_df, aes(x,-y, fill=h)) +
theme_void()
# Find associated Face Box information for specific image
faceData <- ALLmetaIMGnamedFaces %>% filter(file == i)
if(nrow(faceData) == 0){
return(p)
} else{
faceData <- faceData %>%
mutate(x1 = minX, x2 = minX, x3 = maxX, x4 = maxX, x5 = minX,
y1 = minY, y2 = maxY, y3 = maxY, y4 = minY, y5 = minY) %>%
gather(corner, boxPos, x1:y5) %>%
mutate(posCoord = substr(corner, 1, 1), posID = substr(corner, 2, 2)) %>%
dplyr::select(-corner) %>% spread(posCoord, boxPos) %>%
dplyr::select(file, type, minX, maxX, minY, maxY, FaceKey, FaceID, posID, x, y)
}
}
if(matchBox){
p1 <- p + geom_rect(data=faceData,
aes(xmin=minX, ymin=-maxY, xmax=maxX, ymax=-minY,
color=FaceKey, group=FaceID), fill=NA) +
guides(colour = "none")
}
else {
pa <- p + geom_rect(data=faceData,
aes(xmin=minX, ymin=-maxY, xmax=maxX, ymax=-minY,
color=type, group=FaceID), fill=NA)  +
coord_fixed(ratio=0.85) + scale_color_manual(values = colourScheme)
if (legend) p1 <- pa + guides(colour = guide_legend(""))  + theme(legend.position = "bottom")
}
return(p1)
}
overlayGgplot(imagesList0, ALLmetaIMGnamedFaces, matchBox = FALSE, legend=FALSE)
?legend
?guide_legend
overlayGgplot <- function(imgList, mergeData, matchBox=FALSE, colourScheme = type.colours, legend=TRUE){
for(i in imgList){
#read in image
#image <- readImage(paste0("figures/", i))
#used in analyses
image <- readImage(paste0("images/", i))
#convert image to a df, add hex value
image_df <- data.frame(x=rep(1:nrow(image), ncol(image)),
y=rep(1:ncol(image),
rep(nrow(image),
ncol(image))),
r=as.vector(image[,,1]),
g=as.vector(image[,,2]),
b=as.vector(image[,,3]))
image_df$h <- rgb(image_df[,3:5])
#Create the plot of the image
p <- ggplot() +
scale_fill_identity() +
geom_tile(data=image_df, aes(x,-y, fill=h)) +
theme_void()
# Find associated Face Box information for specific image
faceData <- ALLmetaIMGnamedFaces %>% filter(file == i)
if(nrow(faceData) == 0){
return(p)
} else{
faceData <- faceData %>%
mutate(x1 = minX, x2 = minX, x3 = maxX, x4 = maxX, x5 = minX,
y1 = minY, y2 = maxY, y3 = maxY, y4 = minY, y5 = minY) %>%
gather(corner, boxPos, x1:y5) %>%
mutate(posCoord = substr(corner, 1, 1), posID = substr(corner, 2, 2)) %>%
dplyr::select(-corner) %>% spread(posCoord, boxPos) %>%
dplyr::select(file, type, minX, maxX, minY, maxY, FaceKey, FaceID, posID, x, y)
}
}
if(matchBox){
p1 <- p + geom_rect(data=faceData,
aes(xmin=minX, ymin=-maxY, xmax=maxX, ymax=-minY,
color=FaceKey, group=FaceID), fill=NA) +
guides(colour = "none")
}
else {
pa <- p + geom_rect(data=faceData,
aes(xmin=minX, ymin=-maxY, xmax=maxX, ymax=-minY,
color=type, group=FaceID), fill=NA)  +
coord_fixed(ratio=0.85) + scale_color_manual(values = colourScheme)
if (legend) p1 <- pa + guides(colour = guide_legend("")) + theme(legend.position = "bottom")
else p1<- pa + theme(legend.position = "none")
}
return(p1)
}
imagesList0<-as.list("2016_HSA_R01_BTomic_AUS_vs_DIstomin_UZB_MS157_clip.0013.png")
overlayGgplot(imagesList0, ALLmetaIMGnamedFaces, matchBox = FALSE, legend=FALSE)
overlayGgplot(imagesList0, ALLmetaIMGnamedFaces, matchBox = FALSE)
i1 <- "2016_CT6_R01_CGarcia_FRA_vs_BStrycova_CZE_WS145_clip.0015.png" %>% overlayGgplot(., legend=FALSE)
i1
i1 <- "2016_CT6_R01_CGarcia_FRA_vs_BStrycova_CZE_WS145_clip.0015.png" %>% overlayGgplot(., legend=FALSE)
i2 <- "2016_CT6_R01_EKulichkova_RUS_vs_APetkovic_GER_WS128_clip.0080.png" %>% overlayGgplot(., legend=FALSE)
i3 <- "2016_CT6_R02_ABeck_GER_vs_TBacsinszky_SUI_WS220_clip.0017.png" %>% overlayGgplot(., legend=FALSE)
i4 <- "2016_SC2_R01_ATomljanovic_AUS_vs_KBondarenko_UKR_WS1112_clip.0053.png" %>% overlayGgplot(., legend=FALSE)
gridExtra::grid.arrange(i1, i2, i3, i4, nrow=2)
ALLmetaIMGnamedFaces %>%
filter(shotangle=="Birds Eye",
bg=="Logo wall",
situation=="Court in play",
type=="Animetrics", matchesManual == FALSE) %>% .$file -> mylist
lapply(mylist[5:8], overlayGgplot)
mylist[8]
i1 <- "2016_CT6_R01_CGarcia_FRA_vs_BStrycova_CZE_WS145_clip.0015.png" %>% overlayGgplot(., legend=FALSE)
i2 <- "2016_HSA_R03_FDelbonis_ARG_vs_GSimon_FRA_MS302_clip.0072.png" %>% overlayGgplot(., legend=FALSE)
i3 <- "2016_CT6_R02_ABeck_GER_vs_TBacsinszky_SUI_WS220_clip.0017.png" %>% overlayGgplot(., legend=FALSE)
i4 <- "2016_SC2_R01_ATomljanovic_AUS_vs_KBondarenko_UKR_WS1112_clip.0053.png" %>% overlayGgplot(., legend=FALSE)
gridExtra::grid.arrange(i1, i2, i3, i4, nrow=2)
NoManual<-ALLmetaIMGnamedFaces %>% filter(ALLmetaIMGnamedFaces$type!="Manual")
NoManual<-NoManual %>% droplevels(NoManual$type)
ct<-CrossTable(table(NoManual$matchesManual, NoManual$type),
prop.chisq = FALSE,
digits=4,
expected = FALSE,
prop.r = TRUE, prop.c = TRUE, prop.t = TRUE,
drop.levels = TRUE, format = ("SPSS"), cell.layout = FALSE,
dnn = c("Matches Manual","API Type"))
pander(ct, caption = "This table shows the amount potential faces that were found by the APIs and whether they compare to those annotated manually. Where the FALSE row denotes API Face potential facees do not coincide with manually annotated faces. The tables shows that Google found 46.96% of the Faces identified manually.")
ggplot(ALLmetaIMGnamed, aes(x = type, fill=type)) +
geom_bar(position="dodge") +
xlab("Facial Recognition APIs") +
scale_x_discrete(limits=c("Manual","Google","Microsoft","Skybiometry","Animetrics")) +
ylab("Number of Potential Faces") +
guides(fill=FALSE) +
labs(caption="") + scale_fill_manual(values=type.colours)
type.colours <- c(Animetrics =     "#1B9E77",
Google =     "#D95F02",
Manual =     "#E6AB02",
Microsoft =  "#E7298A",
Skybiometry ="#66A61E")
brewer.pal(n=9, "YlGnBu")
library(RColorBrewer)
brewer.pal(n=9, "YlGnBu")
brewer.pal(n=9, "YlGnBu")
type.colours <- c(Animetrics =     "#1B9E77",
Google =     "#D95F02",
Manual =     "#E6AB02",
Microsoft =  "#E7298A",
Skybiometry ="#66A61E")
ggplot(ALLmetaIMGnamed, aes(x = type, fill=type)) +
geom_bar(position="dodge") +
xlab("Facial Recognition APIs") +
scale_x_discrete(limits=c("Manual","Google","Microsoft","Skybiometry","Animetrics")) +
ylab("Number of Potential Faces") +
guides(fill=FALSE) +
labs(caption="") + scale_fill_manual(values=type.colours)
brewer.pal(n=9, "YlGn")
type.colours <- c(Animetrics =     "#1B9E77",
Google =     "#D95F02",
Manual =     "#E6AB02",
Microsoft =  "#E7298A",
Skybiometry ="#ADDD8E")
ggplot(ALLmetaIMGnamed, aes(x = type, fill=type)) +
geom_bar(position="dodge") +
xlab("Facial Recognition APIs") +
scale_x_discrete(limits=c("Manual","Google","Microsoft","Skybiometry","Animetrics")) +
ylab("Number of Potential Faces") +
guides(fill=FALSE) +
labs(caption="") + scale_fill_manual(values=type.colours)
brewer.pal(n=9, "Reds")
ggplot(ALLmetaIMGnamed, aes(x = type, fill=type)) +
geom_bar(position="dodge") +
xlab("Facial Recognition APIs") +
scale_x_discrete(limits=c("Manual","Google","Microsoft","Skybiometry","Animetrics")) +
ylab("Number of Potential Faces") +
guides(fill=FALSE) +
labs(caption="") + scale_fill_manual(values=type.colours)
type.colours <- c(Animetrics =     "#1B9E77",
Google =     "#D95F02",
Manual =     "#E6AB02",
Microsoft =  "#E7298A",
Skybiometry ="#ADDD8E")
brewer.pal(n=9, "Reds")
ggplot(ALLmetaIMGnamed, aes(x = type, fill=type)) +
geom_bar(position="dodge") +
xlab("Facial Recognition APIs") +
scale_x_discrete(limits=c("Manual","Google","Microsoft","Skybiometry","Animetrics")) +
ylab("Number of Potential Faces") +
guides(fill=FALSE) +
labs(caption="") + scale_fill_manual(values=type.colours)
brewer.pal(n=9, "RdPU")
brewer.pal(n=9, "RdPu")
type.colours <- c(Animetrics =     "#1B9E77",
Google =     "#FC9272",
Manual =     "#F768A1",
Microsoft =  "#E7298A",
Skybiometry ="#ADDD8E")
ggplot(ALLmetaIMGnamed, aes(x = type, fill=type)) +
geom_bar(position="dodge") +
xlab("Facial Recognition APIs") +
scale_x_discrete(limits=c("Manual","Google","Microsoft","Skybiometry","Animetrics")) +
ylab("Number of Potential Faces") +
guides(fill=FALSE) +
labs(caption="") + scale_fill_manual(values=type.colours)
brewer.pal(n=9, "GrBu")
brewer.pal(n=9, "GnBu")
ggplot(ALLmetaIMGnamed, aes(x = type, fill=type)) +
geom_bar(position="dodge") +
xlab("Facial Recognition APIs") +
scale_x_discrete(limits=c("Manual","Google","Microsoft","Skybiometry","Animetrics")) +
ylab("Number of Potential Faces") +
guides(fill=FALSE) +
labs(caption="") + scale_fill_manual(values=type.colours)
brewer.pal(n=9, "GnBu")
type.colours <- c(Animetrics =     "#1B9E77",
Google =     "#FC9272",
Manual =     "#F768A1",
Microsoft =  "#A8DDB5",
Skybiometry ="#7BCCC4")
ggplot(ALLmetaIMGnamed, aes(x = type, fill=type)) +
geom_bar(position="dodge") +
xlab("Facial Recognition APIs") +
scale_x_discrete(limits=c("Manual","Google","Microsoft","Skybiometry","Animetrics")) +
ylab("Number of Potential Faces") +
guides(fill=FALSE) +
labs(caption="") + scale_fill_manual(values=type.colours)
type.colours <- c(Animetrics =     "#1B9E77",
Google =     "#FC9272",
Manual =     "#F768A1",
Microsoft =  "#F768A1",
Skybiometry ="#ADDD8E")
ggplot(ALLmetaIMGnamed, aes(x = type, fill=type)) +
geom_bar(position="dodge") +
xlab("Facial Recognition APIs") +
scale_x_discrete(limits=c("Manual","Google","Microsoft","Skybiometry","Animetrics")) +
ylab("Number of Potential Faces") +
guides(fill=FALSE) +
labs(caption="") + scale_fill_manual(values=type.colours)
type.colours <- c(Animetrics =     "#7BCCC4",
Google =     "#FC9272",
Manual =     "#F768A1",
Microsoft =  "#A8DDB5",
Skybiometry ="#ADDD8E")
ggplot(ALLmetaIMGnamed, aes(x = type, fill=type)) +
geom_bar(position="dodge") +
xlab("Facial Recognition APIs") +
scale_x_discrete(limits=c("Manual","Google","Microsoft","Skybiometry","Animetrics")) +
ylab("Number of Potential Faces") +
guides(fill=FALSE) +
labs(caption="") + scale_fill_manual(values=type.colours)
type.colours <- c(Animetrics =     "#7BCCC4",
Google =     "#FC9272",
Manual =     "#F768A1",
Microsoft =  "#FA9FB5",
Skybiometry ="#ADDD8E")
ggplot(ALLmetaIMGnamed, aes(x = type, fill=type)) +
geom_bar(position="dodge") +
xlab("Facial Recognition APIs") +
scale_x_discrete(limits=c("Manual","Google","Microsoft","Skybiometry","Animetrics")) +
ylab("Number of Potential Faces") +
guides(fill=FALSE) +
labs(caption="") + scale_fill_manual(values=type.colours)
brewer.pal(n=9, "PuRd")
type.colours <- c(Animetrics =     "#7BCCC4",
Google =     "#FC9272",
Manual =     "#C994C7",
Microsoft =  "#FA9FB5",
Skybiometry ="#ADDD8E")
ggplot(ALLmetaIMGnamed, aes(x = type, fill=type)) +
geom_bar(position="dodge") +
xlab("Facial Recognition APIs") +
scale_x_discrete(limits=c("Manual","Google","Microsoft","Skybiometry","Animetrics")) +
ylab("Number of Potential Faces") +
guides(fill=FALSE) +
labs(caption="") + scale_fill_manual(values=type.colours)
%>%
ggplot(data=ALLmetaIMGPlayers) +
geom_bar(aes(x=shotangle, fill = bg),
position = position_stack(reverse = TRUE),
na.rm=TRUE) +
coord_flip() +
guides(fill = guide_legend(title="Background")) +
labs(caption="") +
ylab("Amount of faces") + xlab("Angle the face was captured from")
ggplot(data=ALLmetaIMGPlayers) +
geom_bar(aes(x=situation, fill = bg),
position = position_stack(reverse = TRUE),
na.rm=TRUE) +
coord_flip() +
guides(fill = guide_legend(title="Background")) +
labs(caption="") +
ylab("Amount of faces") + xlab("Angle the face was captured from")
ggplot(data=ALLmetaIMGPlayers) +
geom_bar(aes(x=situation, fill = shotangle),
position = position_stack(reverse = TRUE),
na.rm=TRUE) +
coord_flip() +
guides(fill = guide_legend(title="Background")) +
labs(caption="") +
ylab("Amount of faces") + xlab("Angle the face was captured from")
ggplot(data=ALLmetaIMGPlayers) +
geom_bar(aes(x=situation, fill = shotangle),
position = position_stack(reverse = TRUE),
na.rm=TRUE) +
coord_flip() +
guides(fill = guide_legend(title="Background")) +
labs(caption="") +
ylab("Amount of faces") + xlab("Angle the face was captured from")
ggplot(data=ALLmetaIMGPlayers) +
geom_bar(aes(x=bg, fill = shotangle),
position = position_stack(reverse = TRUE),
na.rm=TRUE) +
coord_flip() +
guides(fill = guide_legend(title="Background")) +
labs(caption="") +
ylab("Amount of faces") + xlab("Angle the face was captured from")
ggplot(times, na.rm=T) +
scale_color_manual(values = type.colours) +
geom_density(aes(x=time.user.self, colour=type)) +
xlab("Time Taken") +
theme(panel.background = element_rect(fill="grey"))
ggplot(times, na.rm=T) +
scale_color_manual(values = type.colours) +
geom_density(aes(x=time.user.self, colour=type)) +
xlab("Time Taken")
View(ALLmetaIMGPlayers)
View(ALLmetaIMGnamed)
View(ALLmetaIMGPlayers)
times <- ALLmetaIMGnamed %>% filter(!duplicated(file), type!="Manual") %>% arrange(-time.user.self)
View(NoManual)
View(times)
head(time())
head(time
)
head(times)
overlayGgplot("2016_SC2_R01_AKerber_GER_vs_MDoi_JPN_WS1332_clip.0009.png")
overlayGgplot("2016_SC2_R01_AKerber_GER_vs_MDoi_JPN_WS1332_clip.0009.png")
overlayGgplot("2016_CT8_R01_CWitthoeft_GER_vs_SZheng_CHN_WS150_clip.0024.png")
overlayGgplot("2016_HSA_R01_PKohlschreiber_GER_vs_KNishikori_JPN_MS116_clip.0021.png")
overlayGgplot("2016_SC2_R01_AKerber_GER_vs_MDoi_JPN_WS1332_clip.0009.png")
overlayGgplot("2016_CT8_R01_CWitthoeft_GER_vs_SZheng_CHN_WS150_clip.0024.png")
overlayGgplot("2016_HSA_R01_PKohlschreiber_GER_vs_KNishikori_JPN_MS116_clip.0021.png")
times <- ALLmetaIMGnamed %>% filter(!duplicated(file), type!="Manual") %>% arrange(-time.user.self)
ggplot(times, na.rm=T) +
scale_color_manual(values = type.colours) +
geom_density(aes(x=time.user.self, colour=type)) +
xlab("Time Taken")
ALLmetaIMGnamedFaces %>%
filter(type=="Manual") ->ManFaces
ALLmetaIMGnamedFaces %>%
filter(type=="Manual") -> ManFaces
ggplot(data=ManFaces) +
geom_bar(aes(x=glasses, fill = visorhat),
position = position_stack(reverse = TRUE),
na.rm=TRUE) +
coord_flip() +
guides(fill = guide_legend(title="Background")) +
labs(caption="") +
ylab("Amount of faces") + xlab("Angle the face was captured from")
ggplot(data=ManFaces) +
geom_bar(aes(x=glasses, fill = visorhat),
position = position_stack(reverse = TRUE),
na.rm=TRUE) +
coord_flip()
ggplot(data=ManFaces) +
geom_bar(aes(x=visorhat, fill = glasses),
position = position_stack(reverse = TRUE),
na.rm=TRUE) +
coord_flip()
createUpSet(ManFaces)
createUpSet()
createUpSet
VennLists<- ManFaces %>%
split(.$type) %>%
map(~ .$FaceKey)
VennLists
?upset
